<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Grab Tech</title>
    <description>Grab's Engineering team solves critical transportation challenges and makes transport freedom a reality for 620 million people in Southeast Asia.
</description>
    <link>https://engineering.grab.com/</link>
    <atom:link href="https://engineering.grab.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Tue, 07 Jan 2020 11:25:12 +0000</pubDate>
    <lastBuildDate>Tue, 07 Jan 2020 11:25:12 +0000</lastBuildDate>
    <generator>Jekyll v3.8.4</generator>
    
      <item>
        <title>Plumbing At Scale</title>
        <description>&lt;p&gt;When you open the Grab app and hit book, a series of events are generated that define your personalised experience with us: booking state machines kick into motion, driver partners are notified, reward points are computed, your feed is generated, etc. While it is important for you to know that a request has been received, a lot happens asynchronously in our back-end services.&lt;/p&gt;

&lt;p&gt;As custodians and builders of the streaming platform at Grab operating at massive scale (think terabytes of data ingress each hour), the Coban team’s mission is to provide a NoOps, managed platform for seamless, secure access to event streams in real-time, for every team at Grab.&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;figure&gt;
    &lt;img alt=&quot;Coban Sewu Waterfall In Indonesia&quot; height=&quot;65%&quot; width=&quot;65%&quot; src=&quot;/img/plumbing-at-scale/coban-waterfall.jpg&quot; /&gt;
    &lt;figcaption&gt;&lt;em&gt;Coban Sewu Waterfall In Indonesia. (Streams, get it?)&lt;/em&gt;&lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Streaming systems are often at the heart of event-driven architectures, and what starts as a need for a simple message bus for asynchronous processing of events quickly evolves into one that requires a more sophisticated stream processing paradigms.
Earlier this year, we saw common patterns of event processing emerge across our Go backend ecosystem, including:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Filtering and mapping stream events of one type to another&lt;/li&gt;
  &lt;li&gt;Aggregating events into time windows and materializing them back to the event log or to various types of transactional and analytics databases&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Generally, a class of problems surfaced which could be elegantly solved through an event sourcing&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; platform with a stream processing framework built over it, similar to the Keystone platform at Netflix&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;This article details our journey building and deploying an event sourcing platform in Go, building a stream processing framework over it, and then scaling it (reliably and efficiently) to service over 300 billion events a week.&lt;/p&gt;

&lt;h2 id=&quot;event-sourcing&quot;&gt;Event Sourcing&lt;/h2&gt;
&lt;p&gt;Event sourcing is an architectural pattern where changes to an application state are stored as a sequence of events, which can be replayed, recomputed, and queried for state at any time. An implementation of the event sourcing pattern typically has three parts to it:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;An event log&lt;/li&gt;
  &lt;li&gt;Processor selection logic: The logic that selects which chunk of domain logic to run based on an incoming event&lt;/li&gt;
  &lt;li&gt;Processor domain logic: The domain logic that mutates an application’s state&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;figure&gt;
    &lt;img alt=&quot;Event Sourcing&quot; src=&quot;/img/plumbing-at-scale/event-sourcing.png&quot; /&gt;
    &lt;figcaption&gt;&lt;em&gt;Event Sourcing&lt;/em&gt;&lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Event sourcing is a building block on which architectural patterns such as Command Query Responsibility Segregation&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;, serverless systems, and stream processing pipelines are built.&lt;/p&gt;

&lt;h2 id=&quot;the-case-for-stream-processing&quot;&gt;The Case For Stream Processing&lt;/h2&gt;
&lt;p&gt;Below are some use cases serviced by stream processing, built on event sourcing.&lt;/p&gt;

&lt;h4 id=&quot;asynchronous-state-management&quot;&gt;Asynchronous State Management&lt;/h4&gt;
&lt;p&gt;A pub-sub system allows for change events from one service to be fanned out to multiple interested subscribers without letting any one subscriber block the progress of others. Abstracting the event log and centralising it democratises access to this log to all back-end services. It enables the back-end services to apply changes from this centralised log to their own state, independent of downstream services, and/or publish their state changes to it.&lt;/p&gt;

&lt;h4 id=&quot;time-windowed-aggregations&quot;&gt;Time Windowed Aggregations&lt;/h4&gt;
&lt;p&gt;Time-windowed aggregates are a common requirement for machine learning models (as features) as well as analytics. For example, personalising the Grab app landing page requires counting your interaction with various widget elements in recent history, not any one event in particular. Similarly, an analyst may not be interested in the details of a singular booking in real-time, but in building demand heatmaps segmented by geohashes. For latency-sensitive lookups, especially for the personalisation example, pre-aggregations are preferred instead of post-aggregations.&lt;/p&gt;

&lt;h4 id=&quot;stream-joins-filtering-mapping&quot;&gt;Stream Joins, Filtering, Mapping&lt;/h4&gt;
&lt;p&gt;Event logs are typically sharded by some notion of topics to logically divide events of interest around a theme (booking events, profile updates, etc.). Building bigger topics out of smaller ones, as well as smaller ones from bigger ones are common ways to compose “substreams”  of the log of interest directed towards specific services. For example, a promo service may only be interested in listening to booking events for promotional bookings.&lt;/p&gt;

&lt;h4 id=&quot;realtime-business-intelligence&quot;&gt;Realtime Business Intelligence&lt;/h4&gt;
&lt;p&gt;Outputs of stream processing workloads are also plugged into realtime Business Intelligence (BI) and stream analytics solutions upstream, as raw data for visualizations on operations dashboards.&lt;/p&gt;

&lt;h4 id=&quot;archival&quot;&gt;Archival&lt;/h4&gt;
&lt;p&gt;For offline analytics, as well as reconciliation and disaster recovery, having an archive in a cold store helps for certain mission critical streams.&lt;/p&gt;

&lt;h2 id=&quot;platform-requirements&quot;&gt;Platform Requirements&lt;/h2&gt;
&lt;p&gt;Any processing platform for event sourcing and stream processing has certain expectations around its functionality.&lt;/p&gt;

&lt;h4 id=&quot;scaling-and-elasticity&quot;&gt;Scaling and Elasticity&lt;/h4&gt;
&lt;p&gt;Stream/Event Processing pipelines need to be elastic and responsive to changes in traffic patterns, especially considering that user activity (rides, food, deliveries, payments) varies dramatically during the course of a day or week. A spike in food orders on rainy days shouldn’t cause indefinite order processing latencies.&lt;/p&gt;

&lt;h4 id=&quot;noops&quot;&gt;NoOps&lt;/h4&gt;
&lt;p&gt;For a platform team, it’s important that users can easily onboard and manage their pipeline lifecycles, at their preferred cadence. To scale effectively, the process of scaffolding, configuring, and deploying pipelines needs to be standardised, and infrastructure managed. Both the platform and users are able to leverage common standards of telemetry, configuration, and deployment strategies, and users benefit from a lack of infrastructure management overhead.&lt;/p&gt;

&lt;h4 id=&quot;multi-tenancy&quot;&gt;Multi-Tenancy&lt;/h4&gt;
&lt;p&gt;Our platform has quickly scaled to support hundreds of pipelines. Workload isolation, independent processing uptime guarantees, and resource allocation and cost audit are important requirements necessitating multi-tenancy, which help amortize platform overhead costs.&lt;/p&gt;

&lt;h4 id=&quot;resiliency&quot;&gt;Resiliency&lt;/h4&gt;
&lt;p&gt;Whether latency sensitive or latency tolerant, all workloads have certain expectations on processing uptime. From a user’s perspective, there must be guarantees on pipeline uptimes and data completeness, upper bounds on processing delays, instrumentation for alerting, and self-healing properties of the platform for remediation.&lt;/p&gt;

&lt;h4 id=&quot;tunable-tradeoffs&quot;&gt;Tunable Tradeoffs&lt;/h4&gt;
&lt;p&gt;Some pipelines are latency sensitive, and rely on processing completeness seconds after event ingress. Other pipelines are latency tolerant, and can tolerate disruption to processing lasting in tens of minutes. A one size fits all solution is likely to be either cost inefficient or unreliable. Having a way for users to make these tradeoffs consciously becomes important for ensuring efficient processing guarantees at a reasonable cost. Similarly, in the case of upstream failures or unavailability, being able to tune failure modes (like wait, continue, or retry) comes in handy.&lt;/p&gt;

&lt;h2 id=&quot;stream-processing-framework&quot;&gt;Stream Processing Framework&lt;/h2&gt;
&lt;p&gt;While basic event sourcing covers simple use cases like archival, more complicated ones benefit from a common framework that shifts the mental model for processing from per event processing to stream pipeline orchestration.
Given that Go is a “paved road” for back-end development at Grab, and we have service code and bindings for streaming data in a mono-repository, we built a Go framework with a subset of capabilities provided by other streaming frameworks like Flink&lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;figure&gt;
    &lt;img alt=&quot;Logic Blocks In A Stream Processing Pipeline&quot; src=&quot;/img/plumbing-at-scale/pipeline-life-cycle.png&quot; /&gt;
    &lt;figcaption&gt;&lt;em&gt;Logic Blocks In A Stream Processing Pipeline&lt;/em&gt;&lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;h4 id=&quot;capabilities&quot;&gt;Capabilities&lt;/h4&gt;
&lt;p&gt;Some capabilities built into the framework include:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Deduplication:&lt;/strong&gt;  Enables pipelines to idempotently reprocess data in case of rewinds/replays, and provides some processing guarantees within a time window for certain use cases including sinking to datastores.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Filtering and Mapping:&lt;/strong&gt; An ability to filter a source stream data and map them onto target streams.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Aggregation:&lt;/strong&gt; An ability to generate and execute aggregation logic such as sum, avg, max, and min in a window.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Windowing:&lt;/strong&gt; An ability to window processing into tumbling, sliding, and session windows.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Join:&lt;/strong&gt; An ability to combine two streams together with certain join keys in a window.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Processor Chaining:&lt;/strong&gt; Various functionalities can be chained to build more complicated pipelines from simpler ones. For example: filter a large stream into a smaller one, aggregate it over a time window, and then map it to a new stream.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Rewind:&lt;/strong&gt; The ability to rewind the processing logic by a few hours through configuration.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Replay:&lt;/strong&gt; The ability to replay archived data into the same or a separate pipeline via configuration.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Sinks:&lt;/strong&gt; A number of connectors to standard Grab stores are provided, with concerns of auth, telemetry, etc. managed in the runtime.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Error Handling:&lt;/strong&gt; Providing an easy way to indicate whether to wait, skip, and/or retry in case of upstream failures is an important tuning parameter that users need for making sensible tradeoffs in dimensions of backpressure, latency, correctness, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;architecture&quot;&gt;Architecture&lt;/h2&gt;
&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;figure&gt;
    &lt;img alt=&quot;Coban Platform&quot; src=&quot;/img/plumbing-at-scale/coban-platform.png&quot; /&gt;
    &lt;figcaption&gt;&lt;em&gt;Coban Platform&lt;/em&gt;&lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Our event log is primarily a bunch of critical Kafka clusters, which are being polled by various pipelines deployed by service teams on the platform for incoming events. Each pipeline is an isolated deployment, has an identity, and the ability to connect to various upstream sinks to materialise results into, including the event log itself.
There is also a metastore available as an intermediate store for processing pipelines, so the pipelines themselves are stateless with their lifecycle completely beholden to the whims of their owners.&lt;/p&gt;

&lt;h3 id=&quot;anatomy-of-a-processing-pipeline&quot;&gt;Anatomy of a Processing Pipeline&lt;/h3&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;figure&gt;
    &lt;img alt=&quot;Anatomy Of A Stream Processing Pod&quot; src=&quot;/img/plumbing-at-scale/anatomy-of-a-stream-processing-pod.png&quot; /&gt;
    &lt;figcaption&gt;&lt;em&gt;Anatomy Of A Stream Processing Pod&lt;/em&gt;&lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Anatomy of a Stream Processing Pod
Each stream processing pod (the smallest unit of a pipeline’s deployment) has three top level components:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Triggers:&lt;/strong&gt; An interface that connects directly to the source of the data and converts it into an event channel.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Runtime:&lt;/strong&gt; This is the app’s entrypoint and the orchestrator of the pod. It manages the worker pools, triggers, event channels, and lifecycle events.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;The Pipeline plugin:&lt;/strong&gt; The plugin is provided by the user, and conforms to a contract that the platform team publishes. It contains the domain logic for the pipeline and houses the pipeline orchestration defined by a user based on our Stream Processing Framework.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;deployment-infrastructure&quot;&gt;Deployment Infrastructure&lt;/h3&gt;
&lt;p&gt;Our deployment infrastructure heavily leverages Kubernetes on AWS. After a (pretty high) initial cost for infrastructure set up, we’ve found scaling to hundreds of pipelines a breeze with the Kubernetes provided controls. We package our stateless pipeline workloads into Kubernetes deployments, with each pod containing a unit of a stream pipeline, with sidecars that integrate them with our monitoring systems. Other cluster wide tooling deployed (usually as DaemonSets) deal with metric collection, log ingestion, and autoscaling. We currently use the Horizontal Pod Autoscaler&lt;sup id=&quot;fnref:5&quot;&gt;&lt;a href=&quot;#fn:5&quot; class=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt; to manage traffic elasticity, and the Cluster Autoscaler&lt;sup id=&quot;fnref:6&quot;&gt;&lt;a href=&quot;#fn:6&quot; class=&quot;footnote&quot;&gt;6&lt;/a&gt;&lt;/sup&gt; to manage worker node scaling.&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;figure&gt;
    &lt;img alt=&quot;Kubernetes&quot; src=&quot;/img/plumbing-at-scale/kubernetes.png&quot; /&gt;
    &lt;figcaption&gt;&lt;em&gt;A Typical Kubernetes Set Up On AWS&lt;/em&gt;&lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;h4 id=&quot;metastore&quot;&gt;Metastore&lt;/h4&gt;
&lt;p&gt;Some pipelines require storage for use cases ranging from deduplication to stores for materialised results of time windowed aggregations. All our pipelines have access to clusters of ScyllaDB instances (which we use as our internal store), made available to pipeline authors via interfaces in the Stream Processing Framework. Results of these aggregations are then made available to backend services via our GrabStats service, which is a thin query layer over the latest pipeline results.&lt;/p&gt;

&lt;h4 id=&quot;compute-isolation&quot;&gt;Compute Isolation&lt;/h4&gt;
&lt;p&gt;A nice property of packaging pipelines as Kubernetes deployments is a good degree of compute workload isolation for pipelines. While node resources of pipeline pods are still shared (and there are potential noisy neighbour issues on matters like logging throughput), the pipeline pods of various pods can be scheduled and rescheduled across a wide range of nodes safely and swiftly, with minimal impact to pods of other pipelines.&lt;/p&gt;

&lt;h4 id=&quot;redundancy&quot;&gt;Redundancy&lt;/h4&gt;
&lt;p&gt;Stateless processing pods mean we can set up backup or redundant Kubernetes clusters in hot-hot, hot-warm, or hot-cold modes. We use this to ensure high processing availability despite limited control plane guarantees from any single cluster. (Since EKS SLAs for the Kubernetes control plane guarantee only 99.9% uptime today&lt;sup id=&quot;fnref:7&quot;&gt;&lt;a href=&quot;#fn:7&quot; class=&quot;footnote&quot;&gt;7&lt;/a&gt;&lt;/sup&gt;.) Transparent to our users, we make the deployment systems aware of multiple available targets for scheduling.&lt;/p&gt;

&lt;h4 id=&quot;availability-vs-cost&quot;&gt;Availability vs Cost&lt;/h4&gt;
&lt;p&gt;As alluded to in the “Platform Requirements” section, having a way of trading off availability for cost becomes important where the requirements and criticality of each processing pipeline are very different. Given that AWS spot instances are a lot cheaper&lt;sup id=&quot;fnref:8&quot;&gt;&lt;a href=&quot;#fn:8&quot; class=&quot;footnote&quot;&gt;8&lt;/a&gt;&lt;/sup&gt; than on-demand ones, we use user annotated Kubernetes priority classes to determine deployment targets for pipelines. For latency tolerant pipelines, we schedule them on Spot instances which are routinely between 40-90% cheaper than on demand instances on which latency sensitive pipelines run. The caveat is that Spot instances occasionally disappear, and these workloads are disrupted until a replacement node for their scheduling can be found.&lt;/p&gt;

&lt;h1 id=&quot;whats-next&quot;&gt;What’s Next?&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Expand the ecosystem of triggers to support custom sources of data i.e. the “event log”, as well as push based (RPC driven) versus just pull based triggers&lt;/li&gt;
  &lt;li&gt;Build a control plane for API integration with pipeline lifecycle management&lt;/li&gt;
  &lt;li&gt;Move some workloads to use the Vertical Pod Autoscaler&lt;sup id=&quot;fnref:9&quot;&gt;&lt;a href=&quot;#fn:9&quot; class=&quot;footnote&quot;&gt;9&lt;/a&gt;&lt;/sup&gt; in Kubernetes instead of horizontal scaling, as most of our workloads have a limit on parallelism (which is their partition count in Kafka topics)&lt;/li&gt;
  &lt;li&gt;Move from Go plugins for pipelines to plugins over RPC, like what HashiCorp does&lt;sup id=&quot;fnref:10&quot;&gt;&lt;a href=&quot;#fn:10&quot; class=&quot;footnote&quot;&gt;10&lt;/a&gt;&lt;/sup&gt;, to enable processing logic in non-Go languages.&lt;/li&gt;
  &lt;li&gt;Use either pod gossip or a service mesh with a control plane to set up quotas for shared infrastructure usage per pipeline. This is to protect upstream dependencies and the metastore from surges in event backlogs.&lt;/li&gt;
  &lt;li&gt;Improve availability guarantees for pipeline pods by occasionally redistributing/rescheduling pods across nodes in our Kubernetes cluster to prevent entire workloads being served out of a few large nodes.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;small class=&quot;credits&quot;&gt;Authored By Karan Kamath on behalf of the Coban team at Grab-
Zezhou Yu, Ryan Ooi, Hui Yang, Yuguang Xiao, Ling Zhang, Roy Kim, Matt Hino, Jump Char, Lincoln Lee, Jason Cusick, Shrinand Thakkar, Dean Barlan, Shivam Dixit, Shubham Badkur, Fahad Pervaiz, Andy Nguyen, Ravi Tandon, Ken Fishkin, and Jim Caputo.&lt;/small&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;footnotes&quot;&gt;Footnotes&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;Coban Sewu Waterfall Photo by Dwinanda Nurhanif Mujito on Unsplash&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Cover Photo by tian kuan on Unsplash&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;https://martinfowler.com/eaaDev/EventSourcing.html &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;https://medium.com/netflix-techblog/keystone-real-time-stream-processing-platform-a3ee651812a &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;https://martinfowler.com/bliki/CQRS.html &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot;&gt;
      &lt;p&gt;https://flink.apache.org &lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:5&quot;&gt;
      &lt;p&gt;https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/ &lt;a href=&quot;#fnref:5&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:6&quot;&gt;
      &lt;p&gt;https://github.com/kubernetes/autoscaler/tree/master/cluster-autoscaler &lt;a href=&quot;#fnref:6&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:7&quot;&gt;
      &lt;p&gt;https://aws.amazon.com/eks/sla/ &lt;a href=&quot;#fnref:7&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:8&quot;&gt;
      &lt;p&gt;https://aws.amazon.com/ec2/pricing/ &lt;a href=&quot;#fnref:8&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:9&quot;&gt;
      &lt;p&gt;https://github.com/kubernetes/autoscaler/tree/master/vertical-pod-autoscaler &lt;a href=&quot;#fnref:9&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:10&quot;&gt;
      &lt;p&gt;https://github.com/hashicorp/go-plugin &lt;a href=&quot;#fnref:10&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Mon, 06 Jan 2020 19:00:00 +0000</pubDate>
        <link>https://engineering.grab.com/plumbing-at-scale</link>
        <guid isPermaLink="true">https://engineering.grab.com/plumbing-at-scale</guid>
        
        <category>Event Sourcing</category>
        
        <category>Stream Processing</category>
        
        <category>Kubernetes</category>
        
        <category>Backend</category>
        
        <category>Platform</category>
        
        <category>Go</category>
        
        
        <category>Engineering</category>
        
      </item>
    
      <item>
        <title>Journey to a Faster Everyday Super App Where Every Millisecond Counts</title>
        <description>&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;At &lt;a href=&quot;https://www.grab.com&quot;&gt;Grab&lt;/a&gt;, we are moving faster than ever. In 2019 alone, we released dozens of new features in the Grab passenger app. With our goal to delight users in Southeast Asia with a powerful everyday super app, the app’s performance became one of the most critical components in delivering that experience to our users.&lt;/p&gt;

&lt;p&gt;This post narrates the journey of our performance improvement efforts on the Grab passenger app. It highlights how we were able to reduce the time spent starting the app by more than 60%, while preventing regressions introduced by new features. We use the &lt;a href=&quot;https://en.wikipedia.org/wiki/Percentile&quot;&gt;p95&lt;/a&gt; scale when referring to these improvements.&lt;/p&gt;

&lt;p&gt;Here’s a quick look at the improvements and timeline:&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;Improvements Timeline&quot; src=&quot;/img/journey-to-a-faster-everyday-super-app/image8.png&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&quot;improving-app-performance&quot;&gt;Improving App Performance&lt;/h2&gt;

&lt;p&gt;While app performance consists of different aspects - such as battery consumption rate, network performance, app responsiveness, etc. - the first thing users notice is the time it takes for an app to start. Apps that take too long to load frustrate users, leading to bad reviews and uninstalls.&lt;/p&gt;

&lt;p&gt;We focused our efforts on the app’s &lt;a href=&quot;https://developers.google.com/web/tools/lighthouse/audits/time-to-interactive&quot;&gt;time to interactive&lt;/a&gt;(TTI), which consists of two main operations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Starting the app&lt;/li&gt;
  &lt;li&gt;Displaying interactive &lt;em&gt;service tiles&lt;/em&gt; (these are the icons for the services offered on the app such as Transport, Food, Delivery, and so on)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are many other operations that occur in the background, which we won’t cover in this article.&lt;/p&gt;

&lt;p&gt;We prioritised on optimising the app’s ability to load the service tiles (highlighted in the image below) and render them as interactive upon startup (cold start). This allowed users to use the app as soon as they launch it.&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;Service Tiles&quot; src=&quot;/img/journey-to-a-faster-everyday-super-app/image1.png&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&quot;instrumentation-and-benchmarking&quot;&gt;Instrumentation and Benchmarking&lt;/h2&gt;

&lt;p&gt;Before we could start improving the app’s performance, we needed to know where we stood and set measurable goals.&lt;/p&gt;

&lt;p&gt;We couldn’t get a baseline from local performance testing as it did not simulate the real environment condition, where network variability and device performance are contributing factors. Thus, we needed to use real production data to get an accurate reflection of our current performance at a scale. In production, we measured the performance of &lt;em&gt;~8-9 millions users per day&lt;/em&gt; - a small subset of our overall active user base.&lt;/p&gt;

&lt;p&gt;As a start, we measured the different components contributing to TTI, such as binary loading, library initialisations, and tiles loading. For example, if we had to measure the time taken by function A, this is how it looked like in the code:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;functionA (){
// start the timer
....
....
...
//Stop the timer, calculate the time difference and send it as an analytic event
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With all the numbers from the contributing components, we took the sum to calculate the full TTI (as shown in the following image).&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;Full TTI&quot; src=&quot;/img/journey-to-a-faster-everyday-super-app/image9.png&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;

&lt;p&gt;When the numbers started rolling in from production, we needed specific measurements to interpret those numbers, so we started looking at TTI’s  50th, 90th, and 95th percentile. A 90th percentile (p90) of x seconds means that 90% of the users have an interactive screen in at most x seconds.&lt;/p&gt;

&lt;p&gt;We chose to only focus on p50 and p95 as these cover the majority of our users who deal with performance issues. Improving performance for &amp;lt;p50 (who already have high-end devices) would not bring too much of a value, and improving for &amp;gt;p95 would be very difficult as the app performance improvements will be limited by device performance.&lt;/p&gt;

&lt;p&gt;By the end of January, we got the p50, p90, and p95 numbers for the contributing components that summed up to TTI numbers for tiles, which allowed us to start identifying areas with potential improvements.&lt;/p&gt;

&lt;h2 id=&quot;caching-and-animation-removal&quot;&gt;Caching and Animation Removal&lt;/h2&gt;

&lt;p&gt;While reviewing the TTI numbers, we were drawn to contributors with high time consumption rates such as tile loading and app start animation. Other evident improvement we worked on was caching data between app launches instead of waiting for a network response for loading tiles at every single app launch.&lt;/p&gt;

&lt;h3 id=&quot;tile-caching&quot;&gt;Tile Caching&lt;/h3&gt;

&lt;p&gt;Based on the gathered data, the service tiles only change when a user travels between cities. This is because the available services vary in each city. Since users do not frequently change cities, the service tiles do not change very frequently either, and so caching the tiles made sense. However, we also needed to sync the fresh tiles, in case of any change. So, we updated the logic based on these findings. as illustrated in the following image:&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;Tile Caching Logic&quot; src=&quot;/img/journey-to-a-faster-everyday-super-app/image6.jpg&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Caching tiles brought us a huge improvement of &lt;em&gt;~3s&lt;/em&gt; on each platform.&lt;/p&gt;

&lt;h3 id=&quot;animation-removal&quot;&gt;Animation Removal&lt;/h3&gt;

&lt;p&gt;We came across a beautifully created animation at appstart that didn’t provide any additional value in terms of information or practicality.&lt;/p&gt;

&lt;p&gt;With detailed discussions and trade-offs with designers, we removed the animation and improved our TTI further by &lt;em&gt;1s&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In conclusion, with the caching and animation removal alone, we improved the TTI by &lt;em&gt;4s&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;welcome-static-linking-and-coroutines&quot;&gt;Welcome Static Linking and Coroutines&lt;/h2&gt;

&lt;p&gt;At this point, our users gained 4 seconds of their time back, but we didn’t want to stop with that number. So, we dug through the data to see what further enhancements we could do. When we could not find anything else that was similar to caching and animation removal, we shifted to architecture fundamentals.&lt;/p&gt;

&lt;p&gt;We knew that this was not an easy route to take and that it would come with a cost; if we decided to choose a component related to architecture fundamentals, all the other teams working on the Grab app would be impacted. We had to evaluate our options and make decisions with trade-offs for overall improvements. And this eventually led to static linking on iOS and &lt;a href=&quot;https://developer.android.com/kotlin/coroutines&quot;&gt;coroutines&lt;/a&gt; on Android.&lt;/p&gt;

&lt;h3 id=&quot;binaryloading&quot;&gt;Binary Loading&lt;/h3&gt;

&lt;p&gt;Binary loading is one of the first steps in both mobile platforms when an app is launched. It primarily contributes to pre-main and dex-loading, on iOS and Android respectively.&lt;/p&gt;

&lt;p&gt;The pre-main time on iOS was about 7.9s. It is known in the iOS development world that each framework (binary) can either be &lt;a href=&quot;https://www.runtastic.com/blog/en/frameworks-ios/&quot;&gt;dynamically or statically&lt;/a&gt; linked. While &lt;em&gt;static&lt;/em&gt; helps in a faster app start, it brings complexity in building frameworks that are elaborate or contain resources bundles.Building a lot of libraries statically also impact build times negatively.With proper evaluations, we decided to take the route to enable more static linking due to the trade-offs.&lt;/p&gt;

&lt;p&gt;Apple recommends&lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2016/406/?time%3D78&quot;&gt; a maximum of half a dozen dynamic frameworks&lt;/a&gt; for an optimal performance. Guess what? Our passenger app had 107 dynamically linked frameworks, a lot of them were internal.&lt;/p&gt;

&lt;p&gt;The task looked daunting at first, since it affected all parts of the app, but we were ready to tackle the challenge head on. Deciding to take this on was the easy part, the actual work entailed lots of tricky coordination and collaboration with multiple teams.&lt;/p&gt;

&lt;p&gt;We created an &lt;a href=&quot;https://en.wikipedia.org/wiki/Request_for_Comments&quot;&gt;RFC (Request For Comments)&lt;/a&gt; doc to propose the static linking of frameworks, wherever applicable, and co-ordinated with teams with the agreed timelines to execute this change.&lt;/p&gt;

&lt;p&gt;While collaborating with teams, we learned that we could remove 12 frameworks entirely that were no longer required. This exercise highlighted the importance of regular cleanup and deprecation in our codebase, and was added into our standard process.&lt;/p&gt;

&lt;p&gt;And so, we were left with 95 frameworks; 75 of which were statically linked successfully, resulting in our &lt;em&gt;p90&lt;/em&gt; pre-main dropping by &lt;em&gt;41%&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;As Grabbers, it’s in our DNA to push ourselves a little more. With the remaining 20 frameworks, our pre-main was still considerably high. Out of the 20 frameworks, 10 could not be statically linked without issues. As a workaround, we merged multiple dynamic frameworks into one. One of our outstanding engineers even created a plug-in for this, which is called the Cocoapod Merge. With this plug-in, we were able to merge 10 dynamically linked frameworks into 2. &lt;em&gt;We’ve made this plug-in open source: &lt;a href=&quot;https://github.com/grab/cocoapods-pod-merge&quot;&gt;https://github.com/grab/cocoapods-pod-merge&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;With all of the above steps, we were finally left with 12 dynamic frameworks - a huge &lt;em&gt;88%&lt;/em&gt; reduction.&lt;/p&gt;

&lt;p&gt;The following image illustrates the complex numbers mentioned above:&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;Static Linking&quot; src=&quot;/img/journey-to-a-faster-everyday-super-app/image5.jpg&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Using cocoapod merge further helped us with &lt;em&gt;~0.8s&lt;/em&gt; of improvement.&lt;/p&gt;

&lt;h3 id=&quot;coroutines&quot;&gt;Coroutines&lt;/h3&gt;

&lt;p&gt;While we were executing the static linking initiative on iOS, we also started refactoring the application initialisation for a modular and clean code on Android. This resulted in creating an &lt;em&gt;ApplicationInitialiser&lt;/em&gt; class, which handles the entire application initialisation process with maximum parallelism using coroutines.&lt;/p&gt;

&lt;p&gt;Now all the libraries are being initialised in parallel via coroutines and thus enabling better utilisations of computing resources and a faster TTI.&lt;/p&gt;

&lt;p&gt;This refactoring and background initialisation for libraries on Android helped in gaining &lt;em&gt;~0.4s&lt;/em&gt; of improvements.&lt;/p&gt;

&lt;h2 id=&quot;changing-the-basics---visualisation-setup&quot;&gt;Changing the Basics - Visualisation Setup&lt;/h2&gt;

&lt;p&gt;By the end of H1 2019, we observed a 50% improvement in TTI, and now it was time to set new goals for H2 2019. Until this point, we would query our database for all metric numbers, copy the numbers into a spreadsheet, and compare them against weeks and app versions.&lt;/p&gt;

&lt;p&gt;Despite the high loads of manual work and other challenges, this method still worked at the beginning due to the improvements we had to focus on.&lt;/p&gt;

&lt;p&gt;However, in H2 2019 it became apparent that we had to reassess our methodology of reading numbers. So, we started thinking about other ways to present and visualise these numbers better. With help from our Product Analyst, we took advantage of &lt;a href=&quot;https://www.metabase.com&quot;&gt;metabase’s&lt;/a&gt; advanced capabilities and presented our goals and metrics in a clear and easy to understand format.&lt;/p&gt;

&lt;p&gt;For example, here is a graph that shows the top contributing metrics for Android:&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;Android Metrics&quot; src=&quot;/img/journey-to-a-faster-everyday-super-app/image4.png&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Looking at it, we could clearly tell which metric needed to be prioritised for improvements.&lt;/p&gt;

&lt;p&gt;We did this not only for our metrics, but also for our main goals, which allowed us to easily see our progress and track our improvements on a daily basis.&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;Visualisation&quot; src=&quot;/img/journey-to-a-faster-everyday-super-app/image3.png&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;

&lt;p&gt;The color bars in the above image depicts the status of our numbers against our goals and also shows the actual numbers at p50, p90, and p95.&lt;/p&gt;

&lt;p&gt;As our tracking progressed, we started including more granular and precise measurements, to help guide the team and achieve more impactful improvements of around &lt;em&gt;~0.3-0.4s&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Fortunately, we were deprecating a third-party library for analytics and experimentation, which happened to be one of the highest contributing metrics for both platforms due to a high number of operations on the main thread. We started using our own in-house experimentation platform where we had better control over performance. We removed this third-party dependency, and it helped us with huge improvements of &lt;em&gt;~2.5s&lt;/em&gt; on Android and &lt;em&gt;~0.5-0.7s&lt;/em&gt; on iOS.&lt;/p&gt;

&lt;p&gt;You might be wondering as to why there is such a big difference on the iOS and Android improvement numbers for this dependency. This was due to the setting user attributes operations that ran only in the Android codebase, which was performed on the main thread and took a huge amount of time. These were the times that made us realise that we should focus more on the consistency for both platforms, as well as to identify the third-party library APIs that are used, and to assess whether they are absolutely necessary.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;*Tip*: So, it is time for you as well to eliminate such inconsistencies, if there are any.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Ok, there goes our third quarter with &lt;em&gt;~3s&lt;/em&gt; of improvement on Android and &lt;em&gt;~1.3s&lt;/em&gt; on iOS.&lt;/p&gt;

&lt;h2 id=&quot;performance-regression-detection&quot;&gt;Performance Regression Detection&lt;/h2&gt;

&lt;p&gt;Entering into Q4 brought us many challenges as we were running out of improvements to make. Even finding an improvement worth &lt;em&gt;~0.05s&lt;/em&gt; was really difficult! We were also strongly challenged by regressions (increase in TTI numbers) because of continuous feature releases and code additions to the app start process.&lt;/p&gt;

&lt;p&gt;So, maintaining the TTI numbers became our primary task for this period. We started looking into setting up processes to block regressions from being merged to the master, or at least get notified before they hit production.&lt;/p&gt;

&lt;p&gt;To begin with, we identified the main sources of regressions: static linking breakage on iOS and library initialisation in the app startup process on Android.&lt;/p&gt;

&lt;p&gt;We took the following measures to cover these cases:&lt;/p&gt;

&lt;h3 id=&quot;linters&quot;&gt;Linters&lt;/h3&gt;

&lt;p&gt;We built &lt;a href=&quot;https://en.wikipedia.org/wiki/Lint_(software)&quot;&gt;linters&lt;/a&gt; on the Continuous Integration (CI) pipeline to detect potential changes in &lt;em&gt;static linking&lt;/em&gt; on iOS and the &lt;em&gt;ApplicationInitialiser&lt;/em&gt; class on Android. The linters block the changelist and enforce a special review process for such changes.&lt;/p&gt;

&lt;h3 id=&quot;library-integration-process&quot;&gt;Library Integration Process&lt;/h3&gt;

&lt;p&gt;The team also focused on setting up a process for library integrations, where each library (internal or third party) will first be evaluated for performance impact before it is integrated into the codebase.&lt;/p&gt;

&lt;p&gt;While regression guarding was in process, we were simultaneously trying to bring in more improvements for TTI. We enabled the &lt;a href=&quot;https://llvm.org/docs/LinkTimeOptimization.html&quot;&gt;Link Time Optimisations&lt;/a&gt; (LTO) flag on iOS to improve the overall app performance. We also experimented on &lt;a href=&quot;https://medium.com/@michael.eisel/improving-app-performance-with-order-files-c7fff549907f&quot;&gt;order files&lt;/a&gt; on iOS and &lt;a href=&quot;https://github.com/Kotlin/anko&quot;&gt;anko layout&lt;/a&gt; on Android, but  were ruled out due to known issues.&lt;/p&gt;

&lt;p&gt;On Android, we hit the bottom hard as there were minimal improvements. Fortunately, it was a different story for iOS. We managed to get improvements worth &lt;em&gt;~0.6s&lt;/em&gt; by opting for lazy loading, optimising I/O operations, and deferring more operations to post app start (if applicable).&lt;/p&gt;

&lt;h2 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h2&gt;

&lt;p&gt;We will be looking at the different aspects of performance such as network, battery, and storage, while maintaining our current numbers for TTI.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Network performance - Track the turnaround time for network requests then move on to optimisations.&lt;/li&gt;
  &lt;li&gt;Battery performance - Focus on profiling the app for CPU and energy intensive operations, which drains the battery, and then move to optimisations.&lt;/li&gt;
  &lt;li&gt;Storage performance - Review our caching and storage mechanisms, and then look for ways to optimise them.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In addition to these, we are also focusing on bringing performance initiatives for all the teams at Grab. We believe that performance is a collaborative approach, and we would like to improve the app performance in all aspects.&lt;/p&gt;

&lt;p&gt;We defined different metrics to track performance e.g. Time to Interactive, Time to feedback (the time taken to get the feedback for a user action), UI smoothness indicators, storage, and network metrics.&lt;/p&gt;

&lt;p&gt;We are enabling all teams to benchmark their performance numbers based on defined metrics and move on to a path of improvement.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Overall, we improved by 60%, and this calls for a big celebration! &lt;em&gt;Woohoo!&lt;/em&gt; The bigger celebration came from knowing that we’ve improved our customers’ experience in using our app.&lt;/p&gt;

&lt;p&gt;This graph represents our performance improvement journey for the entire 2019, in terms of TTI.&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;Performance Graph&quot; src=&quot;/img/journey-to-a-faster-everyday-super-app/image2.png&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Based on the graph, looking at our p95 improvements and converting them to number of hours saved per day gives us &lt;em&gt;~21,388 hours on iOS and ~38,194 hours saved per day on Android&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Hey, did you know that it takes approximately &lt;em&gt;80-85&lt;/em&gt; hours to watch all the episodes of &lt;em&gt;Friends&lt;/em&gt;? Just saying. :)&lt;/p&gt;

&lt;p&gt;We will continue to serve our customers for a better and faster experience in the upcoming years.&lt;/p&gt;
</description>
        <pubDate>Thu, 26 Dec 2019 22:00:00 +0000</pubDate>
        <link>https://engineering.grab.com/journey-to-a-faster-everyday-super-app</link>
        <guid isPermaLink="true">https://engineering.grab.com/journey-to-a-faster-everyday-super-app</guid>
        
        <category>Superapp</category>
        
        <category>Mobile</category>
        
        <category>Performance</category>
        
        
        <category>Engineering</category>
        
      </item>
    
      <item>
        <title>Marionette - Enabling E2E user-scenario simulation</title>
        <description>&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;A plethora of interconnected microservices is what powers the Grab’s app. The microservices work behind the scenes to delight millions of our customers in Southeast Asia. It is a no-brainer that we emphasize on strong testing tools, so our app performs flawlessly to continuously meet our customers’ needs.&lt;/p&gt;

&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;p&gt;We have a microservices-based architecture, in which microservices are interconnected to numerous other microservices. Each passing day sees teams within Grab updating their microservices, which in turn enhances the overall app. If any of the microservices fail after changes are rolled out, it may lead to the whole app getting into an unstable state or worse. This is a major risk and that’s why we stress on conducting “end-to-end (E2E) testing” as an integral part of our software test life-cycle.&lt;/p&gt;

&lt;p&gt;E2E tests are done for all crucial workflows in the app, but not for every detail. For that we have conventional tests such as unit tests, component tests, functional tests, etc. Consider E2E testing as the final approval in the quality assurance of the app.&lt;/p&gt;

&lt;p&gt;Writing E2E tests in the microservices world is not a trivial task. We are not testing just a single monolithic application. To test a workflow on the app from a user’s perspective, we need to traverse multiple microservices, which communicate through different protocols such as HTTP/HTTPS and TCP. E2E testing gets even more challenging with the continuous addition of microservices. Over the years, we have grown tremendously with hundreds of microservices working in the background to power our app.&lt;/p&gt;

&lt;p&gt;Some major challenges in writing E2E tests for the microservices-based apps are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Availability&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;Getting all microservices together for E2E testing is tough. Each development team works independently and is responsible only for its microservices. Teams use different programming languages, data stores, etc for each microservice. It’s hard to construct all pieces in a common test environment as a complete app for E2E testing each time.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Data or resource set up&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;E2E testing requires comprehensive data set up. Otherwise, testing results are affected because of data constraints, and not due to any recent changes to underlying microservices. For example, we need to create real-life equivalent driver accounts, passenger accounts, etc and to have those, there are a few dependencies on other internal systems which manage user accounts. Further, data and booking generation should be robust enough to replicate real-world scenarios as far as possible.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Access and authentication&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;Usually, the test cases require sequential execution in E2E testing. In a microservices architecture, it is difficult to test a workflow which requires access and permissions to several resources or data that should remain available throughout the test execution.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Resource and time intensive&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;It is expensive and time consuming to run E2E tests; significant time is involved in deploying new changes, configuring all the necessary test data, etc.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Though there are several challenges, we had to find a way to overcome them and test workflows from the beginning to the end in our app.&lt;/p&gt;

&lt;h2 id=&quot;our-approach-to-overcome-challenges&quot;&gt;Our approach to overcome challenges&lt;/h2&gt;

&lt;p&gt;We knew what our challenges were and what we wanted to achieve from E2E testing, so we started thinking about how to develop a platform for E2E tests. To begin with, we determined that the scope of E2E testing that we’re going to primarily focus on is Grab’s transport domain — the microservices powering the driver and passenger apps.&lt;/p&gt;

&lt;p&gt;One approach is to &lt;em&gt;“simulate”&lt;/em&gt; user scenarios through a single platform before any new versions of these microservices are released. Ideally, the platform should also have the capabilities to set up the data required for these simulations. For example, ride booking requires data set up such as driver accounts, passenger accounts, location coordinates, geofencing, etc.&lt;/p&gt;

&lt;p&gt;We wanted to create a single platform that multiple teams could use to set up their test data and run E2E user-scenario simulations easily. We put ourselves to work on that idea, which resulted in the creation of an internal platform called “Marionette”. It simulates actions performed by Grab’s passenger and driver apps as they are expected to behave in the real world. The objective is to ensure that all standard user workflows are tested before deploying new app versions.&lt;/p&gt;

&lt;h2 id=&quot;introducing-marionette&quot;&gt;Introducing Marionette&lt;/h2&gt;

&lt;p&gt;Marionette enables Grabbers (developers and QAs) to run E2E user-scenario simulations without depending on the actual passenger and driver apps. Grabbers can set up data as well as configure data such as drivers, passengers, taxi types, etc to mimic the real-world behavior.&lt;/p&gt;

&lt;p&gt;Let’s look at the overall architecture to understand Marionette better:&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;Overall Architecture&quot; src=&quot;/img/marionette-enabling-e2e-user-scenario-simulation/architecture.png&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Grabbers can interact with Marionette through three channels: UI, SDK, and through RESTful API endpoints in their test scripts. All requests are routed through a load balancer to the Marionette platform. The Marionette platform in turn talks to the required microservices to create test data and to run the simulations.&lt;/p&gt;

&lt;h2 id=&quot;the-benefits&quot;&gt;The benefits&lt;/h2&gt;

&lt;p&gt;With Marionette, Grabbers now have the ability to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Simulate the whole booking flow including customer and driver behavior as well as transition through the booking life cycle including pick-up, drop-off, cancellation, etc. For example, developers can make passenger booking from the UI and configure pick-up points, drop-off points, taxi types, and other parameters easily. They can define passenger behaviour such as “make bookings after a specified time interval”, “cancel each booking”, etc. They can also set driver locations, define driver behaviour such as “always accept booking manually”, “decline received bookings”, etc.&lt;/li&gt;
  &lt;li&gt;Simulate bookings in all cities where Grab operates. Further, developers can run simulations for multiple Grab taxi types such as JustGrab, GrabShare, etc.&lt;/li&gt;
  &lt;li&gt;Visualize passengers, drivers, and ride transitions on the UI, which lets them easily test their workflows.&lt;/li&gt;
  &lt;li&gt;Save efforts and time spent on installing third-party android or iOS emulators, troubleshooting or debugging &lt;code class=&quot;highlighter-rouge&quot;&gt;.apk&lt;/code&gt; installation files, etc before testing workflows.&lt;/li&gt;
  &lt;li&gt;Conduct E2E testing without real mobile devices and installed apps.&lt;/li&gt;
  &lt;li&gt;Run automatic simulations, in which a particular set of scenarios are run continuously, thus helping developers with exploratory testing.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;how-we-isolated-simulations-among-users&quot;&gt;How we isolated simulations among users&lt;/h2&gt;

&lt;p&gt;It is important to have independent simulations for each user. Otherwise, simulations don’t yield correct results. This was one of the challenges we faced when we first started running simulations on Marionette.&lt;/p&gt;

&lt;p&gt;To resolve this issue, we came up with the idea of “cohorts”. A cohort is a logical group of passengers and drivers who are located in a particular city. Each simulation on Marionette is run using a “cohort” containing the number of drivers and passengers required for that simulation. When a passenger/driver needs to interact with other passengers/drivers (such as for ride bookings), Marionette ensures that the interaction is constrained to resources within the cohort. This ensures that drivers and passengers are not shared in different test cases/simulations, resulting in more consistent test runs.&lt;/p&gt;

&lt;h2 id=&quot;how-to-interact-with-marionette&quot;&gt;How to interact with Marionette&lt;/h2&gt;

&lt;p&gt;Let’s take a look at how to interact with Marionette starting with its user interface first.&lt;/p&gt;

&lt;h3 id=&quot;user-interface&quot;&gt;User Interface&lt;/h3&gt;

&lt;p&gt;The Marionette UI is designed to provide the same level of granularity as available on the real passenger and driver apps.&lt;/p&gt;

&lt;p&gt;Generally, the UI is used in the following scenarios:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;To test common user scenarios/workflows after deploying a change on staging.&lt;/li&gt;
  &lt;li&gt;To test the end-to-end booking flow right from the point where a passenger makes a booking till drop-off at the destination.&lt;/li&gt;
  &lt;li&gt;To simulate functionality of other teams within Grab - the passenger app developers can simulate the driver app for their testing and vice versa. Usually, teams work independently and the ability to simulate the dependent app for testing allows developers to work independently.&lt;/li&gt;
  &lt;li&gt;To perform E2E testing (such as by QA teams) without writing any test scripts.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Marionette UI also allows Grabbers to create and set up data. All that needs to be done is to specify the necessary resources such as number of drivers, number of passengers, city to run the simulation, etc. Running E2E simulations involves just the click of a button after data set up. Reports generated at the end of running simulations provide a graphical visualization of the results. Visual reports save developers’ time, which otherwise is spent on browsing through logs to ascertain errors.&lt;/p&gt;

&lt;h3 id=&quot;sdk&quot;&gt;SDK&lt;/h3&gt;

&lt;p&gt;Marionette also provides an SDK, written in the Go programming language.&lt;/p&gt;

&lt;p&gt;It lets developers:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create resources such as passengers, drivers, and cohorts for simulating booking flows.&lt;/li&gt;
  &lt;li&gt;Create booking simulations in both staging and production.&lt;/li&gt;
  &lt;li&gt;Set bookings to specific states as needed for simulation through customizable driver and passenger behaviour.&lt;/li&gt;
  &lt;li&gt;Make HTTP requests and receive responses that matter in tests.&lt;/li&gt;
  &lt;li&gt;Run load tests by scaling up booking requests to match the required workload (QPS).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s look at a high-level booking test case example to understand the simulation workflow.&lt;/p&gt;

&lt;p&gt;Assume we want to run an E2E booking test with this driver behavior type — “accepts passenger bookings and transits between booking states according to defined behavior parameters”. This is just one of the driver behavior types in Marionette; other behavior types are also supported. Similarly, passengers also have behaviour types.&lt;/p&gt;

&lt;p&gt;To write the E2E test for this example case, we first define the driver behavior in a function like this:&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;Overall Architecture&quot; src=&quot;/img/marionette-enabling-e2e-user-scenario-simulation/code1.png&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Then, we handle the booking request for the driver like this:&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;Overall Architecture&quot; src=&quot;/img/marionette-enabling-e2e-user-scenario-simulation/code2.png&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;

&lt;p&gt;The SDK client makes the handling of passengers, drivers, and bookings very easy as developers don’t need to worry about hitting multiple services and multiple APIs to set up their required driver and passenger actions. Instead, teams can focus on testing their use cases.&lt;/p&gt;

&lt;p&gt;To ensure that passengers and drivers are isolated in our test, we need to group them together in a cohort before running the E2E test.&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;Overall Architecture&quot; src=&quot;/img/marionette-enabling-e2e-user-scenario-simulation/code3.png&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;

&lt;p&gt;In summary, we have defined the driver’s behavior, created the booking request, created the SDK client and associated the driver and passenger to a cohort. Now, we just have to trigger the E2E test from our IDE. It’s just that simple and easy!&lt;/p&gt;

&lt;p&gt;Previously, developers had to write boilerplate code to make HTTP requests and parse returned HTTP responses. With the Marionette SDK in place, developers don’t have to write any boilerplate code saving significant time and effort in E2E testing.&lt;/p&gt;

&lt;h3 id=&quot;restful-apis-in-test-scripts&quot;&gt;RESTful APIs in test scripts&lt;/h3&gt;

&lt;p&gt;Marionette provides several RESTful API endpoints that cover different simulation areas such as resource or data creation APIs, driver APIs, passenger APIs, etc. APIs are particularly suitable for scripted testing. Developers can directly call these APIs in their test scripts to facilitate their own tests such as load tests, integration tests, E2E tests, etc.&lt;/p&gt;

&lt;p&gt;Developers use these APIs with their preferred programming languages to run simulations. They don’t need to worry about any underlying complexities when using the APIs. For example, developers in Grab have created custom libraries using Marionette APIs in Python, Java, and Bash to run simulations.&lt;/p&gt;

&lt;h2 id=&quot;whats-next&quot;&gt;What’s next&lt;/h2&gt;

&lt;p&gt;Currently, we cover E2E tests for our transport domain (microservices for the passenger and driver apps) through Marionette. The next phase is to expand into a full-fledged platform that can test microservices in other Grab domains such as Food, Payments, and so on. Going forward, we are also looking to further simplify the writing of E2E tests and running them as a part of the CD pipeline for seamless testing before deployment.&lt;/p&gt;

&lt;h2 id=&quot;in-conclusion&quot;&gt;In conclusion&lt;/h2&gt;

&lt;p&gt;We had an idea of creating a simulation platform that can run and facilitate E2E testing of microservices. With Marionette, we have achieved this objective. Marionette has helped us understand how end users use our apps, allowing us to make improvements to our services. Further, Marionette ensures there are no breaking changes and provides additional visibility into potential bugs that might be introduced as a result of any changes to microservices.&lt;/p&gt;

&lt;p&gt;If you have any comments or questions about Marionette, please leave a comment below.&lt;/p&gt;
</description>
        <pubDate>Mon, 23 Dec 2019 21:00:00 +0000</pubDate>
        <link>https://engineering.grab.com/marionette-enabling-e2e-user-scenario-simulation</link>
        <guid isPermaLink="true">https://engineering.grab.com/marionette-enabling-e2e-user-scenario-simulation</guid>
        
        <category>Backend</category>
        
        <category>Testing</category>
        
        <category>Microservice</category>
        
        
        <category>Engineering</category>
        
      </item>
    
      <item>
        <title>How We Implemented Domain-Driven Development in Golang</title>
        <description>&lt;p&gt;Partnerships have always been core to Grab’s super app strategy. We believe in collaborating with partners who are the best in what they do - combining their expertise with what we’re good at so that we can bring high-quality new services to our customers, at the same time create new opportunities for the merchant and driver-partners in our ecosystem.&lt;/p&gt;

&lt;p&gt;That’s why we launched GrabPlatform last year. To make it easier for partners to either integrate Grab into their services, or integrate their services into Grab.&lt;/p&gt;

&lt;p&gt;In view of that, part of the GrabPlatform’s team mission is to make it easy for partners to integrate with Grab services. These partners are external companies that would like to offer Grab’s services such as ride-booking through their own websites or applications. To do that, we decided to build a website that will serve as a one-stop-shop that would allow them to self-service these integrations.&lt;/p&gt;

&lt;h3 id=&quot;the-challenges-we-faced-with-the-conventional-approach&quot;&gt;The challenges we faced with the conventional approach&lt;/h3&gt;

&lt;p&gt;In the process of building this website, our team noticed that the majority of the functions and responsibilities were added to files without proper segregation. A single file would contain more than 500 lines of code. Each of these files were  imported from different collections of source codes, resulting in an unstructured codebase. Any changes to the existing functions risked breaking existing functionality; we realized then that we needed to proactively plan for the future. Hence, we decided to use the principles of &lt;a href=&quot;https://airbrake.io/blog/software-design/domain-driven-design&quot;&gt;Domain-Driven Design (DDD)&lt;/a&gt; and &lt;a href=&quot;https://golang.org/doc/effective_go.html&quot;&gt;idiomatic Go&lt;/a&gt;. This blog aims to demonstrate the process of how we leveraged those concepts to design a modern application.&lt;/p&gt;

&lt;h3 id=&quot;how-we-implemented-dddin-our-codebase&quot;&gt;How we implemented DDD in our codebase&lt;/h3&gt;

&lt;p&gt;Here’s how we went about solving our unstructured codebase using DDD principles.&lt;/p&gt;

&lt;h4 id=&quot;step-1-gather-domain-business-knowledge&quot;&gt;Step 1: Gather domain (business) knowledge&lt;/h4&gt;
&lt;p&gt;We collaborated closely with our domain experts (in our case, this was our product team) to identify functionality and flow. From them, we discovered the following key points:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;After creating a project, developers are added to the project.&lt;/li&gt;
  &lt;li&gt;The domain experts wanted an ability to add other products (e.g. Pricing service, ETA service, GrabPay service) to their projects.&lt;/li&gt;
  &lt;li&gt;They wanted the ability to create multiple authentication clients to access the above products.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;step-2-break-down-domain-knowledge-into-bounded-context&quot;&gt;Step 2: Break down domain knowledge into bounded context&lt;/h4&gt;
&lt;p&gt;Now that we had gathered the required domain knowledge (i.e. what our code needed to reflect to our partners), it was time to use the DDD strategic tool &lt;em&gt;Bounded Context&lt;/em&gt; to break down problems into subcontexts. Here is a graphical representation of how we converted the problem into smaller units.&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;Bounded Context&quot; src=&quot;/img/domain-driven-development-in-golang/image2.jpg&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;We identified several dependencies on each of the units involved in the project. Take some of these examples:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The project domain overlapped with the product and developer domains.&lt;/li&gt;
  &lt;li&gt;Our RideBooking project can only exist if it has some products like Ridebooking APIs and not the other way around.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What this means is a product can exist independent of the project, but a project will have no significance without any product. In the same way, a project is dependent on the developers, but developers can exist whether or not they belong to a project.&lt;/p&gt;

&lt;h4 id=&quot;step-3-identify-value-objects-or-entity-lowest-layer&quot;&gt;Step 3: Identify value objects or entity (lowest layer)&lt;/h4&gt;
&lt;p&gt;Looking at the above bounded contexts, we figured out the building blocks (i.e. value objects or entity) to break down the above functionality and flow.&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;// ProjectDAO ...&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProjectDAO&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int64&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UUID&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;          &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Status&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProjectStatus&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CreatedAt&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// DeveloperDAO ...&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DeveloperDAO&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int64&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UUID&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;          &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PhoneHash&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Status&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Status&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CreatedAt&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// ProductDAO ...&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProductDAO&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int64&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UUID&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;          &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;          &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Description&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Status&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProductStatus&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CreatedAt&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// DeveloperProjectDAO to map developer's to a project&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DeveloperProjectDAO&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int64&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DeveloperID&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int64&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProjectID&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int64&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Status&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DeveloperProjectStatus&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// ProductProjectDAO to map product's to a project&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProductProjectDAO&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int64&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProjectID&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int64&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProductID&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int64&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Status&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProjectProductStatus&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;All the objects shown above have &lt;code class=&quot;highlighter-rouge&quot;&gt;ID&lt;/code&gt; as a field and can be identifiable, hence they are identified as &lt;strong&gt;entities&lt;/strong&gt; and not as &lt;strong&gt;value objects&lt;/strong&gt;. But if we apply domain knowledge, &lt;code class=&quot;highlighter-rouge&quot;&gt;DeveloperProjectDAO&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ProductProjectDAO&lt;/code&gt; are actually not independent entities. Project object is the aggregate root since it must exist before the child fields, &lt;code class=&quot;highlighter-rouge&quot;&gt;DevProjectDAO&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ProdcutProjectDAO&lt;/code&gt;, can exist.&lt;/p&gt;

&lt;h4 id=&quot;step-4-create-the-repositories&quot;&gt;Step 4: Create the repositories&lt;/h4&gt;
&lt;p&gt;As stated above, we created an interface to abstract the working logic of a particular domain (i.e. Repository). Here is an example of how we designed the repositories:&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;// ProductRepositoryImpl responsible for product functionality&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProductRepositoryImpl&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;productDao&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IProductDao&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// private field&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProductRepository&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetProductsByIDs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ids&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IProduct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// DeveloperRepositoryImpl&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DeveloperRepositoryImpl&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;developerDAO&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IDeveloperDao&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// private field&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DeveloperRepository&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FindActiveAllowedByDeveloperIDs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;developerIDs&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Developer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetDeveloperDetailByProfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;developerProfile&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;appdto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DeveloperProfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IDeveloper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here is a look at how we designed our repository for aggregate root project:&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;// Unexported Struct&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;productProjectRepositoryImpl&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;productProjectDAO&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IProjectProductDao&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// private field&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProductProjectRepository&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetAllProjectProductByProjectID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;projectID&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProjectProduct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// Unexported Struct&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;developerProjectRepositoryImpl&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;developerProjectDAO&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IDeveloperProjectDao&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// private field&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DeveloperProjectRepository&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetDevelopersByProjectIDs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;projectIDs&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DeveloperProject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UpdateMappingWithRole&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;developer&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IDeveloper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IProject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DeveloperProject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// Unexported Struct&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;projectRepositoryImpl&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;projectDao&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IProjectDao&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// private field&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProjectRepository&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetProjectsByIDs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;projectIDs&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetActiveProjectByUUID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uuid&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IProject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetProjectByUUID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uuid&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProjectAggregatorImpl&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;projectRepositoryImpl&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;           &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// private field&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;developerProjectRepositoryImpl&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// private field&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;productProjectRepositoryImpl&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// private field&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProjectAggregator&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetProjects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AddDeveloper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;appdto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AddDeveloperRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;appdto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AddDeveloperResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetProjectWithProducts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uuid&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IProject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;step-5-identify-domain-events&quot;&gt;Step 5: Identify Domain Events&lt;/h4&gt;

&lt;p&gt;The functions described in &lt;em&gt;Step 4&lt;/em&gt; only returns the ID of the developer and product, which conveys no information to the users. In order to provide developer and product information, we use the domain-event technique to return the actual product and developer attributes.&lt;/p&gt;

&lt;p&gt;A domain event is something that happened in a bounded context that you want another context of a domain to be aware of. For example, if there are new updates to the developer domain, it’s important to convey these updates to the project domain. This propagation technique is termed as &lt;em&gt;domain event&lt;/em&gt;. Domain events enable independence between different classes.&lt;/p&gt;

&lt;p&gt;One way to implement it is seen here:&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;// file: project\_aggregator.go&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProjectAggregatorImpl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetProjects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;developers&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EventHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DomainEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FindDeveloperByDeveloperIDs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DeveloperIDs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// file: event\_type.go&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FindDeveloperByDeveloperIDs&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;developerID&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// file: event\_handler.go&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EventHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FindDeveloperByDeveloperIDs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;developers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;developerRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FindDeveloperByDeveloperIDs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;developerIDs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;developers&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;Domain Event&quot; src=&quot;/img/domain-driven-development-in-golang/image1.jpg&quot; style=&quot;width:50%&quot; /&gt;
&lt;/div&gt;

&lt;h3 id=&quot;some-common-mistakes-to-avoid-when-implementing-ddd-in-your-codebase&quot;&gt;Some common mistakes to avoid when implementing DDD in your codebase:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Not engaging with domain experts. Not interacting with domain experts is a common mistake when using DDD. Talking to domain experts to get an understanding of the problem domain from their perspective is at the core of DDD. Starting with schemas or data modelling instead of talking to domain experts may create code based on a relational model instead of it built around a domain model.&lt;/li&gt;
  &lt;li&gt;Ignoring the language of the domain experts. Creating a ubiquitous language shared with domain experts is also a core DDD practice. This common language must be used in all discussions as well as in the code, e.g. in class and method names.&lt;/li&gt;
  &lt;li&gt;Not identifying bounded contexts. A common approach to solving a complex problem is breaking it down into smaller parts. Creating &lt;a href=&quot;http://martinfowler.com/bliki/BoundedContext.html&quot;&gt;bounded contexts&lt;/a&gt; is breaking down a large domain into smaller ones, each handling one cohesive part of the domain.&lt;/li&gt;
  &lt;li&gt;Using an anaemic domain model. This is a common sign that a team is not doing DDD and often a symptom of a failure in the modelling process. At first, an &lt;a href=&quot;http://www.martinfowler.com/bliki/AnemicDomainModel.html&quot;&gt;anaemic domain model&lt;/a&gt; often looks like a real domain model with correct names, but the classes lack functionalities. They contain only the &lt;code class=&quot;highlighter-rouge&quot;&gt;Get&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Set&lt;/code&gt; methods.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;how-the-ddd-model-improved-our-software-development&quot;&gt;How the DDD model improved our software development&lt;/h2&gt;

&lt;p&gt;Thanks to this brand new clean up, we achieved the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Core functionalities are evenly distributed to the overall codebase and not limited to just a few files.&lt;/li&gt;
  &lt;li&gt;The developers are aware of what each folder is responsible for by simply looking at the file naming and folder structure.&lt;/li&gt;
  &lt;li&gt;The risk of breaking major functionalities by merely making small changes is greatly reduced. Changing a feature is now more efficient.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The team now finds the code well structured and we require less hand-holding for onboarders, thanks to the simplicity of the structure.&lt;/p&gt;

&lt;p&gt;Finally, the most important thing, we now have a system oriented towards our business necessities. Everyone ends up using the same language and terms. Developers communicate better with the business team. The work is more efficient when it comes to establishing solutions for the models that reflect how the business operates, instead of how the software operates.&lt;/p&gt;

&lt;h2 id=&quot;lessons-learnt&quot;&gt;Lessons Learnt&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Use DDD to collaborate among all project disciplines (product, business, partner, and so on) and clearly understand the business requirements.&lt;/li&gt;
  &lt;li&gt;Establish a ubiquitous language to discuss domain-related concepts.&lt;/li&gt;
  &lt;li&gt;Use bounded contexts to break down complex domains into manageable parts.&lt;/li&gt;
  &lt;li&gt;Implement a layered architecture (i.e. DDD building blocks) to focus on particular aspects of the application.&lt;/li&gt;
  &lt;li&gt;To simplify your dependency, use domain event to communicate with sub-bounded context.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 21 Nov 2019 11:00:00 +0000</pubDate>
        <link>https://engineering.grab.com/domain-driven-development-in-golang</link>
        <guid isPermaLink="true">https://engineering.grab.com/domain-driven-development-in-golang</guid>
        
        <category>Backend</category>
        
        <category>Go</category>
        
        
        <category>Engineering</category>
        
      </item>
    
      <item>
        <title>Driving Southeast Asia Forward Through People-Focused Design</title>
        <description>&lt;p&gt;Southeast Asia is home to around 650 million people from diverse and comparatively different economic, political and social backgrounds. Many people in the region today rely on super apps like Grab to earn a daily living or get from A to B more efficiently and safely. This means that decisions made have real impact on people’s lives – so how do you know when your decisions are right or wrong?&lt;/p&gt;

&lt;p&gt;In this post, I’ll share key customer insights that have guided my decisions and informed my design thinking over the last year whilst working as a product designer for Grab in Singapore. I’ve broken my learnings down into 3 transient areas for thinking about product development and how each one addressed our customers’ needs.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Relevance&lt;/strong&gt; – does the design solve the customer problem? For example, loss of connectivity which is common in Southeast Asia should not completely prevent a customer from accessing the content on our app.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Inclusivity&lt;/strong&gt; – does the design consider the full range of customer diversity? For example, a driver waiting in the hot sun for his passenger can still use the product. Inclusive design covers people with a range of perspectives, disabilities and environments.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Engagement&lt;/strong&gt; – does the design invoke a feeling of satisfaction? For example, building a compelling narrative around your product that solicits a higher engagement.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Under each of these areas, I’ll elaborate on how we’ve built empathy from customer insights and applied these to our design thinking.&lt;/p&gt;

&lt;p&gt;But before jumping in, think about the lens which frames any customer experience – the mobile device. In Southeast Asia, the commonly used devices are inexpensive low-end devices made by OPPO, Xiaomi, and Samsung. Knowing which devices customers use helps us understand potential performance constraints, different screen resolutions, and custom Android UIs.&lt;/p&gt;

&lt;h2 id=&quot;designing-for-relevance-&quot;&gt;Designing for relevance  &lt;/h2&gt;

&lt;div class=&quot;post-image-section&quot;&gt;&lt;figure&gt;
  &lt;img src=&quot;/img/driving-sea-forward-through-people-focused-design/image5.png&quot; alt=&quot;Shopping mall in Medan, Indonesia&quot; style=&quot;width:60%&quot; /&gt;
  &lt;figcaption align=&quot;middle&quot;&gt;&lt;i&gt;Shopping mall in Medan, Indonesia&lt;/i&gt;&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/div&gt;

&lt;h3 id=&quot;connectivity&quot;&gt;Connectivity&lt;/h3&gt;

&lt;p&gt;In Southeast Asia, it’s not too hard to find public WiFi. However, the main challenge is finding a reliable network. Take this shopping mall in Medan, Indonesia. The WiFi connectivity didn’t live up to the modern infrastructure of the building. The locals knew this and used mobile data over spotty and congested connectivity. Mobile data is the norm for most people and 4G reach is high, but the power of the connections is relatively low.&lt;/p&gt;

&lt;h4 id=&quot;building-empathy&quot;&gt;Building empathy&lt;/h4&gt;

&lt;p&gt;To genuinely design for customers’ needs, designers at Grab regularly get out the office to understand what people are doing in the real world. But how do we integrate empathy and compassion into the design process? Throughout this article, I’ll explain how the insights we gathered from around Southeast Asia can inform your decision making process.  &lt;/p&gt;

&lt;p&gt;For simulating a loss of connectivity, switch to airplane mode to observe current UI states and limitations. If you have the resources, create a 2G network to compare how bandwidth constraints page loading speeds. &lt;a href=&quot;https://nshipster.com/network-link-conditioner&quot;&gt;Network Link Conditioner&lt;/a&gt; for Mac and iOS or &lt;a href=&quot;https://developers.google.com/web/tools/lighthouse&quot;&gt;Lighthouse&lt;/a&gt; by Chrome DevTools can replicate a slower network.&lt;/p&gt;

&lt;h4 id=&quot;design-implications&quot;&gt;Design implications&lt;/h4&gt;

&lt;p&gt;This diagram is from Scott Hurff’s book, &lt;a href=&quot;https://smile.amazon.com/Designing-Products-People-Love-Successful/dp/1491923679/ref%3Dsmi_www_rco2_go_smi_g5171374337?_encoding%3DUTF8%26%252AVersion%252A%3D1%26%252Aentries%252A%3D0%26ie%3DUTF8&quot;&gt;Designing Products People Love&lt;/a&gt;. The book is amazing, but if you don’t have the time to read it, &lt;a href=&quot;http://scotthurff.com/posts/why-your-user-interface-is-awkward-youre-ignoring-the-ui-stack&quot;&gt;this article&lt;/a&gt; offers a quick overview.&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;&lt;figure&gt;
    &lt;img src=&quot;/img/driving-sea-forward-through-people-focused-design/image6.png&quot; alt=&quot;Scott Hurff’s UI Stack&quot; style=&quot;width:60%&quot; /&gt;
    &lt;figcaption align=&quot;middle&quot;&gt;&lt;i&gt;Scott Hurff’s UI Stack&lt;/i&gt;&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;An ideal state (the fully loaded experience) is primarily what a lot of designers think about when problem-solving. However, when connectivity is a common customer pain-point, designers at Grab have to design for the less desirable: Blank, Loading, Partial, and Error states in tandem with all the happy paths. Latency can make or break the user experience, so buffer wait times with visual progress to cushion each millisecond. Loading skeletons when you open Grab, act as momentary placeholders for content and reduce the perceived latency to load the full experience.&lt;/p&gt;

&lt;p&gt;A loss of connectivity shouldn’t mean the end of your product’s experience. Prepare connectivity issues by keeping screens alive through intuitive visual cues, messaging, and cached content.&lt;/p&gt;

&lt;h3 id=&quot;device-type-and-condition&quot;&gt;Device type and condition&lt;/h3&gt;

&lt;p&gt;In Southeast Asia, people tend to opt for low-end or hand-me-down devices that can sometimes have cracked screens or depleting batteries. These devices are usually in circulation much longer than in developed markets, and the device’s OS might not be the latest version because of the perceived effort or risk to update.  &lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;&lt;figure&gt;
    &lt;img src=&quot;/img/driving-sea-forward-through-people-focused-design/image1.png&quot; alt=&quot;A driver’s device taken during research in Indonesia&quot; style=&quot;width:50%&quot; /&gt;
    &lt;figcaption align=&quot;middle&quot;&gt;&lt;i&gt;A driver’s device taken during research in Indonesia&lt;/i&gt;&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/div&gt;

&lt;h4 id=&quot;building-empathy-1&quot;&gt;Building empathy&lt;/h4&gt;

&lt;p&gt;At Grab, we often use a range of popular, in-market devices to understand compatibility during the design process. Installing mainstream apps to a device with a small screen size, 512MB internal memory, low resolution and depleting battery life will provide insights into performance.  If these apps have lite versions or &lt;a href=&quot;https://developers.google.com/web/progressive-web-apps&quot;&gt;Progressive Web Apps (PWA)&lt;/a&gt;, try to understand the trade-offs in user experience compared to the parent app.&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;&lt;figure&gt;
    &lt;img src=&quot;/img/driving-sea-forward-through-people-focused-design/image4.png&quot; alt=&quot;Grab’s passenger app on the left versus the driver app&quot; style=&quot;width:100%&quot; /&gt;
    &lt;figcaption align=&quot;middle&quot;&gt;&lt;i&gt;Grab’s passenger app on the left versus the driver app&lt;/i&gt;&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/div&gt;

&lt;h4 id=&quot;design-implications-1&quot;&gt;Design implications&lt;/h4&gt;

&lt;p&gt;Design for small screens first to reduce the chances of design debt later in the development lifecycle. For interactive elements, it’s important to think about all types of customers that will use the product and in what circumstances. For Grab’s driver-partners who may have their devices mounted to the dashboard, tap targets need to be larger and more explicit.  &lt;/p&gt;

&lt;p&gt;Similarly, color contrast will vary depending on screen resolution and time of the day. Practical tests involve dimming the screen and standing near a window in bright sunshine (our HQ is in Singapore which helps!). To further improve accessibility, use a tool like Sketch’s &lt;a href=&quot;https://www.getstark.co&quot;&gt;Stark plugin&lt;/a&gt; to understand if contrast ratios are accessible to visually impaired customers. A general rule is to aim for higher contrast between essential UI components, text and interactive affordances.&lt;/p&gt;

&lt;p&gt;Fancy transitions can look great on high-end devices but can appear choppy or delayed on older and less performant phones. Aim for simple animations to offer a more seamless experience.&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;&lt;figure&gt;
    &lt;img src=&quot;/img/driving-sea-forward-through-people-focused-design/image3.gif&quot; alt=&quot;Passenger verification to improve safety&quot; style=&quot;width:60%&quot; /&gt;
    &lt;figcaption align=&quot;middle&quot;&gt;&lt;i&gt;Passenger verification to improve safety&lt;/i&gt;&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/div&gt;

&lt;h3 id=&quot;day-to-day-budgeting&quot;&gt;Day-to-day budgeting&lt;/h3&gt;

&lt;p&gt;Many people in Southeast Asia earn a daily income, so it’s no surprise that prepaid mobile is more common over a monthly contract. This mindset to ration on a day-to-day basis also extends itself to other essentials like washing powder and nappies. Data can be an expensive necessity, and customers are selective over the types of content that will consume a daily or weekly budget. Some customers might turn off data after getting a ride, and not turn it back on until another Grab service is required.&lt;/p&gt;

&lt;h4 id=&quot;building-empathy-2&quot;&gt;Building empathy&lt;/h4&gt;

&lt;p&gt;Rationing data consumption daily can be achieved through not connecting to WiFi, or a more granular way is to turn off WiFi and use an app like Google’s Datally on Android to cap data usage. Starting low, around 50MB per day will increase your understanding around the data trade-offs you make and highlight the apps that require more data to perform certain actions.&lt;/p&gt;

&lt;h4 id=&quot;design-implications-2&quot;&gt;Design implications&lt;/h4&gt;

&lt;p&gt;Where possible, avoid using video when SVG animations can be just as effective, scalable and lightweight. For Grab’s passenger verification flow, we decided to move away from a video tutorial and keep data consumption to a minimum through utilising SVG animations. When a video experience is required, like Grab’s feed on the home screen, disabling autoplay and clearly distinguishing the media as video allowed customers to decide on committing data.&lt;/p&gt;

&lt;h2 id=&quot;design-for-inclusivity-&quot;&gt;Design for inclusivity  &lt;/h2&gt;
&lt;h3 id=&quot;mobile-only&quot;&gt;Mobile-only&lt;/h3&gt;

&lt;p&gt;The expression “mobile-first” has been bounced around for the last decade, but in Southeast Asia, “mobile-only” is probably more accurate. Most customers have never owned a tablet or laptop, and mobile numbers are more synonymous with a method of registration over an email address. In the region, people rely more on social media and chat apps to understand broadcast or published news reports, events and recommendations. Customers who sign up for a new Grab account, prefer phone numbers and OTP (one-time-password) registration over providing an email address and password. And anecdotally from interviews conducted at Grab, customers didn’t feel the need for email when communication can take place via SMS, WhatsApp, or other messaging apps.&lt;/p&gt;

&lt;h4 id=&quot;building-empathy-3&quot;&gt;Building empathy&lt;/h4&gt;

&lt;p&gt;At Grab, we apply design thinking from a mobile-only perspective for our passenger, merchant,  and driver-partner experiences by understanding our customers’ journeys online and off.  These journeys are synthesized back in the office and sometimes recreated with video and physical artifacts to simulate the customer experience. It’s always helpful to remove smartwatches, put away laptops and use an in-market device that offers a similar experience to your customers.&lt;/p&gt;

&lt;h4 id=&quot;design-implications-3&quot;&gt;Design implications&lt;/h4&gt;

&lt;p&gt;When onboarding new customers, offer a relevant sign-in method for a mobile-only customer, like phone number and social account registration. Grab’s passenger sign-up experience addresses these priorities with phone number first, social accounts second.  &lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;&lt;figure&gt;
    &lt;img src=&quot;/img/driving-sea-forward-through-people-focused-design/image7.png&quot; alt=&quot;Grab’s sign-in screen&quot; style=&quot;width:60%&quot; /&gt;
    &lt;figcaption align=&quot;middle&quot;&gt;&lt;i&gt;Grab’s sign-in screen&lt;/i&gt;&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;PC-era icons are also widely misunderstood by mobile-only customers, so avoid floppy disks to imply Save, or a folder to Change Directory as these offer little symbolic meaning. When icons are paired with text, this can often reinforce meaning and quicken recognition.  For example, a pencil icon alone can be confusing, so adding the word “Edit” will provide more clarity.  &lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;&lt;figure&gt;
    &lt;img src=&quot;/img/driving-sea-forward-through-people-focused-design/image9.jpg&quot; alt=&quot;Nightfall in Yogyakarta, Indonesia&quot; style=&quot;width:60%&quot; /&gt;
    &lt;figcaption align=&quot;middle&quot;&gt;&lt;i&gt;Nightfall in Yogyakarta, Indonesia&lt;/i&gt;&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/div&gt;

&lt;h3 id=&quot;diversity-and-safety&quot;&gt;Diversity and safety&lt;/h3&gt;

&lt;p&gt;This photo was taken in Yogyakarta, Indonesia. In the evening, women often formed groups to improve personal safety. In an online environment, women often face discrimination, harassment, blackmail, cyberstalking, and more.  Minorities in emerging markets are further marginalised due to employment, literacy, and financial issues.  &lt;/p&gt;

&lt;h4 id=&quot;building-empathy-4&quot;&gt;Building empathy&lt;/h4&gt;

&lt;p&gt;Southeast Asia has a very diverse population, and it’s important to understand gender, ethnic,  and class demographics before you plan any research. Research recruitment at Grab involves working with local vendors to recruit diverse groups of customers for interviews and focus groups. When spending time with customers, we try to understand how diversity and safety factors contribute to the experience of the product.&lt;/p&gt;

&lt;p&gt;If you don’t have the time and resources to arrange face-to-face interviews, I’d recommend this article for creating a survey: &lt;a href=&quot;https://medium.com/@anna.sarai.rosenberg/respectful-collection-of-demographic-data-56de9fcb80e2&quot;&gt;Respectful Collection of Demographic Data&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;design-for-inclusivity&quot;&gt;Design for inclusivity&lt;/h4&gt;

&lt;p&gt;Allow people to control how they represent their identities through pseudonym names and avatars. But does this undermine trust on the platform? No, not really. Credit card registration or more recently, Grab’s passenger and driver selfie verification feature has closed the loop on suspect accounts whilst maintaining everyone’s privacy and safety.  &lt;/p&gt;

&lt;p&gt;On the visual design side, our illustration and content guide incorporates diverse representations of ethnic backgrounds, clothing, physical ability, and social class. You can see examples in the app or through our &lt;a href=&quot;https://dribbble.com/grab&quot;&gt;Dribbble page&lt;/a&gt;. For user-generated content, allow people to report and flag abusive material. While data and algorithms can do so much, facts and ethics cannot be policed by machine learning.&lt;/p&gt;

&lt;h3 id=&quot;language&quot;&gt;Language&lt;/h3&gt;

&lt;p&gt;In Southeast Asia and other emerging markets, customers may set their phone to a language which they aspire to learn but may not fully comprehend. Swipe, tap, drag, pinch, and other specific terms relating to interactions might not easily translate into the local language, and English might be the preferred language regardless of comprehension. It’s surprisingly common to attend an interview with a translator but the device’s UI is set to English.  &lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;&lt;figure&gt;
    &lt;img src=&quot;/img/driving-sea-forward-through-people-focused-design/image2.jpg&quot; alt=&quot;A Grab pick-up point taken in Medan, Indonesia&quot; style=&quot;width:60%&quot; /&gt;
    &lt;figcaption align=&quot;middle&quot;&gt;&lt;i&gt;A Grab pick-up point taken in Medan, Indonesia&lt;/i&gt;&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/div&gt;

&lt;h4 id=&quot;building-empathy-5&quot;&gt;Building empathy&lt;/h4&gt;

&lt;p&gt;If your app supports multiple languages, try setting your phone to a different language but know how to change it back again!  At Grab, we test design robustness by incorporating translated text strings into our mocks. Look for visual cues to infer meaning since some customers might be illiterate or not fully comprehend English.&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;&lt;figure&gt;
    &lt;img src=&quot;/img/driving-sea-forward-through-people-focused-design/image8.png&quot; alt=&quot;Grab’s Safety Centre in different languages&quot; style=&quot;width:100%&quot; /&gt;
    &lt;figcaption align=&quot;middle&quot;&gt;&lt;i&gt;Grab’s Safety Centre in different languages&lt;/i&gt;&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/div&gt;

&lt;h4 id=&quot;design-for-different-languages-formats-and-visual-cues&quot;&gt;Design for different languages, formats and visual cues&lt;/h4&gt;

&lt;p&gt;To reduce design debt later on, it’s a good idea to start with the smallest screen size and test the most vulnerable parts of the UI with translated text strings. Keep in mind, dates, times, addresses, and phone numbers may have different formats and require special attention. You can apply multiple visual cues to represent important UI states, such as a change in colour, shape and imagery.&lt;/p&gt;

&lt;h2 id=&quot;design-for-engagement&quot;&gt;Design for engagement&lt;/h2&gt;
&lt;h3 id=&quot;sharing&quot;&gt;Sharing&lt;/h3&gt;

&lt;p&gt;From our research studies, word-of-mouth communication and consuming viral content via Instagram or Facebook was more popular than trawling through search page results. The social aspect is extended to the physical environment where devices can sometimes be shared with more than one person, or in some cases, one mobile is used concurrently with more than one user at a time. In numerous interviews, customers talk about not using biometric authentication so that family members can access their devices.&lt;/p&gt;

&lt;h4 id=&quot;building-empathy-6&quot;&gt;Building empathy&lt;/h4&gt;

&lt;p&gt;To understand the layers of personalisation, privacy and security on a device, it’s worth loaning a device from your research team or just borrow a friend’s phone (if they let you!).  How far do you get before you require biometric authentication or a PIN to proceed further? If you decide to wipe a personal device, what steps can you miss out from the setup, and how does that affect your experience post setup?&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;&lt;figure&gt;
    &lt;img src=&quot;/img/driving-sea-forward-through-people-focused-design/image11.png&quot; alt=&quot;Offline to Online: GrabNow connecting with driver&quot; style=&quot;width:60%&quot; /&gt;
    &lt;figcaption align=&quot;middle&quot;&gt;&lt;i&gt;Offline to Online: GrabNow connecting with driver&lt;/i&gt;&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/div&gt;

&lt;h4 id=&quot;design-for-sharing&quot;&gt;Design for sharing&lt;/h4&gt;

&lt;p&gt;If necessary, facilitate device sharing through easy switching of accounts, and enable people to remove or hide private content after use. Allow content to be easily shared for both online and offline in-person situations. Using this approach, &lt;a href=&quot;https://www.grab.com/id/en/press/tech-product/grab-resmi-luncurkan-grabnow-jalan-pintas-berkendara-dengan-grabbike&quot;&gt;GrabNow&lt;/a&gt; allows passengers to find and connect with a nearby driver without having to pre-book and wait for a driver to arrive. This offline to online interaction also saves data and battery for the customer.&lt;/p&gt;

&lt;h3 id=&quot;support-and-tutoring&quot;&gt;Support and tutoring&lt;/h3&gt;

&lt;p&gt;In Southeast Asia, people find troubleshooting issues from inside a help page troublesome and generally prefer human assistance, like speaking to someone through a call centre. The opportunity for face-to-face tutoring on how something works is often highly desired and is much more effective than standard onboarding flows that many apps use. From the many physical phone stores, it’s not uncommon for people to go and ask for help or get apps manually installed onto their device.&lt;/p&gt;

&lt;h4 id=&quot;building-empathy-7&quot;&gt;Building empathy&lt;/h4&gt;

&lt;p&gt;Apart from speaking with your customers regularly, always look through the Play and App Store reviews for common issues. Understand your customers’ problems and the jargon they use to describe what happened. If you have a customer support team, the tickets created will be a key indicator of where your customers need the most support.&lt;/p&gt;

&lt;h4 id=&quot;help-and-feedback-design-implications&quot;&gt;Help and Feedback Design implications&lt;/h4&gt;

&lt;p&gt;Make support accessible through a variety of methods: online forms, email, and if possible, allow customers to call in. With in-app or online forms, try to use drop-downs or pre-populated quick responses to reduce typing, triage the type of support, and decrease misunderstanding when a request comes in.  When a customer makes a Grab transport booking for the first time, we assist the customer through step-by-step contextual call-outs.&lt;/p&gt;

&lt;h3 id=&quot;local-aesthetics&quot;&gt;Local aesthetics&lt;/h3&gt;

&lt;p&gt;This photo was taken in Medan, Indonesia, on the day of an important wedding. It was impressive to see hundreds of handcrafted, colourful placards lining the streets for miles, but maybe more admirable that such an occasion was shared with the community and passers-by, and not only for the wedding guests.  &lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;&lt;figure&gt;
    &lt;img src=&quot;/img/driving-sea-forward-through-people-focused-design/image10.jpg&quot; alt=&quot;A wedding celebration flower board in Medan, Indonesia&quot; style=&quot;width:70%&quot; /&gt;
    &lt;figcaption align=&quot;middle&quot;&gt;&lt;i&gt;A wedding celebration flower board in Medan, Indonesia&lt;/i&gt;&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;These types of public displays are not exclusive to weddings in Southeast Asia, vibrant colours and decorative patterns are woven into the fabric of everyday life, indicative of a jovial spirit that many people in the region possess.&lt;/p&gt;

&lt;h4 id=&quot;building-empathy-8&quot;&gt;Building empathy&lt;/h4&gt;

&lt;p&gt;What are some of the immediate patterns and surfaces that exist in your workspace? Looking around your immediate environment can provide an immediate assessment of visual stimuli that can influence your decisions on a day-to-day basis.&lt;/p&gt;

&lt;p&gt;Wall space can be incredibly valuable when you can display photos from your research trip, or find online inspiration to recreate some of the visual imagery from your target markets.  When speaking with your customers, ask to see mobile wallpapers, and think about how fashion could also play a role in determining an aesthetic choice. Lastly, take time out when on a research trip to explore the streets, museums, and absorb some of the local cultures.&lt;/p&gt;

&lt;h4 id=&quot;design-to-delight-and-surprise-customers&quot;&gt;Design to delight and surprise customers&lt;/h4&gt;

&lt;p&gt;Capture local inspiration on research trips to incorporate into visual collections that can be a source of inspiration for colour, imagery, and textures. Find opportunities in your product to delight and engage customers through appropriate images and visuals. Grab’s marketing consent experience leverages illustrative visuals to help customers understand the different categories that require their consent.&lt;/p&gt;

&lt;p&gt;For all our markets, we work with local teams around culturally sensitive visuals and imagery to ensure our content is not offensive or portrays the wrong connotations.&lt;/p&gt;

&lt;h2 id=&quot;my-top-5-for-guerrilla-field-research&quot;&gt;My top 5 for guerrilla field research&lt;/h2&gt;

&lt;p&gt;If you don’t have enough time, stakeholder buy-in or budget to do research, getting out of the office to do your own is sometimes the only answer. Here are my top 5 things to keep in mind.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Don’t jump in. Always start with observation to capture customers’ natural behaviour.&lt;/li&gt;
  &lt;li&gt;Sanity check scripts. Your time and customers’ time is valuable; streamline your script and prepare for u-turns and potential Facebook and Instagram friend requests at the end!  &lt;/li&gt;
  &lt;li&gt;Ask the right people. It’s difficult to know who wants to or has time for your 10-minute intercept. Look for individuals sitting around and not groups if possible (group feedback can be influenced by the most vocal person).&lt;/li&gt;
  &lt;li&gt;Focus on the user. Never multitask when speaking to the user. Jotting notes on an answer sheet is less distracting than using your mobile or laptop (and less dangerous in some places!). Ask permission to record audio if you want to avoid notetaking all together but this does create more work later on.&lt;/li&gt;
  &lt;li&gt;Use insights to enrich understanding. Insights are not trends and should be used in conjunction with quantitative data to validate decision making.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Feel inspired by this article and want to learn more? &lt;a href=&quot;https://grab.careers&quot;&gt;Grab&lt;/a&gt; is hiring across Southeast Asia and Seattle. Connect with me on &lt;a href=&quot;https://www.linkedin.com/in/pjmadeley&quot;&gt;LinkedIn&lt;/a&gt; or Twitter &lt;a href=&quot;https://twitter.com/PhilipMadeley&quot;&gt;@PhilipMadeley&lt;/a&gt; to learn more about design at Grab.&lt;/p&gt;
</description>
        <pubDate>Tue, 05 Nov 2019 10:00:00 +0000</pubDate>
        <link>https://engineering.grab.com/driving-sea-forward-through-people-focused-design</link>
        <guid isPermaLink="true">https://engineering.grab.com/driving-sea-forward-through-people-focused-design</guid>
        
        <category>Design</category>
        
        <category>User Research</category>
        
        
        <category>Design</category>
        
      </item>
    
      <item>
        <title>Griffin, an Anti-fraud Risk Rule Engine Making Billions of Predictions Daily</title>
        <description>&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;At Grab, the scale and fast-moving nature of our business means we need to be vigilant about potential risks to our customers and to our business. Some of the things we watch for include promotion abuse, or passenger safety on late-night ride allocations. To overcome these issues, the TIS (Trust/Identity/Safety) taskforce was formed with a group of AI developers dedicated to fraud detection and prevention.&lt;/p&gt;

&lt;p&gt;The team’s mission is:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;to keep fraudulent users away from our app or services&lt;/li&gt;
  &lt;li&gt;ensure our customers’ safety, and&lt;/li&gt;
  &lt;li&gt;Manage user identities to securely login to the Grab app.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The TIS team’s scope covers not just transport, but also our food, deliver and other Grab verticals.&lt;/p&gt;

&lt;h2 id=&quot;how-we-prevented-fraudulent-transactions-in-the-earlier-days&quot;&gt;How we prevented fraudulent transactions in the earlier days&lt;/h2&gt;

&lt;p&gt;In our early days when Grab was smaller, we used a rules-based approach to block potentially fraudulent transactions. Rules are like boolean conditions that determines if the result will be true or false. These rules were very effective in mitigating fraud risk, and we used to create them manually in the code.&lt;/p&gt;

&lt;p&gt;We started with very simple rules. For example:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rule 1:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; IF a credit card has been declined today

 THEN this card cannot be used for booking
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To quickly incorporate rules in our app or service, we integrated them in our backend service code and deployed our service frequently to use the latest rules.&lt;/p&gt;

&lt;p&gt;It worked really well in the beginning. Our logic was relatively simple, and only one developer managed the changes regularly. It was very lightweight to trigger the rule deployment and enforce the rules.&lt;/p&gt;

&lt;p&gt;However, as the business rapidly expanded, we had to exponentially increase the rule complexity. For example, consider these two new rules:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rule 2:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;IF a credit card has been declined today but this passenger has good booking history

THEN we would still allow this booking to go through, but precharge X amount
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Rule 3:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;IF a credit card has been declined(but paid off) more than twice in the last 3-months

THEN we would still not allow this booking
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The system scans through the rules, one by one, and if it determines that any rule is tripped it will check the other rules. In the example above, if a credit card has been declined more than twice in the last 3-months, the passenger will not be allowed to book even though he has a good booking history.&lt;/p&gt;

&lt;p&gt;Though all rules follow a similar pattern, there are subtle differences in the logic and they enable different decisions. Maintaining these complex rules was getting harder and harder.&lt;/p&gt;

&lt;p&gt;Now imagine we added more rules as shown in the example below. We first check if the device used by the passenger is a high-risk one. e.g using an emulator for booking. If not, we then check the payment method to evaluate the risk (e.g. any declined booking from the credit card), and then make a decision on whether this booking should be precharged or not. If passenger is using a low-risk  device but is in some risky location where we traditionally see a lot of fraud bookings, we would then run some further checks about the passenger booking history to decide if a pre-charge is also needed.&lt;/p&gt;

&lt;p&gt;Now consider that instead of a single passenger, we have thousands of passengers. Each of these passengers can have a large number of rules for review. While not impossible to do, it can be difficult and time-consuming, and it gets exponentially more difficult the more rules you have to take into consideration. Time has to be spent carefully curating these rules.&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;Rules flow&quot; src=&quot;/img/griffin/image3.png&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;The more rules you add to increase accuracy, the more difficult it becomes to take them all into consideration.&lt;/p&gt;

&lt;p&gt;Our rules were getting 10X more complicated than the example shown above. Consequently, developers had to spend long hours understanding the logic of our rules, and also be very careful to avoid any interference with new rules.&lt;/p&gt;

&lt;p&gt;In the beginning, we implemented rules through a three-step process:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Data Scientists and Analysts dived deep into our transaction data, and discovered patterns.&lt;/li&gt;
  &lt;li&gt;They abstracted these patterns and wrote rules in English (e.g. promotion based booking should be limited to 5 bookings and total finished bookings should be greater than 6, otherwise unallocate current ride)&lt;/li&gt;
  &lt;li&gt;Developers implemented these rules and deployed the changes to production&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Sometimes, the use of English between steps 2 and 3 caused inaccurate rule implementation (e.g. for “&lt;em&gt;X should be limited to 5&lt;/em&gt;”, should the implementation be &lt;code class=&quot;highlighter-rouge&quot;&gt;X &amp;lt; 5 or  X &amp;lt;= 5&lt;/code&gt;?)&lt;/p&gt;

&lt;p&gt;Once a new rule is deployed, we monitored the performance of the rule. For example,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How often does the rule fire (after minutes, hours, or daily)?&lt;/li&gt;
  &lt;li&gt;Is it over-firing?&lt;/li&gt;
  &lt;li&gt;Does it conflict with other rules?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Based on implementation, each rule had dependency with other rules. For example, if Rule 1 is fired, we should not continue with Rule 2 and Rule 3.&lt;/p&gt;

&lt;p&gt;As a result, we couldn’t  keep each rule evaluation independent.  We had no way to observe the performance of a rule with other rules interfering. Consider an example where we change Rule 1:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;From&lt;/em&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;IF a credit card has been declined today&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;To&lt;/em&gt;   &lt;code class=&quot;highlighter-rouge&quot;&gt;IF a credit card has been declined this week&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;As Rules 2 and 3 depend on Rule 1, their trigger-rate would drop significantly. It means we would have unstable performance metrics for Rule 2 and Rule 3 even though the logic of Rule 2 and Rule 3 does not change. It is very hard for a rule owner to monitor the performance of Rules 2 and Rule 3.&lt;/p&gt;

&lt;p&gt;When it comes to the of A/B testing of a new rule, Data Scientists need to put a lot of effort into cleaning up noise from other rules, but most of the time, it is mission-impossible.&lt;/p&gt;

&lt;p&gt;After several misfiring events (wrong implementation of rules) and ever longer rule development time (weekly), we realized “&lt;em&gt;No one can handle this manually&lt;/em&gt;.“&lt;/p&gt;

&lt;h2 id=&quot;birth-of-griffin-rule-engine&quot;&gt;Birth of Griffin Rule Engine&lt;/h2&gt;

&lt;p&gt;We decided to take a step back, sit down and closely review our daily patterns. We realized that our daily patterns fall into two categories:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Fetching new data:  e.g. “&lt;em&gt;what is the credit card risk score&lt;/em&gt;”, or “&lt;em&gt;how many food bookings has this user ordered in last 7 days&lt;/em&gt;”, and transform this data for easier consumption.&lt;/li&gt;
  &lt;li&gt;Updating/creating rules: e.g. &lt;em&gt;if a credit card risk score is high, decline a booking&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These two categories are essentially divided into two independent components:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Data orchestration - collecting/transforming the data from different data sources.&lt;/li&gt;
  &lt;li&gt;Rule-based prediction&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Based on these findings, we got started with our Data Orchestrator (open sourced at &lt;a href=&quot;https://github.com/grab/symphony&quot;&gt;https://github.com/grab/symphony&lt;/a&gt;) and Griffin projects.&lt;/p&gt;

&lt;p&gt;The intent of Griffin is to provide data scientists and analysts with a way to add new rules to monitor, prevent, and detect fraud across Grab.&lt;/p&gt;

&lt;p&gt;Griffin allows technical novices to apply their fraud expertise to add very complex rules that can automate the review of rules without manual intervention.&lt;/p&gt;

&lt;p&gt;Griffin  now predicts billions of events every day with 100K+ Queries per second(QPS) at peak time (on only 6 regular &lt;a href=&quot;https://aws.amazon.com/ec2/&quot;&gt;EC2s&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Data scientists and analysts can self-service rule changes on the web portal directly, deploy rules with just a few clicks, experiment and monitor performance in real time.&lt;/p&gt;

&lt;h3 id=&quot;why-we-came-up-with-griffin-instead-of-using-third-party-tools-in-the-market&quot;&gt;Why we came up with Griffin instead of using third-party tools in the market&lt;/h3&gt;

&lt;p&gt;Before we decided to create our in-built tool, we did some research for common &lt;a href=&quot;https://en.wikipedia.org/wiki/Business_rules_engine&quot;&gt;business rule engines&lt;/a&gt; available in the market such as &lt;a href=&quot;https://en.wikipedia.org/wiki/Drools&quot;&gt;Drools&lt;/a&gt; and checked if we should use them. In that process, we found:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Drools has its own Java-based &lt;a href=&quot;https://en.wikipedia.org/wiki/Domain-specific_language&quot;&gt;DSL&lt;/a&gt; with a non-trivial learning curve (whereas our major users are from Python background).&lt;/li&gt;
  &lt;li&gt;Limited [expressive power](https://en.wikipedia.org/wiki/Expressive_power_(computer_science),&lt;/li&gt;
  &lt;li&gt;Limited support for some common math functions (e.g. factorial/ Greatest Common Divisor).&lt;/li&gt;
  &lt;li&gt;Our nature of business needed dynamic dataset for predictions (for example, a rule may need only passenger booking history on Day 1, but it may use passenger booking history, passenger credit balance, and passenger favorite places on Day 2). On the other hand, Drools usually works well with a static list of dataset instead of dynamic dataset.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Given the above constraints, we decided to build our own rule engine which can better fit our needs.&lt;/p&gt;

&lt;h2 id=&quot;griffin-architecture&quot;&gt;Griffin Architecture&lt;/h2&gt;

&lt;p&gt;The diagram depicts the high-level flow of making a prediction through Griffin.&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;High-level flow of making a prediction through Griffin&quot; src=&quot;/img/griffin/image10.png&quot; /&gt;
&lt;/div&gt;

&lt;h3 id=&quot;components&quot;&gt;Components&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Data Orchestration: a service that collects all data needed for predictions&lt;/li&gt;
  &lt;li&gt;Rule Engine: a service that makes prediction based on rules&lt;/li&gt;
  &lt;li&gt;Rule Editor: the portal through which users can create/update rules&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;workflow&quot;&gt;Workflow&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Users create/update rules in the Rule Editor web portal, and save the rules in the database.&lt;/li&gt;
  &lt;li&gt;Griffin Rule Engine reloads rules immediately as long as it detects any rule changes.&lt;/li&gt;
  &lt;li&gt;Data Orchestrator sends all dataset (features) needed for a prediction (e.g. whether to block a ride based on passenger past ride pattern, credit card risk) to the Rule Engine&lt;/li&gt;
  &lt;li&gt;Griffin Rule Engine makes a prediction.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;how-you-can-create-rules-using-griffin&quot;&gt;How you can create rules using Griffin&lt;/h2&gt;

&lt;p&gt;In an abstract view, a rule inside Griffin is defined as:&lt;/p&gt;

&lt;p&gt;Rule:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Input:JSON =&amp;gt; Result:Boolean
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We allow users (analysts, data scientists) to write Python-based rules on WebUI to accommodate some very complicated rules like:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;len(list(filter(lambdax: x \&amp;gt;7, (map(lambdax: math.factorial(x), \[1,2,3,4,5,6\]))))) \&amp;gt;2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This significantly optimizes the expressive power of rules.&lt;/p&gt;

&lt;p&gt;To match and evaluate a rule more efficiently, we also have other key components associated:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Scenarios&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Here are some examples: &lt;code class=&quot;highlighter-rouge&quot;&gt;PreBooking&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;PostBookingCompletion&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;PostFoodDelivery&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Actions&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Actions such as &lt;code class=&quot;highlighter-rouge&quot;&gt;NotAllowBooking&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;AuthCapture&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;SendNotification&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;If a rule result is &lt;em&gt;True&lt;/em&gt;, it returns a list of treatments as selected by users, e.g. AuthCapture and SendNotification (the example below is treatments for one Safety-related rule).The one below is for a checkpoint to detect credit-card risk.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;Treatments: AuthCapture&quot; src=&quot;/img/griffin/image4.png&quot; /&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Each checkpoint has a default treatment. If no rule inside this checkpoint is hit, the rule engine would return the default one (in most cases, it is just “&lt;em&gt;do nothing&lt;/em&gt;”).&lt;/li&gt;
  &lt;li&gt;A treatment can only belong to one checkpoint, but one checkpoint can have multiple treatments.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, the graph below demonstrates a checkpoint &lt;code class=&quot;highlighter-rouge&quot;&gt;PaxPreRide&lt;/code&gt; associated with three treatments: &lt;code class=&quot;highlighter-rouge&quot;&gt;Pass&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Decline&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Hold&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;Treatments: Adding&quot; src=&quot;/img/griffin/image6.png&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Segments&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The scope/dimension of a rule. Based on the sample segments below, a rule can be applied only to &lt;code class=&quot;highlighter-rouge&quot;&gt;countries=\[MY,PH\]&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;verticals=\[GrabBus, GrabCar\]&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;It can be changed at any time on WebUI as well.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;Segments&quot; src=&quot;/img/griffin/image2.png&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Values of a rule&lt;/strong&gt;
When a rule is hit, more than just treatments, users also want some dynamic values returned. E.g. a max distance of the ride allowed if we believe this booking is medium risk.&lt;/p&gt;

&lt;h2 id=&quot;does-python-make-griffin-run-slow&quot;&gt;Does Python make Griffin run slow?&lt;/h2&gt;

&lt;p&gt;We picked Python to enjoy its great expressive power and neatness of syntax, but some people ask: Python is slow, would this cause a latency bottleneck?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Our answer is No.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The below graph shows the Latency P99 of Prediction Request from load balancer side(actually the real latency for each prediction is &amp;lt; 6ms, the metrics are peaked at 30ms because some batch requests contain 50 predictions in a single call)&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;Prediction Request Latency P99&quot; src=&quot;/img/griffin/image1.png&quot; /&gt;
&lt;/div&gt;

&lt;h3 id=&quot;what-we-did-to-achieve-this&quot;&gt;What we did to achieve this?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;The key idea is to make all computations in CPU and memory only (in other words, no extra I/O).&lt;/li&gt;
  &lt;li&gt;We do not fetch the rules from database for each prediction. Instead, we keep a record called &lt;code class=&quot;highlighter-rouge&quot;&gt;dirty_key&lt;/code&gt;, which keeps the latest rule update timestamp. The rule engine would actively check this timestamp and trigger a rule reload only when the &lt;code class=&quot;highlighter-rouge&quot;&gt;dirty_key&lt;/code&gt; timestamp in the DB is newer than the latest rule reload time.&lt;/li&gt;
  &lt;li&gt;Rule engine would not fetch any additional new data, instead, all data should be from Data Orchestrator.&lt;/li&gt;
  &lt;li&gt;So the whole prediction flow is only between CPU &amp;amp; memory (and if the data size is small, it could be on &lt;a href=&quot;https://www.prowesscorp.com/computer-latency-at-a-human-scale&quot;&gt;CPU cache&lt;/a&gt; only).&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wiki.python.org/moin/GlobalInterpreterLock&quot;&gt;Python GIL&lt;/a&gt; essentially enforces a process to have up to one active thread running at a time, no matter how many cores a CPU has. We have &lt;a href=&quot;https://gunicorn.org&quot;&gt;Gunicorn&lt;/a&gt; to wrap our service, so on the Production machine, we have &lt;code class=&quot;highlighter-rouge&quot;&gt;(2x$num_cores) + 1 processes&lt;/code&gt; (see &lt;a href=&quot;http://docs.gunicorn.org/en/latest/design.html#how-many-workers&quot;&gt;Gunicorn Design - How Many Workers?&lt;/a&gt;). The formula is based on the assumption that for a given core, one worker will be reading or writing from the socket while the other worker is processing a request.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The below screenshot is the process snapshot on &lt;a href=&quot;https://aws.amazon.com/ec2/instance-types/c5&quot;&gt;C5.large machine&lt;/a&gt; with 2 vCPU. Note only green processes are active.&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;Process snapshot on C5.large machine&quot; src=&quot;/img/griffin/image5.png&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;A lot of trial and error performance tuning:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;We used to have &lt;a href=&quot;https://github.com/kennknowles/python-jsonpath-rw&quot;&gt;python-jsonpath-rw&lt;/a&gt; for JSONPath query, but the performance was not strong enough. We switched to &lt;a href=&quot;https://github.com/jmespath/jmespath.py&quot;&gt;jmespath&lt;/a&gt; and observed about 10ms latency reduction.&lt;/li&gt;
  &lt;li&gt;We use &lt;a href=&quot;https://www.sqlalchemy.org&quot;&gt;sqlalchemy&lt;/a&gt; for DB Query and ORM. We enabled cache for some use cases, but turned out it was over-optimized with stale data. We ended up turning off some caching points to ensure the data consistency.&lt;/li&gt;
  &lt;li&gt;For new dict/list creation, we prefer native call (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;{}&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;[]&lt;/code&gt;) instead of function call (see the comparison below).&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;Native call and Function call&quot; src=&quot;/img/griffin/image9.png&quot; /&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Use built-in functions &lt;a href=&quot;https://docs.python.org/3/library/functions.html&quot;&gt;https://docs.python.org/3/library/functions.html&lt;/a&gt;. It is written in C, no one can beat it.&lt;/li&gt;
  &lt;li&gt;Add randomness to rule reload so that not all machines run at the same time causing latency spikes.&lt;/li&gt;
  &lt;li&gt;Caching atomic feature units as they are used so that we don’t have to requery for them each time a checkpoint uses it.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;how-griffin-makes-on-call-engineers-relax&quot;&gt;How Griffin makes on-call engineers relax&lt;/h2&gt;

&lt;p&gt;One of the most popular aspects of Griffin is the WebUI. It opens a door for non-developers to make production changes in real time which significantly boosts organisation productivity. In the past a rule change needed 1 week for code change/test/deployment, now it is just 1 minute.&lt;/p&gt;

&lt;p&gt;But this also introduces extra risks. Anyone can turn the whole checkpoint down, whether unintentionally or maliciously.&lt;/p&gt;

&lt;p&gt;Hence we implemented Shadow Mode and Percentage-based rollout for each rule. Users can put a rule into Shadow Mode to verify the performance without any production impact, and if needed, rollout of a rule can be from 1% all the way to 100%.&lt;/p&gt;

&lt;p&gt;We implemented version control for every rule change, and in case anything unexpected happened, we could rollback to the previous version quickly.&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;Version control&quot; src=&quot;/img/griffin/image8.png&quot; /&gt;
&lt;/div&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;Rollback button&quot; src=&quot;/img/griffin/image7.png&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;We also built &lt;a href=&quot;https://en.wikipedia.org/wiki/Role-based_access_control&quot;&gt;RBAC-based&lt;/a&gt; permission system, along with Change Approval flow to make sure any prod change needs at least two people(and approver role has higher permission)&lt;/p&gt;

&lt;h2 id=&quot;closing-thoughts&quot;&gt;Closing thoughts&lt;/h2&gt;

&lt;p&gt;Griffin evolved from a fraud-based rule engine to generic rule engine. It can apply to any rule at Grab. For example, Grab just launched Appeal automation several days ago to reduce 50% of the  human effort it typically takes to review straightforward appeals from our passengers and drivers. It was an unplanned use case, but we are so excited about this.&lt;/p&gt;

&lt;p&gt;This could happen because from the very beginning we designed Griffin with minimized business context, so that it can be generic enough.&lt;/p&gt;

&lt;p&gt;After the launch of this, we observed an amazing adoption rate for various fraud/safety/identity use cases. More interestingly, people now treat Griffin as an automation point for various integration points.&lt;/p&gt;
</description>
        <pubDate>Mon, 28 Oct 2019 17:10:32 +0000</pubDate>
        <link>https://engineering.grab.com/griffin</link>
        <guid isPermaLink="true">https://engineering.grab.com/griffin</guid>
        
        <category>Engineering</category>
        
        <category>Anti-Fraud</category>
        
        <category>Security</category>
        
        <category>Fraud Detection</category>
        
        <category>Data</category>
        
        
        <category>Engineering</category>
        
      </item>
    
      <item>
        <title>Using Grab’s Trust Counter Service to Detect Fraud Successfully</title>
        <description>&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;p&gt;Fraud is not a new phenomenon, but with the rise of the digital economy it has taken different and aggressive forms. Over the last decade, novel ways to exploit technology have appeared, and as a result, millions of people have been impacted and millions of dollars in revenue have been lost. According to &lt;a href=&quot;https://www.acfe.com/press-release.aspx?id%3D4294973129&quot;&gt;ACFE survey&lt;/a&gt;, companies lost USD6.3 billion due to fraud. Organizations lose 5% of its revenue annually due to fraud.&lt;/p&gt;

&lt;p&gt;In this blog, we take a closer look at how we developed an anti-fraud solution using the Counter service, which can be an indispensable tool in the highly complex world of fraud detection.&lt;/p&gt;

&lt;h2 id=&quot;anti-fraud-solution-using-counters&quot;&gt;Anti-fraud solution using counters&lt;/h2&gt;

&lt;p&gt;At Grab, we detect fraud by deploying data science, analytics, and engineering tools to search for anomalous and suspicious transactions, or to identify high-risk individuals who are likely to commit fraud. Grab’s Trust Platform team provides a common anti-fraud solution across a variety of business verticals, such as transportation, payment, food, and safety. The team builds tools for managing data feeds, creates SDK for engineering integration, and builds rules engines and consoles for fraud detection.&lt;/p&gt;

&lt;p&gt;One example of fraudulent behavior could be that of an individual who masquerades as both driver and passenger, and makes cashless payments to get promotions, for example, earn a one dollar rebate in the next transaction.In our system, we analyze real time booking and payment signals, compare it with the historical data of the driver and passenger pair, and create rules using the rule engine. We count the number of driver and passenger pairs at a given time frame. This counter is provided as an input to the rule.If the counter value exceeds a predefined threshold value, the rule evaluates it as a fraud transaction. We send this verdict back to the booking service.&lt;/p&gt;

&lt;h2 id=&quot;the-conventional-method&quot;&gt;The conventional method&lt;/h2&gt;

&lt;p&gt;Fraud detection is a job that requires cross-functional teams like data scientists, data analysts, data engineers, and backend engineers to work together. Usually data scientists or data analysts come up with an offline idea and apply it to real-time traffic. For example, a rule gets invented after brainstorming sessions by data scientists and data analysts. In the conventional method, the rule needs to be communicated to engineers.&lt;/p&gt;

&lt;h2 id=&quot;automated-solution-using-the-counter-service&quot;&gt;Automated solution using the Counter service&lt;/h2&gt;

&lt;p&gt;To overcome the challenges in the conventional method, the Trust platform team decided to come out with the Counter service, a self-service platform, which provides management tools for users, and a computing engine for integrating with the backend services. This service provides an interface, such as a UI based rule editor and data feed, so that analysts can experiment and create rules without interacting with engineers. The platform team also decided to provide different data contracts, APIs, and SDKs to engineers so that the business verticals can use it quickly and easily.&lt;/p&gt;

&lt;h2 id=&quot;the-major-engineering-challenges-faced-in-designing-the-counter-service&quot;&gt;The major engineering challenges faced in designing the Counter service&lt;/h2&gt;

&lt;p&gt;There are millions of transactions happening at Grab every day, which implies we needed to perform billions of fraud and safety detections. As seen from the example shared earlier, most predictions require a group of counters. In the above use case, we need to know how many counts of the cashless payment happened for a driver and passenger pair. Due to the scale of Grab’s business, the potential combinations of drivers and passengers could be exponential. However, this is only one use case. So imagine that there could be hundreds of counters for different use cases. Hence it’s important that we provide a platform for stakeholders to manage counters.&lt;/p&gt;

&lt;p&gt;Read on to learn about some of the common challenges we faced.&lt;/p&gt;

&lt;h3 id=&quot;scalability&quot;&gt;Scalability&lt;/h3&gt;

&lt;p&gt;As mentioned above, we could potentially have an exponential number of passengers and drivers in a single counter. So it’s a great challenge to store the counters in the database, read, and query them in real-time. When there are billions of counter keys across a long period of time, the Trust team had to find a scalable way to write and fetch keys effectively and meet the client’s SLA.&lt;/p&gt;

&lt;h3 id=&quot;self-serving&quot;&gt;Self-serving&lt;/h3&gt;

&lt;p&gt;A counter is usually invented by data scientists or analysts and used by engineers. For example, every time a new type of counter is needed from data scientists, developers need to manually make code changes, such as adding a new stream, capturing related data sets for the counter, and storing it on the fraud service, then doing a deployment to make the counters ready. It usually takes two or more weeks for the whole iteration, and if there are any changes from the data analysts’ side, which happens often, the situation loops again. The team had to come up with a solution to prevent the long loop of manual tasks by coming out with a self-serving interface.&lt;/p&gt;

&lt;h3 id=&quot;manageable-and-extendable&quot;&gt;Manageable and extendable&lt;/h3&gt;

&lt;p&gt;Due to a lack of connection between real-time and offline data, data analysts and data scientists did not have a clear picture of what is written in the counters. That’s because the conventional counter data were stored in Redis database to satisfy the query SLA. They could not track the correctness of counter value, or its history. With the new solution, the stakeholders can get a real-time picture of what is stored in the counters using the data engineering tools.&lt;/p&gt;

&lt;h2 id=&quot;the-machine-learningchallenges-solved-by-the-counter-service&quot;&gt;The Machine Learning challenges solved by the Counter service&lt;/h2&gt;

&lt;p&gt;The Counter service plays an important role in our Machine Learning (ML) workflow.&lt;/p&gt;
&lt;h3 id=&quot;data-consistency-challengeissue&quot;&gt;Data Consistency Challenge/Issue&lt;/h3&gt;

&lt;p&gt;Most of the machine learning workflows need dedicated input data. However, when there is an anti-fraud model that is trained using offline data from the data lake, it is difficult to use the same model in real-time. This is because the model lacks the data contract and the consistency with the data source. In this case, the Counter service becomes a type of data source by providing the value of counters to file system.&lt;/p&gt;

&lt;h3 id=&quot;ml-featuring&quot;&gt;ML featuring&lt;/h3&gt;

&lt;p&gt;Counters are important features for the ML models. Imagine there is a new invention of counters, which data scientists need to evaluate. We need to provide a historical data set for counters to work. The Counter service provides a counter replay feature, which allows data scientists to simulate the counters via historical payload.&lt;/p&gt;

&lt;p&gt;In general, the Counter service is a bridge between online and offline datasets, data scientists, and engineers. There was technical debt with regards to data consistency and automation on the ML pipeline, and the Counter service closed this loop.&lt;/p&gt;

&lt;h2 id=&quot;how-we-designed-the-counter-service&quot;&gt;How we designed the Counter service&lt;/h2&gt;

&lt;p&gt;We followed the principle of asynchronized data ingestion, and synchronized transaction for designing the Counter service.&lt;/p&gt;

&lt;p&gt;The diagram shows how the counters are generated and saved to database.&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;How the counters are generated and saved to the database&quot; src=&quot;/img/using-grabs-trust-counter-service-to-detect-fraud-successfully/image1.png&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Counter creation workflow&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;User opens the Counter Creation UI and creates a new key &lt;em&gt;“fraud:counter:counter_name”&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;Configures required fields.&lt;/li&gt;
  &lt;li&gt;The Counter service monitors the new counter-creation, puts a new counter into load script storage, and starts processing new counter events (see Counter Write below).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Counter write workflow&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;The Counter service monitors multiple streams, assembles extra data from online data services (i.e. Common Data Service (CDS), passenger service, hydra service, etc), so that rich dataset would also be available for editors on each stream resource.&lt;/li&gt;
  &lt;li&gt;The Counter Processor evaluates the user-configured expression and writes the evaluated values to the dedicated Grab-Stats stream using the GrabPlugin tool.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Counter read workflow&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;Counter read workflow&quot; src=&quot;/img/using-grabs-trust-counter-service-to-detect-fraud-successfully/image2.png&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;We use Grab-Stats as our storage service. Basically Grab-Stats runs above ScyllaDB, which is a distributed NoSQL data store. We use ScyllaDB because of its good performance on aggregation in memory to deal with the time series dataset. In comparison with in-memory storage like AWS elasticCache, it is 10 times cheaper and as reliable as AWS in terms of stability. The p99 of reading from ScyllaDB is less than 150ms which satisfies our SLA.&lt;/p&gt;

&lt;h2 id=&quot;how-we-improved-the-counter-service-performance&quot;&gt;How we improved the Counter service performance&lt;/h2&gt;

&lt;p&gt;We used the multi-buckets strategy to improve the Counter service performance.&lt;/p&gt;

&lt;h3 id=&quot;background-1&quot;&gt;Background&lt;/h3&gt;

&lt;p&gt;There are different time windows when you perform a query. Some counters are time sensitive so that it needs to know what happened in the last 30 or 60 minutes. Some other counters focus on the long term and need to know the events in the last 30 or 90 days.&lt;/p&gt;

&lt;p&gt;From a transactional database perspective, it’s not possible to serve small range as well as long term events at the same time. This is because the more the need for the accuracy of the data and the longer the time range, the more aggregations need to happen on database. Which means we would not be able to satisfy the SLA. Otherwise we will need to block other process which leads to the service downgrade.&lt;/p&gt;

&lt;h3 id=&quot;solution-for-improving-the-query&quot;&gt;Solution for improving the query&lt;/h3&gt;

&lt;p&gt;We resolved this problem by using different granularities of the tables. We pre-aggregated the signals into different time buckets, such as 15min, 1 hour, and 1 day.&lt;/p&gt;

&lt;p&gt;When a request comes in, the time-range of the request will be divided by the buckets, and the results are conquered. For example, if there is a request for 9/10 23:15:20 to 9/12 17:20:18, the handler will query 15min buckets within the hour.  It will query for hourly buckets for the same day. And it will query the daily buckets for the rest of 2 days. This way, we avoid doing heavy aggregations, but still keep the accuracy in 15 minutes level in a scalable response time.&lt;/p&gt;

&lt;h3 id=&quot;counter-service-ui&quot;&gt;Counter service UI&lt;/h3&gt;

&lt;p&gt;We allowed data analysts and data scientists to onboard counters by themselves, from a dedicated web portal. After the counter is submitted, the Counter service takes care of the integration and parsing the logic at runtime.&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;Counter service UI&quot; src=&quot;/img/using-grabs-trust-counter-service-to-detect-fraud-successfully/image3.png&quot; /&gt;
&lt;/div&gt;

&lt;h3 id=&quot;backendintegration&quot;&gt;Backend integration&lt;/h3&gt;

&lt;p&gt;We provide SDK for quicker and better integration. The engineers only need to provide the counter identifier ID (which is shown in the UI) and the time duration in the query. Under the hood we provide a GRPC protocol to communicate across services. We divide the query time window to smaller granularities, fetching from different time series tables and then conquering the result. We are also providing a short &lt;a href=&quot;https://en.wikipedia.org/wiki/Time_to_live&quot;&gt;TTL&lt;/a&gt; cache layer to take the uncommon traffic from client such as network retry or traffic throttle. Our &lt;a href=&quot;https://en.wikipedia.org/wiki/Queries_per_second&quot;&gt;QPS&lt;/a&gt; are designed to target 100K.&lt;/p&gt;

&lt;h3 id=&quot;monitoring-the-counter-service&quot;&gt;Monitoring the Counter service&lt;/h3&gt;

&lt;p&gt;The Counter service dashboard helps to track the human errors while editing the counters in real-time. The Counter service sends alerts to slack channel to notify users if there is any error.&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;Counter service dashboard&quot; src=&quot;/img/using-grabs-trust-counter-service-to-detect-fraud-successfully/image4.png&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;We setup Datadog for monitoring multiple system metrics. The figure below shows a portion of stream processing and counter writing. In the example below, the total stream QPS would reach 5k at peak hour, and the total counter saved to storage tier is about 4k. It will keep climbing without an upper limit, when more counters are onboarded.&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;Counter service dashboard with multiple metrics&quot; src=&quot;/img/using-grabs-trust-counter-service-to-detect-fraud-successfully/image5.png&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;The Counter service UI portal also helps users to fetch real-time counter results for verification purposes.&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;Counter service UI&quot; src=&quot;/img/using-grabs-trust-counter-service-to-detect-fraud-successfully/image6.png&quot; /&gt;
&lt;/div&gt;

&lt;h2 id=&quot;future-plans&quot;&gt;Future plans&lt;/h2&gt;

&lt;p&gt;Here’s what we plan to do in the near future to improve the Counter service.&lt;/p&gt;

&lt;h3 id=&quot;close-the-ml-workflow-loop&quot;&gt;Close the ML workflow loop&lt;/h3&gt;

&lt;p&gt;As mentioned above, we plan to send the resource payload of the Counter service to the offline data lake, in order to complete the counter replay function for data scientists. We are working on the project called “time traveler”. As the name indicates, it is used not only for serving the online transactional data, but also supports historical data analytics, and provides more flexibility on counter inventions and experiments.&lt;/p&gt;

&lt;p&gt;There are more automation steps we plan to do, such as adding a replay button on the web portal, and hooking up with the offline big data engine to trigger the analytics jobs. The performance metrics will be collected and displayed on the web portal. A single platform would be able to manage both the online and offline data.&lt;/p&gt;

&lt;h3 id=&quot;integration-with-griffin&quot;&gt;Integration with Griffin&lt;/h3&gt;

&lt;p&gt;Griffin is our rule engine. Counters are sometimes an input to a particular rule, and one rule usually needs many counters to work together. We need to provide a better integration with Griffin on backend. We plan to minimize the current engineering effort when using counters on Griffin. A counter then becomes an automated input variable on Griffin, which can be configured on the web portal by any users.&lt;/p&gt;
</description>
        <pubDate>Mon, 21 Oct 2019 14:30:12 +0000</pubDate>
        <link>https://engineering.grab.com/using-grabs-trust-counter-service-to-detect-fraud-successfully</link>
        <guid isPermaLink="true">https://engineering.grab.com/using-grabs-trust-counter-service-to-detect-fraud-successfully</guid>
        
        <category>Engineering</category>
        
        <category>Anti-Fraud</category>
        
        <category>Security</category>
        
        <category>Fraud Detection</category>
        
        <category>Data</category>
        
        
        <category>Engineering</category>
        
      </item>
    
      <item>
        <title>Being a Principal Engineer at Grab</title>
        <description>&lt;p&gt;Over the past few years Grab has grown from a small startup to one of the largest technology companies in South-East Asia. Along with the company’s growth, the number of microservices, features and teams also grew substantially. At the time of writing this blog, we have around 350 microservices powering our super-app.&lt;/p&gt;

&lt;p&gt;A great engineering team is a critical component of our success. As an engineer you have two career paths in front of you: an individual contributor role, or a management role. While a management role is generally better understood, this article clarifies what it means to be a principal engineer at Grab, which is one of the highest levels of our engineering career ladder.&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;Engineering Career Ladder&quot; src=&quot;/img/about-being-a-principal-engineer-at-grab/image1.jpg&quot; /&gt;
&lt;/div&gt;

&lt;h2 id=&quot;improving-the-quality&quot;&gt;Improving the Quality&lt;/h2&gt;
&lt;div align=&quot;center&quot; style=&quot;font-style:italic&quot;&gt;&lt;font color=&quot;A9A9A9&quot;&gt;“You set the standard for engineering excellence in your technical family. Your architectures are exemplary in terms of efficiency, stability, extensibility, testability and the ability to evolve over time. Your software is robust in the presence of failures, scalable, and cost-effective. Your coding practices are exemplary in terms of code organization, clarity, simplicity, error handling, and documentation. You tackle intrinsically hard problems, acquiring expertise as needed. You decompose complex problems into straightforward solutions.” - Grab’s Engineering Career Ladder&lt;/font&gt;&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;So, what does a principal engineer do? As your career progresses from junior to senior to lead engineer we have more and more responsibilities; you manage larger and larger systems. For example, junior engineer might manage a specific component of a micro-service. A senior engineer would be tasked with designing and operating an entire micro-service or product. While a lead engineer would typically be concerned with the architecture at a team level.&lt;/p&gt;

&lt;p&gt;Principal engineer level is akin to a senior manager where instead of indirectly managing people (manager of managers) you take care of the architecture of an entire sub-organisation, known as Tech Family/Platform. These Tech Families usually have more than 50 engineers spread across multiple teams and function as a tiny company with their own business owners, designers, product managers, etc.&lt;/p&gt;

&lt;h2 id=&quot;challenging-projects&quot;&gt;Challenging Projects&lt;/h2&gt;

&lt;div align=&quot;center&quot; style=&quot;font-style:italic&quot;&gt;&lt;font color=&quot;A9A9A9&quot;&gt;“You take engineering ownership of projects that may require the work of several teams to implement; you divide responsibilities so that each team can work independently and have the system come together into an integrated whole. Your projects often cross team, tech family, platform, and even R&amp;amp;D center boundaries. You solicit differing views and keep an open mind. You are adept at building consensus.” - Grab’s Engineering Career Ladder&lt;/font&gt;&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;As a principal engineer, your job is to solve larger problems and &lt;strong&gt;translate somewhat vague problems&lt;/strong&gt; into a set of actionable items. You might be faced with a large problem such as “improve efficiency and interoperability of Grab’s transportation system.” You will need to understand the problem, the business impact and see how can it be improved. It might require you to design new systems, change existing systems, understand the costs involved and get the right people together to make it happen.&lt;/p&gt;

&lt;p&gt;Solving such a problem all by yourself is pretty much impossible. You have to work with other managers and other engineers together &lt;strong&gt;as a team&lt;/strong&gt; to make it happen. Help your lead/senior engineers to design the right system by giving them a clear objective but let them take care of the system-level architecture.  &lt;/p&gt;

&lt;p&gt;You will also need to work with managers, advise them to get things done, and get the right things prioritised by the team. While you don’t need to be well-versed in project management and agile methodologies, you do need to be able to plan ahead with your teams and have an understanding of how much time a project or migration will take.&lt;/p&gt;

&lt;p&gt;A Tech Family can easily have 20 or more micro-services. You need to have a good understanding of their &lt;strong&gt;functional requirements and interactions&lt;/strong&gt;. This is challenging as learning new things is always “uncomfortable” and takes time. You must reach out to engineers, product managers, and data scientists, ideally face-to-face to build empathy. Keep asking questions and try to understand how things work. You will also need to read the existing documentation and their code.&lt;/p&gt;

&lt;h2 id=&quot;technical-ownership&quot;&gt;Technical Ownership&lt;/h2&gt;

&lt;div align=&quot;center&quot; style=&quot;font-style:italic&quot;&gt;&lt;font color=&quot;A9A9A9&quot;&gt;“You are the origin of significant technical contributions to our architecture and infrastructure. You take technical ownership of the design and quality of the security, performance, availability, and operational aspects of the software built by one or more teams. You identify where your time is needed, transitioning between coding, design, and architecture based on project and team needs. You deliver software in ways that empower teams to self-service, providing clear adoption/migration paths.” - Grab’s Engineering Career Ladder&lt;/font&gt;&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;As a principal engineer you work together with the Head of Engineering and managers within the Tech Family and &lt;strong&gt;improve the quality&lt;/strong&gt; of systems across the board. Typically, no-one tells you what needs to be done. You need to identify gaps, raise them and keep improving the systems.&lt;/p&gt;

&lt;p&gt;You also need to learn how to manage your own time better so you can &lt;strong&gt;prioritise effectively&lt;/strong&gt;. This boils down to knowing your strengths, your weaknesses. For example, if you are really good in building distributed systems but have no clue about the latest-and-greatest design in information security, get the right InfoSec engineers in this meeting and consider skipping it yourself. Avoid trying to do everything at once and be in every single meeting you get invited - you still have to review code, design and focus, so plan accordingly.&lt;/p&gt;

&lt;p&gt;You will also need to understand the &lt;strong&gt;business impact&lt;/strong&gt; of your decisions. For example, if you contribute to product features, know how impactful this feature is going to be to the organisation. If you don’t know it - ask the Product Manager responsible for it. If you work on a platform feature, for example improving the build system, know how it will help: saving 30 minutes of build time for every engineer each day is a huge achievement.&lt;/p&gt;

&lt;p&gt;More often than not, you will have to &lt;strong&gt;drive migrations&lt;/strong&gt;, this is akin to code refactoring but on a system-level and will involve a lot of collaboration with the people. Understand what a technical debt is and how it can be mitigated - a good architecture minimises technical debt and in turn accelerates time-to-market and helps business flourish.&lt;/p&gt;

&lt;h2 id=&quot;technical-leadership&quot;&gt;Technical Leadership&lt;/h2&gt;

&lt;div align=&quot;center&quot; style=&quot;font-style:italic&quot;&gt;&lt;font color=&quot;A9A9A9&quot;&gt;“You amplify your impact by leading design reviews for complex software and/or critical features. You probe assumptions, illuminate pitfalls, and foster shared understanding. You align teams toward coherent architectural strategies.” - Grab’s Engineering Career Ladder&lt;/font&gt;&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;In Grab we have a process known as RFC (Request For Comments) which allows engineers to submit &lt;strong&gt;designs and ideas&lt;/strong&gt; for a larger audience to debate. This is especially important given that our organisation is spread across several continents with research and development offices in Southeast Asia, the US, India and China. While any engineer is welcome to comment on these RFCs, it is a duty of lead and principal engineers’ to review them on a regular basis. This will help you to expand your knowledge of existing systems and help others with improving their designs.&lt;/p&gt;

&lt;p&gt;Communication is a key skill that you need to keep improving and it is often the Achilles’ heel of many engineers who would rather be doing work in their corner without talking to anyone else. This is perfectly fine for a junior (or even some senior engineers) but it is critical for a principal engineer to communicate. Let’s break this down to a set of specific skills that you’d need to sharpen.&lt;/p&gt;

&lt;p&gt;You need to be able to &lt;strong&gt;write effectively&lt;/strong&gt; in order to convey your ideas to others. This includes knowing your audience and wording it in such a way that readers can understand. A technical design document whose audience are engineers is not written the same way as a design proposal whose audience are product and business managers.&lt;/p&gt;

&lt;p&gt;You need to be able to &lt;strong&gt;publicly present and talk&lt;/strong&gt; about various projects that you are working on. This includes creation of slide decks with good visuals and distilling down months of work to just a couple of slides. The best way of learning this is to get out there and keep presenting your work - you will get better over time.&lt;/p&gt;

&lt;p&gt;You also need to be able to &lt;strong&gt;drive meetings and discussions&lt;/strong&gt; without wasting anyone’s time. As a technical leader, one of your key responsibilities is to get people moving in the same direction and driving consensus during meetings.&lt;/p&gt;

&lt;h2 id=&quot;teaching-and-learning&quot;&gt;Teaching and Learning&lt;/h2&gt;

&lt;div align=&quot;center&quot; style=&quot;font-style:italic&quot;&gt;&lt;font color=&quot;A9A9A9&quot;&gt;“You educate other engineers, both at an individual level and at scale: keeping the engineering community up to date on advanced technical issues, technologies, and trends. Examples include onboarding bootcamps for new hires, interns, specific skill-gap training development, and sharing specialized knowledge to raise the technical bar for other engineers/teams/dev centers.”&lt;/font&gt;&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;A principal engineer is a technical leader and as a leader you have the responsibility to &lt;strong&gt;mentor&lt;/strong&gt;, coach fellow engineers, regardless of their level. In addition to code-reviews, you can organise office hours in your team and knowledge sharing sessions where everyone could present something. You could also help with bootcamps and help new hires in getting up-to-speed.&lt;/p&gt;

&lt;p&gt;Most importantly, &lt;strong&gt;you will also need to keep learning&lt;/strong&gt; whichever way works for you - reading journals and papers, blog posts, watching video-recorded talks, attending conferences and browsing through a variety of open-source projects. You will also learn from other Grabbers as even a junior engineer can teach you something, we all have our strengths and weaknesses. Keep improving and working on yourself!&lt;/p&gt;
</description>
        <pubDate>Wed, 25 Sep 2019 18:14:40 +0000</pubDate>
        <link>https://engineering.grab.com/about-being-a-principal-engineer-at-grab</link>
        <guid isPermaLink="true">https://engineering.grab.com/about-being-a-principal-engineer-at-grab</guid>
        
        <category>Career</category>
        
        <category>Engineering</category>
        
        <category>Microservices</category>
        
        
        <category>Engineering</category>
        
      </item>
    
      <item>
        <title>Data First, SLA Always</title>
        <description>&lt;p&gt;Introducing Trailblazer, the Data Engineering team’s solution to implementing change data capture of all upstream databases. In this article, we introduce the reason why we needed to move away from periodic batch ingestion towards a real time solution and show how we achieved this through an end to end streaming pipeline.&lt;/p&gt;

&lt;h2 id=&quot;context&quot;&gt;Context&lt;/h2&gt;

&lt;p&gt;Our mission as Grab’s Data Engineering team is to fulfill 100% of SLAs for data availability to our downstream users. Our 40 person team is responsible for providing accurate and reliable data to data analysts and data scientists so that they can produce actionable reports that will help Grab’s leadership team make data-driven decisions. We maintain data for a variety of business intelligence tools such as Tableau, Presto and Holistics as well as predictive algorithms for all of Grab.&lt;/p&gt;

&lt;p&gt;We ingest data from multiple upstream sources, such as relational databases, Kafka or third party applications such as Salesforce or Zendesk. The majority of these source data exists in MySQL and we run ETL pipelines to mirror any updates into our data lake. These pipelines are triggered on an hourly or daily basis and are powered by an in-house Loader application which performs Spark batch ingestion and loading of data from source to sink.&lt;/p&gt;

&lt;p&gt;Problems with the Loader application started to surface when Grab’s data exceeded the petabyte threshold. As such for larger tables, the most practical method to ingest data was to perform ETL only on rows that were updated within a specified timeframe. This is akin to issuing the query&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT * FROM table WHERE updated &amp;gt;= [start_time] AND updated &amp;lt; [end_time]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now imagine two situations. One, firing this query to a huge table without an updated field. Two, firing the same query to the huge table, this time without indexes on the updated field. In the first scenario, the query will never work and we can never perform incremental ingestion on the table based on a timed window. The second scenario carries the dangers of creating high CPU load to replicate the database that we are querying from. Neither has an ideal outcome.&lt;/p&gt;

&lt;p&gt;One other problem that we identified was the unpredictability of growth in data volume. Tables smaller than one gigabyte were ingested by fully scanning the table and overwriting the data in the data lake. This worked out well for us until the table size increased exponentially, at which point our Spark jobs failed due to JDBC timeouts. If we were only dealing with a handful of tables, this issue could have been addressed by switching our data ingestion strategy from full scan to a timed window.&lt;/p&gt;

&lt;p&gt;When assessing the issue, we discovered that there were hundreds of tables running under the full scan strategy, all of them potentially crashing our data system, all time bombs silently waiting to explode.&lt;/p&gt;

&lt;p&gt;The team urgently needed a new approach to ETL. Our Loader application was highly coupled to upstream table characteristics. We needed to find solutions that were truly scalable, which meant decoupling our pipelines from the upstream.&lt;/p&gt;

&lt;h2 id=&quot;change-data-capture-cdc&quot;&gt;Change data capture (CDC)&lt;/h2&gt;

&lt;p&gt;Much like event sourcing, any log change to the database is captured and streamed out for downstream applications to consume. This process is lightweight since any row level update to the table is instantly captured by a real time processor, avoiding the need for large chunked queries on the table. In addition, CDC works regardless of upstream table definition, so we do not need to worry about missing updated columns impacting our data migration process.&lt;/p&gt;

&lt;p&gt;Binary Logs (binlogs) are the CDC agents of MySQL. All updates, insertions or deletions performed on the table are captured as a series of logged events containing the past state of the row and it’s newly modified state. Check out the &lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/mysqlbinlog.html&quot;&gt;binlogs reference&lt;/a&gt; to find out more.&lt;/p&gt;

&lt;p&gt;In order to persist all binlogs generated upstream, our team created a Spark Structured Streaming application called Trailblazer. Trailblazer streams all MySQL binlogs to our data lake. These binlogs serve as a foundation for us to build Presto tables for data auditing and help to remove the direct dependency of our batch ETL jobs to the source MySQL.&lt;/p&gt;

&lt;p&gt;Trailblazer is an amalgamation of various data streaming stacks. Binlogs are captured by Debezium which runs on Kafka connect clusters. All binlogs are sent to our Kafka cluster, which is managed by the Data Engineering Infrastructure team and are streamed out to a real time bucket via a Spark structured streaming application. Hourly or daily ETL compaction jobs ingests the change logs from the real time bucket to materialize tables for downstream users to consume.&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;CDC in action where binlogs are streamed to Kafka via Debezium before being consumed by Trailblazer streaming &amp;amp; compaction services&quot; src=&quot;/img/data-first-sla-always/image2.png&quot; /&gt;
  &lt;small class=&quot;post-image-caption&quot;&gt;CDC in action where binlogs are streamed to Kafka via Debezium before being consumed by Trailblazer streaming &amp;amp; compaction services&lt;/small&gt;
&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h2 id=&quot;some-statistics&quot;&gt;Some statistics&lt;/h2&gt;

&lt;p&gt;To date, we are streaming hundreds oftables across 60 Spark streaming jobs and with the constant increase in Grab’s database instances, the numbers are expected to keep growing.&lt;/p&gt;

&lt;h2 id=&quot;designing-trailblazer-streams&quot;&gt;Designing Trailblazer streams&lt;/h2&gt;

&lt;p&gt;We built our streaming application using Spark structured streaming 2.3. Structured streaming was designed to remove the technical aspects of provisioning streams. Developers can focus on perfecting business logic without worrying about fundamentals such as checkpoint management or reading and writing to data sources.&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;Key architecture for Trailblazer streaming&quot; src=&quot;/img/data-first-sla-always/image5.png&quot; /&gt;
  &lt;small class=&quot;post-image-caption&quot;&gt;Key architecture for Trailblazer streaming&lt;/small&gt;
&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;In the design phase, we made sure to follow several key principles that helped in managing our streams.&lt;/p&gt;

&lt;h3 id=&quot;checkpoints-have-to-be-externally-managed&quot;&gt;Checkpoints have to be externally managed&lt;/h3&gt;

&lt;p&gt;Structured streaming manages checkpoints both in a local directory and in a ‘_metadata’ directory on S3 buckets, such that the state of the stream can be restored in the event of failure and restart.&lt;/p&gt;

&lt;p&gt;This is all well and good, with two exceptions. First, changing the starting point of data ingestion meant ssh-ing into the machine and manipulating metadata, which could be extremely dangerous. Second, we could not assume cluster prevalence since clusters can die and be recreated with data erased from its local disk or the distributed file system.&lt;/p&gt;

&lt;p&gt;Our solution was to do a work around at the application level. All checkpoints will be stored in temporary directories with the existing timestamp appended as path (eg /tmp/checkpoint/job_A/1560697200/… ). A linearly progressive timestamp guarantees that the same directory will never be reused by new instances of the stream. This explains why we never restore its state from local disk but instead, store all checkpoints in a highly available Redis cluster, with key as the Kafka topic and value as a JSON of partition : offset.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Key

debz-schema-A.schema_A.table_B

Value

{&quot;11&quot;:19183566,&quot;12&quot;:19295602,&quot;13&quot;:18992606[[a]](#cmnt1)[[b]](#cmnt2)[[c]](#cmnt3)[[d]](#cmnt4)[[e]](#cmnt5)[[f]](#cmnt6),&quot;14&quot;:19269499,&quot;15&quot;:19197199,&quot;16&quot;:19060873,&quot;17&quot;:19237853,&quot;18&quot;:19107959,&quot;19&quot;:19188181,&quot;0&quot;:19193976,&quot;1&quot;:19072585,&quot;2&quot;:19205764,&quot;3&quot;:19122454,&quot;4&quot;:19231068,&quot;5&quot;:19301523,&quot;6&quot;:19287447,&quot;7&quot;:19418871,&quot;8&quot;:19152003,&quot;9&quot;:19112431,&quot;10&quot;:19151479}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;small class=&quot;post-image-caption&quot;&gt;Example of how offsets are stored in Redis as Key : Value pairs&lt;/small&gt;
&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Fortunately, structured streaming provides the &lt;a href=&quot;https://jaceklaskowski.gitbooks.io/spark-structured-streaming/spark-sql-streaming-StreamingQueryListener.html&quot;&gt;StreamQueryListener class&lt;/a&gt; which we can use to register checkpoints after the completion of each microbatch.&lt;/p&gt;

&lt;h3 id=&quot;streams-must-handle-0-1-or-1-million-data&quot;&gt;Streams must handle 0, 1 or 1 million data&lt;/h3&gt;

&lt;p&gt;Scalability is at the heart of all well-designed applications. Spark streaming jobs are built for scalability in the face of varying data volumes.&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;In general, the rate of messages input to Kafka is cyclical across 24 hrs. Streaming jobs should be robust enough to handle data loads during peak hours of the day without breaching microbatch timing&quot; src=&quot;/img/data-first-sla-always/image6.png&quot; /&gt;
  &lt;small class=&quot;post-image-caption&quot;&gt;In general, the rate of messages input to Kafka is cyclical across 24 hrs. Streaming jobs should be robust enough to handle data loads during peak hours of the day without breaching microbatch timing&lt;/small&gt;
&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;There are a few settings that we can configure to influence the degree of scalability for a streaming app&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;spark.dynamicAllocation.enabled=true&lt;/em&gt; gives spark autonomy to provision / revoke executors to suit the workload&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://jaceklaskowski.gitbooks.io/mastering-apache-spark/spark-dynamic-allocation.html%23spark.dynamicAllocation.minExecutors&quot;&gt;spark.dynamicAllocation.maxExecutors&lt;/a&gt;&lt;/em&gt; controls the maximum job parallelism&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;maxOffsetsPerTrigger&lt;/em&gt; controls the maximum number of messages ingested from Kafka per microbatch&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;trigger&lt;/em&gt; controls the duration between microbatchs and is a property of the DataStreamWriter class&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;data-as-key-health-indicator&quot;&gt;Data as key health indicator&lt;/h3&gt;

&lt;p&gt;Scaling the number of streaming jobs without prior collection of performance metrics is a bad idea. There is a high chance that you will discover a dead stream when checking your stream hours after initialization. I’ll cite Murphy’s law as proof.&lt;/p&gt;

&lt;p&gt;Thus we vigilantly monitored our data streams. We used tools such as Datadog for metric monitoring, Slack for oncall issue reporting, PagerDuty for urgent cases and our inhouse data auditor as a service (DASH) for counts discrepancy reporting between streamed and source data. More details on monitoring will be discussed in the later part.&lt;/p&gt;

&lt;h3 id=&quot;streams-are-ephemeral&quot;&gt;Streams are ephemeral&lt;/h3&gt;

&lt;p&gt;Streams may die due to a hundred and one reasons so don’t blame yourself or your programming insecurities. Issues with upstream dependencies, such as a node within your Kafka cluster running out of disk space, could lead to partition unavailability which would crash the application. On one occasion, our streaming application was unable to resolve DNS when writing to AWS S3 storage. This amounted to multiple failures within our Spark job that eventually culminated in the termination of the stream.&lt;/p&gt;

&lt;p&gt;In this case, allow the stream to  shutdown gracefully, send out your alerts and have a mechanism in place to retry the failed stream. We run all streaming jobs on Airflow and any failure to the stream will automatically be retried through a new task issued by the scheduler.&lt;/p&gt;

&lt;p&gt;If you have had experience with large scale management of streams, please leave a comment so we can continue this discussion!&lt;/p&gt;

&lt;h2 id=&quot;monitoring-data-streams&quot;&gt;Monitoring data streams&lt;/h2&gt;

&lt;p&gt;Here are some key features that were set up to monitor our streams.&lt;/p&gt;

&lt;h3 id=&quot;running--active-jobs-ratio&quot;&gt;Running : Active jobs ratio&lt;/h3&gt;

&lt;p&gt;The number of streaming jobs could increase in the future, thus becoming a challenge for the oncall team to track all jobs that are supposed to be up and running.&lt;/p&gt;

&lt;p&gt;One proposal  is  to track the number of jobs in production against the number of jobs that are actually running. By querying MySQL tables, we can filter out all the jobs that are meant to be active. Since Trailblazer streams are spark-submit jobs managed by YARN, we can query YARN’s resource manager REST API to retrieve  all the jobs that are running. We then construct a ratio of running : active jobs and report them to Datadog. If the ratio is not 1 for an extended duration, an alert will be issued for the oncall to take action.&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;If the ratio of running : active jobs falls below 1 for a period of time, we will immediately trigger an alert&quot; src=&quot;/img/data-first-sla-always/image4.png&quot; /&gt;
  &lt;small class=&quot;post-image-caption&quot;&gt;If the ratio of running : active jobs falls below 1 for a period of time, we will immediately trigger an alert&lt;/small&gt;
&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h3 id=&quot;microbatch-runtime&quot;&gt;Microbatch runtime&lt;/h3&gt;

&lt;p&gt;We define a 30 second window for each microbatch and track the actual runtime using metrics reported by the query listener. A runtime that exceeds the designated window is a potential indicator that the streaming job is deprived of resources and needs to be scaled up.&lt;/p&gt;

&lt;h3 id=&quot;job-liveliness&quot;&gt;Job liveliness&lt;/h3&gt;

&lt;p&gt;Each job reports its health by emitting a count of 1 heartbeat. This heartbeat is created at the end of every microbatch via a query listener. This process is useful in detecting stale jobs (jobs that are registered as RUNNING in YARN but are actually hung).&lt;/p&gt;

&lt;h3 id=&quot;kafka-offset-divergence&quot;&gt;Kafka offset divergence&lt;/h3&gt;

&lt;p&gt;In order to ensure that the message output rate to the consumer exceeds the message input rate from the producer, we sum up all presently ingested topic-partition offsets and compare that value to the sum of all topic-partition end offsets in Kafka. We then add an alerting logic on top of these metrics to inform the oncall team if the difference between the two values grows too big.&lt;/p&gt;

&lt;p&gt;It is important to track the offset divergence parameter as streams can be lagging. Should the rate of consumption fall below the rate of message production, we would run the risk of falling short of Kafka’s retention window, leading to data losses.&lt;/p&gt;

&lt;h3 id=&quot;hourly-data-checks&quot;&gt;Hourly data checks&lt;/h3&gt;

&lt;p&gt;DASH runs hourly and serves as our first line of defence to detect any data quality issues within the streams. We issue queries to the source database and our streaming layer to confirm that the ID counts of data created within the last hour match.&lt;/p&gt;

&lt;p&gt;DASH helps in the early detection of upstream issues. We have noticed cases where our Debezium connectors failed and our checker reported fewer data than expected since there were no incoming messages to Kafka.&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;DASH matches and mismatches reported to Slack&quot; src=&quot;/img/data-first-sla-always/image1.png&quot; /&gt;
&lt;/div&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;DASH matches and mismatches reported to Slack&quot; src=&quot;/img/data-first-sla-always/image3.png&quot; /&gt;
  &lt;small class=&quot;post-image-caption&quot;&gt;DASH matches and mismatches reported to Slack&lt;/small&gt;
&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h2 id=&quot;materializing-tables-through-compaction&quot;&gt;Materializing tables through compaction&lt;/h2&gt;

&lt;p&gt;Having CDC data in our data lake does not conclude our responsibilities. Batched compaction allows us to apply all captured CDC, to be available as Presto tables for downstream consumption. The job is set to trigger hourly and process all changes to the database within the past hour.  For example, changes to a record are visible in real-time, but the latest state of the record will not be reflected until the next time a batch job runs. We addressed several issues with streaming during this phase.&lt;/p&gt;

&lt;h3 id=&quot;deduplication-of-data&quot;&gt;Deduplication of data&lt;/h3&gt;

&lt;p&gt;Trailblazer was not built to deliver exactly once guarantees. We ensure that the issues regarding duplicated CDCs are addressed during compaction.&lt;/p&gt;

&lt;h3 id=&quot;availability-of-all-data-until-certain-hour&quot;&gt;Availability of all data until certain hour&lt;/h3&gt;

&lt;p&gt;We want to make sure that downstream pipelines use output data of the hourly batch job only when the pipeline has all records for that hour. In case there is an event that is processed late by streaming, the current pipeline will wait until the data is completed. In this case, we are consciously choosing consistency over availability for our downstream users. For example, missing a few insert booking records in peak hours due to consumer processing delay can generate the wrong downstream results leading to miscalculation in revenue. We want to start  downstream processes only when the data for the hour or day is complete.&lt;/p&gt;

&lt;h3 id=&quot;need-for-latest-state-of-each-event&quot;&gt;Need for latest state of each event&lt;/h3&gt;

&lt;p&gt;Our compaction job performs upserts on the data to ensure that our downstream users can consume  records in their latest state.  &lt;/p&gt;

&lt;h2 id=&quot;future-applications&quot;&gt;Future applications&lt;/h2&gt;

&lt;p&gt;Trailblazer is a milestone for the Data Engineering team as it represents our commitment to achieve large scale data streams to reduce latencies for our end users. Moving ahead, our team will be exploring how we can further optimize streaming jobs by analysing data trends over time and to build applications such as snapshot tables on top of the CDCs being streamed in our data lake.&lt;/p&gt;
</description>
        <pubDate>Thu, 01 Aug 2019 19:43:40 +0000</pubDate>
        <link>https://engineering.grab.com/data-first-sla-always</link>
        <guid isPermaLink="true">https://engineering.grab.com/data-first-sla-always</guid>
        
        <category>Data Pipeline</category>
        
        
        <category>Data Science</category>
        
        <category>Engineering</category>
        
      </item>
    
      <item>
        <title>Save Your Place with Grab!</title>
        <description>&lt;p&gt;Do you find it tedious to type and search for your destination or have a hard time remembering that address of the friend you are going to meet? It can be really confusing when it comes to keeping track of so many addresses that you frequent on a regular basis. To solve this pain point, Grab rolled out a new feature called Saved Places in January’19 across SouthEast Asia.&lt;/p&gt;

&lt;p&gt;With Saved Places, you can save an address and also add a label like “Home”, “Work”, “Gym”, etc which makes finding and selecting an address for booking a ride or ordering your favourite food a breeze!&lt;/p&gt;

&lt;h2 id=&quot;never-forget-your-addresses-again&quot;&gt;Never forget your addresses again!&lt;/h2&gt;

&lt;p&gt;To use the feature, fire up your Grab app, head to the “Saved Places” section on the app navigation bar and start adding all your favourite destinations such as your home, your office, your favourite mall or the airport and you are done with the hassle of typing them again.&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;Save your place with Grab!&quot; src=&quot;/img/save-your-place-with-grab/image6.gif&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Hola! your saved addresses are just a click away to order a ride or your favourite meal.&lt;/p&gt;

&lt;h2 id=&quot;inspiration-behind-the-work&quot;&gt;Inspiration behind the work&lt;/h2&gt;

&lt;p&gt;We at Grab continuously engage with our customers to understand how we can outserve them better. Difficulty in choosing the correct address was one of the key feedback shared by our customers. Our drivers shared funny stories about places that have similar names but outrightly different locations e.g. Sime Road is in Bukit Timah but Simei Road is in Simei almost 20 km away, Nicoll Highway is in Kallang but Nicoll Drive is in Changi almost 20 km away. In this case, even though the users use the address frequently, there remains scope for misselection.&lt;/p&gt;

&lt;h3 id=&quot;data-driven-decisions&quot;&gt;Data-Driven Decisions&lt;/h3&gt;

&lt;p&gt;Our vast repository of data and insights has helped us identify and solve some challenging problems. Our analysis of millions of transport bookings and food orders revealed that customers usually visit five to seven unique locations and order food at one or two addresses.&lt;/p&gt;

&lt;p&gt;One intriguing yet intuitive insight that came out was a set pattern in user’s booking behaviour during weekdays. A set of passengers mostly commute between two addresses, probably going to the office in the morning and coming back home in the evening. These identifiable clusters of pick-up and drop-off locations during peak hours signified our hypothesis of users using a small set of locations for their Grab bookings. The pictures below show such clusters in Singapore and Jakarta where passengers generally commute to and fro in morning and in evening respectively.&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;Save your place with Grab!&quot; src=&quot;/img/save-your-place-with-grab/image2.png&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;This insight also motivated us to test out the concept of user created labels which allows the users to mark their saved places with their own labels like “Home”, “Changi Airport”, “Sis’s House” etc. Initial experiment results were extremely encouraging and we got significantly higher usage and repeat rates from users.&lt;/p&gt;

&lt;p&gt;A group of cross functional teams - Analytics, Product, Design, Engineering etc came together, worked backwards from the customer, brainstormed multiple ideas, and finalised a product approach. We then went on to conduct in depth user research and usability testing to ensure that the final product met user expectations and was easy to understand and use.&lt;/p&gt;

&lt;h2 id=&quot;and-users-love-it&quot;&gt;And users love it!&lt;/h2&gt;

&lt;p&gt;Since the launch, we have seen significant user adoption for the feature. More than 14 Million users have saved close to 45 Million saved places. That’s ~3 places per user!&lt;/p&gt;

&lt;p&gt;Customers from Singapore and Myanmar tend to save around 3 addresses each whereas customers from Indonesia, Malaysia, Philippines, Thailand, Vietnam and Cambodia save 2 addresses each. A customer from Indonesia has saved a whopping 1,191 addresses!&lt;/p&gt;

&lt;p&gt;Users across South East Asia have adopted the feature and as of today, a significant portion of our bookings are made using a saved place for either pickup or drop off. If you were curious, here are the most frequently used labels for saving addresses in Singapore (left) and Indonesia (right):&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;Save your place with Grab!&quot; src=&quot;/img/save-your-place-with-grab/image3.png&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Apart from saving home and office addresses our customers are also saving their child’s school address and places of worship. Some of them are also saving their favourite shopping destinations.&lt;/p&gt;

&lt;p&gt;Another observation, as someone may have guessed, is regarding cluster of home addresses. Home addresses in Singapore are evenly scattered across the island (map on upper left) but the same are concentrated in specific pockets of the city in Jakarta (map on lower left). However office addresses are concentrated in specific areas in both cities - CBD and Changi area in Singapore (map on upper right) and along central Jakarta in Jakarta (map on lower right).&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;Save your place with Grab!&quot; src=&quot;/img/save-your-place-with-grab/image1.png&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h2 id=&quot;this-is-only-the-beginning&quot;&gt;This is only the beginning&lt;/h2&gt;

&lt;p&gt;We’re constantly striving to improve the user experience with Grab and make it as seamless as possible. We have only taken the first steps with Saved Places and the path forward involves deeper understanding of user behaviour with the help of saved places data to create a more personalised experience. This is just the beginning and we’re planning to launch some very innovative features in the coming months.&lt;/p&gt;
</description>
        <pubDate>Thu, 01 Aug 2019 18:43:40 +0000</pubDate>
        <link>https://engineering.grab.com/save-your-place-with-grab</link>
        <guid isPermaLink="true">https://engineering.grab.com/save-your-place-with-grab</guid>
        
        <category>Maps</category>
        
        <category>Data</category>
        
        
        <category>Product</category>
        
      </item>
    
  </channel>
</rss>
