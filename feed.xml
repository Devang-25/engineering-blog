<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Grab Tech</title>
    <description>Grab's Engineering team solves critical transportation challenges and makes transport freedom a reality for 620 million people in Southeast Asia.
</description>
    <link>https://engineering.grab.com/</link>
    <atom:link href="https://engineering.grab.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Wed, 12 Aug 2020 14:03:40 +0000</pubDate>
    <lastBuildDate>Wed, 12 Aug 2020 14:03:40 +0000</lastBuildDate>
    <generator>Jekyll v3.8.4</generator>
    
      <item>
        <title>Go Modules- A guide for monorepos (Part 2)</title>
        <description>&lt;p&gt;This is the second post on the Go module series, which highlights Grab’s experience working with Go modules in a multi-module monorepo. In this article, we’ll focus on suggested solutions for catching unexpected changes to the &lt;code class=&quot;highlighter-rouge&quot;&gt;go.mod&lt;/code&gt; file and addressing dependency issues. We’ll also cover automatic upgrades and other learnings uncovered from the initial obstacles in using Go modules.&lt;/p&gt;

&lt;h2 id=&quot;vendoring-process-issues&quot;&gt;Vendoring process issues&lt;/h2&gt;

&lt;p&gt;Our previous vendoring process fell solely on the developer who wanted to add or update a dependency. However, it was often the case that the developer came across many unexpected changes, due to previous vendoring attempts, accidental imports and changes to dependencies.&lt;/p&gt;

&lt;p&gt;The developer would then have to resolve these issues before being able to make a change, costing time and causing frustration with the process. It became clear that it wasn’t practical to expect the developer to catch all of the potential issues while vendoring, especially since Go modules itself was new and still in development.&lt;/p&gt;

&lt;h2 id=&quot;avoiding-unexpected-changes&quot;&gt;Avoiding unexpected changes&lt;/h2&gt;

&lt;p&gt;Reluctantly, we added a check to our CI process which ran on every merge request. This helped ensure that there are no unexpected changes required to go mod. This added time to every build and often flagged a failure, but it saved a lot of post-merge hassle. We then realized that we should have done this from the beginning.&lt;/p&gt;

&lt;p&gt;Since we hadn’t enabled Go modules for builds yet, we couldn’t rely on the &lt;a href=&quot;https://godoc.org/cmd/go%23hdr-Maintaining_module_requirements&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\mod=readonly&lt;/code&gt;&lt;/a&gt; flag. We implemented the check by running &lt;code class=&quot;highlighter-rouge&quot;&gt;go mod vendor&lt;/code&gt; and then checking the resulting difference.&lt;/p&gt;

&lt;p&gt;If there were any changes to &lt;code class=&quot;highlighter-rouge&quot;&gt;go.mod&lt;/code&gt; or the vendor directory, the merge request would get rejected. This worked well in ensuring the integrity of our &lt;code class=&quot;highlighter-rouge&quot;&gt;go.mod&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;roadblocks-and-learnings&quot;&gt;Roadblocks and learnings&lt;/h2&gt;

&lt;p&gt;However, as this was the first time we were using Go modules on our CI system, it uncovered some more problems.&lt;/p&gt;

&lt;h3 id=&quot;private-repository-access&quot;&gt;Private repository access&lt;/h3&gt;

&lt;p&gt;There was the problem of accessing private repositories. We had to ensure that the CI system was able to clone all of our private repositories as well as the main monorepo, by adding the relevant SSH deploy keys to the repository.&lt;/p&gt;

&lt;h3 id=&quot;false-positives&quot;&gt;False positives&lt;/h3&gt;

&lt;p&gt;The check sometimes fired &lt;code class=&quot;highlighter-rouge&quot;&gt;false positives&lt;/code&gt; - detecting a go mod failure when there were no changes. This was often due to network issues, especially when the modules are hosted by less reliable third-party servers. This is somewhat solved in Go 1.13 onwards with the introduction of &lt;a href=&quot;https://golang.org/cmd/go/%23hdr-Module_downloading_and_verification&quot;&gt;proxy servers&lt;/a&gt;, but our workaround was simply to retry the command several times.&lt;/p&gt;

&lt;p&gt;We also avoided adding dependencies hosted by a domain that we haven’t seen before, unless absolutely necessary.&lt;/p&gt;

&lt;h3 id=&quot;inconsistent-go-versions&quot;&gt;Inconsistent Go versions&lt;/h3&gt;

&lt;p&gt;We found several inconsistencies between Go versions - running go mod vendor on one Go version gave different results to another. One example was a &lt;a href=&quot;https://github.com/golang/go/issues/29278&quot;&gt;change to the checksums&lt;/a&gt;. These inconsistencies are less common now, but still remain between Go 1.12 and later versions. The only solution is to stick to a single version when running the vendoring process.&lt;/p&gt;

&lt;h2 id=&quot;automated-upgrades&quot;&gt;Automated upgrades&lt;/h2&gt;

&lt;p&gt;There are benefits to using Go modules for vendoring. It’s faster than previous solutions, better supported by the community and it’s part of the language, so it doesn’t require any extra tools or wrappers to use it.&lt;/p&gt;

&lt;p&gt;One of the most useful benefits from using Go modules is that it enables automated upgrades of dependencies in the go.mod file - and it becomes more useful as more third-party modules adopt Go modules and semantic versioning.&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;&lt;figure&gt;
  &lt;img src=&quot;/img/go-module-a-guide-for-monorepos-part-2/image1.png&quot; alt=&quot;Automated updates workflow&quot; /&gt;
  &lt;figcaption align=&quot;middle&quot;&gt;&lt;i&gt;Automated updates workflow&lt;/i&gt;&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;We call our solution for automating updates at Grab the AutoVend Bot. It is built around a single Go command, &lt;code class=&quot;highlighter-rouge&quot;&gt;go list -m -u all&lt;/code&gt;, which finds and lists available updates to the dependencies listed in &lt;code class=&quot;highlighter-rouge&quot;&gt;go.mod&lt;/code&gt; (add &lt;code class=&quot;highlighter-rouge&quot;&gt;\json&lt;/code&gt; for JSON output). We integrated the bot with our development workflow and change-request system to take the output from this command and create merge requests automatically, one per update.&lt;/p&gt;

&lt;p&gt;Once the merge request is approved (by a human, after verifying the test results), the bot would push the change. We have hundreds of dependencies in our main monorepo module, so we’ve scheduled it to run a small number each day so we’re not overwhelmed.&lt;/p&gt;

&lt;p&gt;By reducing the manual effort required to update dependencies to almost nothing, we have been able to apply hundreds of updates to our dependencies, and ensure our most critical dependencies are on the latest version. This not only helps keep our dependencies free from bugs and security flaws, but it makes future updates far easier and less impactful by reducing the set of changes needed.&lt;/p&gt;

&lt;h2 id=&quot;in-summary&quot;&gt;In Summary&lt;/h2&gt;

&lt;p&gt;Using Go modules for vendoring has given us valuable and low-risk exposure to the feature. We have been able to detect and solve issues early, without affecting our regular builds, and develop tooling that’ll help us in future.&lt;/p&gt;

&lt;p&gt;Although Go modules is part of the standard Go toolchain, it shouldn’t be viewed as a complete &lt;em&gt;off the shelf&lt;/em&gt; solution that can be dropped into a codebase, especially a monorepo.&lt;/p&gt;

&lt;p&gt;Like many other Go tools, the Modules feature comprises many small, focused tools that work best when combined together with other code. By embracing this concept and leveraging things like go list, go mod graph and go mod vendor, Go modules can be made to integrate into existing workflows, and deliver the benefits of structured versioning and reproducible builds.&lt;/p&gt;

&lt;p&gt;I hope you have enjoyed this article on using Go modules and vendoring within a monorepo.&lt;/p&gt;

&lt;h2 id=&quot;join-us&quot;&gt;Join us&lt;/h2&gt;
&lt;p&gt;Grab is more than just the leading ride-hailing and mobile payments platform in Southeast Asia. We use data and technology to improve everything from transportation to payments and financial services across a region of more than 620 million people. We aspire to unlock the true potential of Southeast Asia and look for like-minded individuals to join us on this ride.&lt;/p&gt;

&lt;p&gt;If you share our vision of driving South East Asia forward, &lt;a href=&quot;https://grab.careers/jobs/&quot;&gt;apply&lt;/a&gt; to join our team today.&lt;/p&gt;

&lt;h4 id=&quot;credits&quot;&gt;Credits&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;The cute Go gopher logo for this blog’s cover image was inspired by Renee French’s original work.&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 12 Aug 2020 10:02:00 +0000</pubDate>
        <link>https://engineering.grab.com/go-module-a-guide-for-monorepos-part-2</link>
        <guid isPermaLink="true">https://engineering.grab.com/go-module-a-guide-for-monorepos-part-2</guid>
        
        <category>go</category>
        
        <category>monorepo</category>
        
        <category>vendoring</category>
        
        <category>vendors</category>
        
        <category>libraries</category>
        
        
        <category>Engineering</category>
        
      </item>
    
      <item>
        <title>The journey of deploying Apache Airflow at Grab</title>
        <description>&lt;p&gt;At Grab, we use &lt;a href=&quot;https://airflow.apache.org&quot;&gt;Apache Airflow&lt;/a&gt; to schedule and orchestrate the ingestion and transformation of data,  train machine learning models, and the copy data between clouds. There are many engineering teams at Grab that use Airflow, each of which originally had their own Airflow instance.&lt;/p&gt;

&lt;p&gt;The proliferation of independently managed Airflow instances resulted in inefficient use of resources, where each team ended up solving the same problems of logging, scaling, monitoring, and more. From this morass came the idea of having a single dedicated team to manage all the Airflow instances for anyone in Grab that wants to use Airflow as a scheduling tool.&lt;/p&gt;

&lt;p&gt;We designed and implemented an Apache Airflow-based scheduling and orchestration platform that currently runs close to 20 Airflow instances for different teams at Grab. Sounds interesting? What follows is a brief history.&lt;/p&gt;

&lt;h2 id=&quot;early-days&quot;&gt;Early days&lt;/h2&gt;

&lt;p&gt;Circa 2018, we were running a few hundred Directed Acyclic Graphs (DAGs) on one Airflow instance in the Data Engineering team. There was no dedicated team to maintain it, and no Airflow expert in our team. We were struggling to maintain our Airflow instance, which was causing many jobs to fail every day. We were facing issues with library management, scaling, managing and syncing artefacts across all Airflow components, upgrading Airflow versions, deployment, rollbacks, etc.&lt;/p&gt;

&lt;p&gt;After a few postmortem reports, we realized that we needed a dedicated team to maintain our Airflow. This was how our Airflow team was born.&lt;/p&gt;

&lt;p&gt;In the initial months, we dedicated ourselves to stabilizing our Airflow environment. During this process, we realized that Airflow has a steep learning curve and requires time and effort to understand and maintain properly. Also, we found that tweaking of Airflow configurations required a thorough understanding of Airflow internals.&lt;/p&gt;

&lt;p&gt;We felt that for the benefit of everyone at Grab, we should leverage what we learned about Airflow to help other teams at Grab; there was no need for anyone else to go through the same struggles we did. That’s when we started thinking about managing Airflow for other teams.&lt;/p&gt;

&lt;p&gt;We talked to the Data Science and Engineering teams who were also running Airflow to schedule their jobs. Almost all the teams were struggling to maintain their Airflow instance. A few teams didn’t have enough technical expertise to maintain their instance. The Data Scientists and Analysts that we spoke to were more than happy to outsource the overhead of Airflow maintenance and wanted to focus more on their Data Science use cases instead.&lt;/p&gt;

&lt;p&gt;We started working with one of the Data Science teams and initiated the discussion to create a dockerized Airflow instance and run it on our Kubernetes cluster.&lt;/p&gt;

&lt;p&gt;We created the Airflow instance and maintained it for them. Later, we were approached by two more teams to help with their Airflow instances. This was the trigger for us to design and create a platform on which we can efficiently manage Airflow instances for different teams.&lt;/p&gt;

&lt;h2 id=&quot;current-state&quot;&gt;Current state&lt;/h2&gt;

&lt;p&gt;As mentioned, we are currently serving close to 20 Airflow instances for various teams on this platform and leverage Apache Airflow to schedule thousands of daily jobs.  Each Airflow instance is currently scheduling 1k to 60k daily jobs. Also, new teams can quickly try out Airflow without worrying about infrastructure and maintenance overhead. Let’s go through the important aspects of this platform such as design considerations, architecture, deployment, scalability, dependency management, monitoring and alerting, and more.&lt;/p&gt;

&lt;h3 id=&quot;design-considerations&quot;&gt;Design considerations&lt;/h3&gt;

&lt;p&gt;The initial step we took towards building our scheduling platform was to define a set of expectations and guidelines around ownership, infrastructure, authentication, common artifacts and CI/CD, to name a few.&lt;/p&gt;

&lt;p&gt;These were the considerations we had in mind:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Deploy containerized Airflow instances on Kubernetes cluster to isolate Airflow instances at the team level. It should scale up and scale out according to usage.&lt;/li&gt;
  &lt;li&gt;Each team can have different sets of jobs that require specific dependencies on the Airflow server.&lt;/li&gt;
  &lt;li&gt;Provide common CI/CD templates to build, test, and deploy Airflow instances. These CI/CD templates should be flexible enough to be extended by users and modified according to their use case.&lt;/li&gt;
  &lt;li&gt;Common plugins, operators, hooks, sensors will be shipped to all Airflow instances. Moreover, each team can have its own plugins, operators, hooks, and sensors.&lt;/li&gt;
  &lt;li&gt;Support LDAP based authentication as it is natively supported by Apache Airflow. Each team can authenticate Airflow UI by their LDAP credentials.&lt;/li&gt;
  &lt;li&gt;Use the Hashicorp Vault to store Airflow specific secrets. Inject these secrets via sidecar in Airflow servers.&lt;/li&gt;
  &lt;li&gt;Use ELK stack to access all application logs and infrastructure logs.&lt;/li&gt;
  &lt;li&gt;Datadog and PagerDuty will be used for monitoring and alerting.&lt;/li&gt;
  &lt;li&gt;Ingest job statistics such as total number of jobs scheduled, no of failed jobs, no of successful jobs, active DAGs, etc. into the data lake and will be accessible via Presto.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;post-image-section&quot;&gt;&lt;figure&gt;
  &lt;img src=&quot;/img/the-journey-of-deploying-apache-airflow-at-Grab/image2.png&quot; alt=&quot;Architecture diagram&quot; /&gt;
  &lt;figcaption align=&quot;middle&quot;&gt;&lt;i&gt;Architecture diagram&lt;/i&gt;&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/div&gt;

&lt;h3 id=&quot;infrastructure-management&quot;&gt;Infrastructure management&lt;/h3&gt;

&lt;p&gt;Initially, we started deploying Airflow instances on  Kubernetes clusters managed via &lt;a href=&quot;https://github.com/kubernetes/kops&quot;&gt;Kubernetes Operations (KOPS)&lt;/a&gt;. Later, we migrated to Amazon EKS to reduce the overhead of managing the Kubernetes control plane. Each Kubernetes namespace deploys one Airflow instance.&lt;/p&gt;

&lt;p&gt;We chose Terraform to manage infrastructure as code. We deployed each Airflow instance using Terraform modules, which include a &lt;strong&gt;helm_release&lt;/strong&gt; Terraform resource on top of our customized Airflow Helm Chart.&lt;/p&gt;

&lt;p&gt;Each Airflow instance connects to its own Redis and RDS. RDS is responsible for storing Airflow metadata and Redis is acting as a celery broker between Airflow scheduler and Airflow workers.&lt;/p&gt;

&lt;p&gt;The Hashicorp Vault is used to store secrets required by Airflow instances and injected via sidecar by each Airflow component. The ELK stack stores all logs related to Airflow instances and is used for troubleshooting any instance. Datadog, Slack, and PagerDuty are used to send alerts.&lt;/p&gt;

&lt;p&gt;Presto is used to access job statistics, such as numbers on scheduled jobs, failed jobs, successful jobs, and active DAGs, to help each team to analyze their usage and stability of their jobs.&lt;/p&gt;

&lt;h3 id=&quot;doing-things-at-scale&quot;&gt;Doing things at scale&lt;/h3&gt;

&lt;p&gt;There are two kinds of scaling we need to talk about:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;scaling of Airflow instances on a resource level handling different loads&lt;/li&gt;
  &lt;li&gt;scaling in terms of teams served on the platform&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To scale Airflow instances, we set the request and the limit of each Airflow component allowing any of the components to scale up easily. To scale out Airflow workers, we decided to enable the horizontal pod autoscaler (HPA) using Memory and CPU parameters. The cluster autoscaler on EKS helps in scaling the platform to accommodate more teams.&lt;/p&gt;

&lt;p&gt;Moreover, we categorized all our Airflow instances in three sizes (small, medium, and large) to efficiently use the resources. This was based on how many hourly/daily jobs it scheduled. Each Airflow instance type has a specific RDS instance type and storage, Redis instance type and CPU and memory, request/limit for scheduler, worker, web server, and flower. There are different Airflow configurations for each instance type to optimize the given resources to the Airflow instance.&lt;/p&gt;

&lt;h3 id=&quot;airflow-image-and-version-management&quot;&gt;Airflow image and version management&lt;/h3&gt;

&lt;p&gt;The Airflow team builds and releases one common base Docker image for each Airflow version. The base image has Airflow installed with specific versions, as well as common Python packages, plugins, helpers, tests, patches, and so on.&lt;/p&gt;

&lt;p&gt;Each team has their customized Docker image on top of the base image. In their customized Docker image, they can update the Python packages and can download other artifacts that they require. Each Airflow instance will be deployed using the team’s customized image.&lt;/p&gt;

&lt;p&gt;There are common CI/CD templates provided by the Airflow team to build the customized image, run unit tests, and deploy Airflow instances from their GitLab pipeline.&lt;/p&gt;

&lt;p&gt;To upgrade the Airflow version, the Airflow team reviews and studies the changelog of the released Airflow version, note down the important features and its impacts, open issues, bugs, and workable solutions. Later, we build and release the base Docker image using the new Airflow version.&lt;/p&gt;

&lt;p&gt;We support only one Airflow version for all Airflow instances to have less maintenance overhead. In the case of minor or major versions, we support one old and new versions until the retirement period.&lt;/p&gt;

&lt;h3 id=&quot;how-do-we-deploy&quot;&gt;How do we deploy&lt;/h3&gt;

&lt;p&gt;There is a deployment ownership guideline that explains the schedule of deployments and the corresponding PICs. All teams have agreed on this guideline and share the responsibility with the Airflow Team.&lt;/p&gt;

&lt;p&gt;There are two kinds of deployment:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;DAG deployment&lt;/strong&gt;: This is part of the common GitLab CI/CD template. The Airflow team doesn’t trigger the DAG deployment, it’s fully owned by the teams.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Airflow instance deployment&lt;/strong&gt;: The Airflow instance deployment is required in these scenarios:
    &lt;ol&gt;
      &lt;li&gt;update in base Docker image&lt;/li&gt;
      &lt;li&gt;add/update in Python packages by any team&lt;/li&gt;
      &lt;li&gt;customization in the base image by any team&lt;/li&gt;
      &lt;li&gt;change in Airflow configurations&lt;/li&gt;
      &lt;li&gt;change in the resource of scheduler, worker, web server or flower&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;base-docker-image-update&quot;&gt;Base Docker image update&lt;/h4&gt;

&lt;p&gt;The Airflow team maintains the base Docker image on the AWS Elastic Container Registry. The GitLab CI/CD builds the updated base image whenever the Airflow team changes the base image. The base image is validated by automated deployment on the test environment and automated smoke test. The Airflow instance owner of each team needs to trigger their build and deployment pipeline to apply the base image changes on their Airflow instance.&lt;/p&gt;

&lt;h4 id=&quot;python-package-additions-or-updates&quot;&gt;Python package additions or updates&lt;/h4&gt;

&lt;p&gt;Each team can add or update their Python dependencies. The Gitlab CI/CD pipeline builds a new image with updated changes. The Airflow instance owner manually triggers the deployment from their CI/CD pipeline. There is a flag to make it automated deployment as well.&lt;/p&gt;

&lt;h4 id=&quot;based-image-customization&quot;&gt;Based image customization&lt;/h4&gt;

&lt;p&gt;Each team can add any customizations on the base image. Similar to the above scenario, the Gitlab CI/CD pipeline builds a new image with updated changes. The Airflow instance owner manually triggers the deployment from their CI/CD pipeline. To automate the deployment, a flag is made available.&lt;/p&gt;

&lt;h4 id=&quot;configuration-airflow-and-airflow-component-resource-changes&quot;&gt;Configuration Airflow and Airflow component resource changes&lt;/h4&gt;

&lt;p&gt;To optimize the Airflow instances, the Airflow Team makes changes to the Airflow configurations and resources of any of the Airflow components. The Airflow configurations and resources are also part of the Terraform code. Atlantis (&lt;a href=&quot;https://www.runatlantis.io/&quot;&gt;https://www.runatlantis.io/&lt;/a&gt;) deploys the Airflow instances with Terraform changes.&lt;/p&gt;

&lt;p&gt;There is no downtime in any form of deployment and doesn’t impact the running tasks and the Airflow UI.&lt;/p&gt;

&lt;h3 id=&quot;testing&quot;&gt;Testing&lt;/h3&gt;

&lt;p&gt;During the process of making our first Airflow stable, we started exploring testing in Airflow. We wanted to validate the correctness of DAGs, duplicate DAG IDs, checking typos and cyclicity in DAGs, etc. We then later wrote the tests by ourselves and published a detailed blog in several channels: &lt;a href=&quot;https://blog.usejournal.com/testing-in-airflow-part-1-dag-validation-tests-dag-definition-tests-and-unit-tests-2aa94970570c&quot;&gt;usejournal (part1)&lt;/a&gt; and &lt;a href=&quot;https://medium.com/@chandukavar/testing-in-airflow-part-2-integration-tests-and-end-to-end-pipeline-tests-af0555cd1a82&quot;&gt;medium (part2)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;These tests are available in the base image and run in the GitLab pipeline from the user’s repository to validate their DAGs. The unit tests run using the common GitLab CI/CD template provided by the Airflow team.&lt;/p&gt;

&lt;h3 id=&quot;monitoring--alerting&quot;&gt;Monitoring &amp;amp; alerting&lt;/h3&gt;

&lt;p&gt;Our scheduling platform runs the Airflow instance for many critical jobs scheduled by each team. It’s important for us to monitor all Airflow instances and alert respective stakeholders in case of any failure.&lt;/p&gt;

&lt;p&gt;We use a Datadog for monitoring and alerting. To create a common Datadog dashboard, it is required to pass tags with metrics from Airflow and till Airflow 1.10.x, it doesn’t support tagging to Datadog metrics.&lt;/p&gt;

&lt;p&gt;We have contributed to the community to enable Datadog support and it will be released in Airflow 2.0.0 (&lt;a href=&quot;https://github.com/apache/airflow/pull/7376&quot;&gt;https://github.com/apache/Airflow/pull/7376&lt;/a&gt;). We internally patched this pull request and created the common Datadog dashboard.&lt;/p&gt;

&lt;p&gt;There are three categories of metrics that we are interested in:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;EKS cluster metrics&lt;/strong&gt;: It includes total In-Service Nodes, allocated CPU cores, allocated Memory, Node status, CPU/Memory request vs limit, Node disk and Memory pressure, Rx-Tx packets dropped/errors, etc.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Host Metrics&lt;/strong&gt;: These metrics are for each host participating in the EKS cluster. It includes Host CPU/Memory utilization, Host free memory, System disk, and EBS IOPS, etc.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Airflow instance metrics&lt;/strong&gt;: These metrics are for each Airflow instance. It includes scheduler heartbeats, DagBag size, DAG processing import errors, DAG processing time, open/used slots in a pool, each pod’s Memory/CPU usage, CPU and Memory utilization of metadata DB, database connections as well as the number of workers, active/paused DAGs, successful/failed/queued/running tasks, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;post-image-section&quot;&gt;&lt;figure&gt;
  &lt;img src=&quot;/img/the-journey-of-deploying-apache-airflow-at-Grab/image1.png&quot; alt=&quot;Sample Datadog dashboard&quot; /&gt;
  &lt;figcaption align=&quot;middle&quot;&gt;&lt;i&gt;Sample Datadog dashboard&lt;/i&gt;&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;We alert respective stakeholders and oncalls using Slack and PagerDuty.&lt;/p&gt;

&lt;h3 id=&quot;benefits&quot;&gt;Benefits&lt;/h3&gt;

&lt;p&gt;These are the benefits of having our own Scheduling Platform:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Scaling&lt;/strong&gt;: HPA on Airflow workers running on EKS with autoscaler helps Airflow workers to scale automatically to theoretically infinite scale. This enables teams to run thousands of DAGs.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Logging&lt;/strong&gt;: Centralized logging using Kibana.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Better Isolation&lt;/strong&gt;: Separate Docker images for each team provide better isolation.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Better Customization&lt;/strong&gt;: All teams are provided with a mechanism to customize their Airflow worker environment according to their requirements.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Zero Downtime&lt;/strong&gt;: Rolling upgrade and termination period on Airflow workers helps in zero downtime during the deployment.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Efficient usage of infrastructure&lt;/strong&gt;: Each team doesn’t need to allocate infrastructure for Airflow instances. All Airflow instances are deployed on one shared EKS cluster.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Less maintenance overhead for users&lt;/strong&gt;:  Users can focus on their core work and don’t need to spend time maintaining Airflow instances and it’s resources.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Common plugins and helpers&lt;/strong&gt;: All common plugins and helpers available to use on Airflow instances. Each team doesn’t need to add.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Designing and implementing our own scheduling platform started with many challenges and unknowns. We were not sure about the scale we were aiming for, the heterogeneous workload from each team, or the level of triviality or complexity we were going to be faced. After two years, we have successfully built and productionized a scalable scheduling platform that helps teams at Grab to schedule their workload.&lt;/p&gt;

&lt;p&gt;We have many failure stories, odd things we ran into, hacks and workarounds we patched. But, we went through it and provided a cost-effective and scalable scheduling platform with low maintenance overhead to all teams at Grab.&lt;/p&gt;

&lt;h2 id=&quot;whats-next&quot;&gt;What’s Next&lt;/h2&gt;

&lt;p&gt;Moving ahead, we will be exploring to add the following capabilities:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;REST APIs to enable teams to access their Airflow instance programmatically and have better integration with other tools and frameworks.&lt;/li&gt;
  &lt;li&gt;Support of dynamic DAGs at scale to help in decreasing the DAG maintenance overhead.&lt;/li&gt;
  &lt;li&gt;Template-based engine to act as a middle layer between the scheduling platform and external systems. It will have a set of templates to generate DAGs which helps in better integration with the external system.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We suggest anyone who is running multiple Airflow instances within different teams to look at this approach and build the centralized scheduling platform. Before you begin,  review the feasibility of building the centralized platform as it requires a vision, a lot of effort, and cross-communication with many teams.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;small class=&quot;credits&quot;&gt;Authored by Chandulal Kavar on behalf of the Airflow team at Grab - Charles Martinot, Vinson Lee, Akash Sihag, Piyush Gupta, Pramiti Goel, Dewin Goh, QuiHieu Nguyen, James Anh-Tu Nguyen, and the Data Engineering Team.&lt;/small&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;join-us&quot;&gt;Join us&lt;/h2&gt;

&lt;p&gt;Grab is more than just the leading ride-hailing and mobile payments platform in Southeast Asia. We use data and technology to improve everything from transportation to payments and financial services across a region of more than 620 million people. We aspire to unlock the true potential of Southeast Asia and look for like-minded individuals to join us on this ride.&lt;/p&gt;

&lt;p&gt;If you share our vision of driving South East Asia forward, &lt;a href=&quot;https://grab.careers/jobs/&quot;&gt;apply&lt;/a&gt; to join our team today.&lt;/p&gt;
</description>
        <pubDate>Tue, 14 Jul 2020 10:34:40 +0000</pubDate>
        <link>https://engineering.grab.com/the-journey-of-deploying-apache-airflow-at-Grab</link>
        <guid isPermaLink="true">https://engineering.grab.com/the-journey-of-deploying-apache-airflow-at-Grab</guid>
        
        <category>engineering</category>
        
        <category>data pipelines</category>
        
        <category>scheduling</category>
        
        <category>airflow</category>
        
        <category>kubernetes</category>
        
        <category>platform</category>
        
        
        <category>Engineering</category>
        
      </item>
    
      <item>
        <title>How we built our in-house chat platform for the web</title>
        <description>&lt;p&gt;At Grab, we’ve built an in-house chat platform to help connect our passengers with drivers during a booking, as well as with their friends and family for social sharing purposes.&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;&lt;figure&gt;
  &lt;img src=&quot;/img/how-we-built-our-in-house-chat-platform-for-the-web/image6.png&quot; alt=&quot;P2P chat for the Angbow campaign and GrabHitch chat&quot; /&gt;
  &lt;figcaption align=&quot;middle&quot;&gt;&lt;i&gt;P2P chat for the Angbow campaign and GrabHitch chat&lt;/i&gt;&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;We wanted to focus on our customer support chat experience, and so we replaced the third-party live chat tool that we’ve used for years with our newly developed chat platform. As a part of this initiative, we extended this platform for the web to integrate with our internal Customer Support portal.&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;&lt;figure&gt;
  &lt;img src=&quot;/img/how-we-built-our-in-house-chat-platform-for-the-web/image3.png&quot; alt=&quot;Sample chat between a driver and a customer support agent&quot; /&gt;
  &lt;figcaption align=&quot;middle&quot;&gt;&lt;i&gt;Sample chat between a driver and a customer support agent&lt;/i&gt;&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;This is the first time we introduced chat on the web, and we faced a few challenges while building it. In this article, we’ll go over some of these challenges and how we solved them.&lt;/p&gt;

&lt;h2 id=&quot;current-architecture&quot;&gt;Current Architecture&lt;/h2&gt;

&lt;p&gt;A vast majority of the communication from our Grab Passenger and Driver apps happens via TCP. Our TCP gateway takes care of processing all the incoming messages, authenticating, and routing them to the respective services. Our TCP connections are unicast, which means there is only one active connection possible per user at any point in time. This served us well, as we only allow our users to log in from one device at a time.&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;&lt;figure&gt;
  &lt;img src=&quot;/img/how-we-built-our-in-house-chat-platform-for-the-web/image2.png&quot; alt=&quot;A TL;DR version of our current system&quot; /&gt;
  &lt;figcaption align=&quot;middle&quot;&gt;&lt;i&gt;A TL;DR version of our current system&lt;/i&gt;&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;However, this model breaks on the web since our users can have multiple tabs open at the same time, and each would establish a new socket connection. Due to the unicast nature of our TCP connections, the older tabs would get disconnected and wouldn’t receive any messages from our servers. Our Customer Support agents love their tabs and have a gazillion open at any time. This behaviour would be too disruptive for them.&lt;/p&gt;

&lt;p&gt;The obvious answer was to change our TCP connection strategy to multicast. We took a look at this and quickly realised that it was going to be a huge undertaking and could introduce a lot of unknowns for us to deal with.&lt;/p&gt;

&lt;p&gt;We had to consider a different approach for the web and zeroed in on a hybrid approach with a little known Javascript APIs called &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/SharedWorker&quot;&gt;SharedWorker&lt;/a&gt; and &lt;a href=&quot;https://developers.google.com/web/updates/2016/09/broadcastchannel&quot;&gt;BroadcastChannel&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;understanding-the-basics&quot;&gt;Understanding the basics&lt;/h2&gt;

&lt;p&gt;Before we jump in, let’s take a quick detour to review some of the terminologies that we’ll be using in this post.&lt;/p&gt;

&lt;p&gt;If you’re familiar with how WebWorker works, feel free to skip ahead to the next section. For the uninitiated, JavaScript on the browser runs in a single-threaded environment. Workers are a mechanism to introduce background, OS-level threads in the browser. Creating a worker in JavaScript is simple. Let’s look at it with an example:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//instantiate a worker&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;worker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;WebWorker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./worker.js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;worker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;postMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Ping&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;worker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Message from the worker&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// and in  worker.js&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;onMessage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;postMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;pong&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The worker API comes with a handy &lt;code class=&quot;highlighter-rouge&quot;&gt;postMessage&lt;/code&gt; method which can be used to pass messages between the main thread and worker thread. Workers are a great way to add concurrency in a JavaScript application and help in speeding up an expensive process in the background.&lt;/p&gt;

&lt;p&gt;Note: While the method looks similar, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;worker.postMessage&lt;/code&gt;&lt;/a&gt; is not the same as &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;window.postMessage&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;what-is-a-sharedworker&quot;&gt;What is a SharedWorker?&lt;/h3&gt;

&lt;p&gt;SharedWorker is similar to a WebWorker and spawns an OS thread, but as the name indicates, it’s shared across browser contexts. In other words, there is only one instance of that worker running for that domain across tabs/windows. The API is similar to WebWorker but has a few subtle differences.&lt;/p&gt;

&lt;p&gt;SharedWorkers internally use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/MessagePort&quot;&gt;MessagePort&lt;/a&gt; to pass messages between the worker thread and the main thread. There are two ports- one for sending a message to the main thread and the other to receive. Let’s explore it with an example:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mySharedWorker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SharedWorker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./worker.js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;mySharedWorker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;mySharedWorker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;postMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;onconnect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Handle messages from the main thread&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onmessage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handleEventFromMainThread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Message from the main thread&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handleEventFromMainThread&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;I received&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;from the main thread&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sendEventToMainThread&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;connections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;postMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There is a lot to unpack here. Once a SharedWorker is created, we’ve to manually start the port using &lt;code class=&quot;highlighter-rouge&quot;&gt;mySharedWorker.port.start()&lt;/code&gt; to establish a connection between the script running on the main thread and the worker thread. Post that, messages can be passed via the worker’s &lt;code class=&quot;highlighter-rouge&quot;&gt;postMessage&lt;/code&gt; method. On the worker side, there is an &lt;code class=&quot;highlighter-rouge&quot;&gt;onconnect&lt;/code&gt; callback which helps in setting up listeners for connections from each browser context.&lt;/p&gt;

&lt;p&gt;Under the hood, SharedWorker spawns a single OS thread per worker script per domain. For instance, if the script name is &lt;code class=&quot;highlighter-rouge&quot;&gt;worker.js&lt;/code&gt; running in the domain &lt;code class=&quot;highlighter-rouge&quot;&gt;https://ce.grab.com&lt;/code&gt;. The logic inside &lt;code class=&quot;highlighter-rouge&quot;&gt;worker.js&lt;/code&gt; runs &lt;em&gt;exactly once&lt;/em&gt; in this domain. The advantage of this approach is that we can run multiple worker scripts in the same-origin each managing a different part of the functionality. This was one of the key reasons why we picked SharedWorker over other solutions.&lt;/p&gt;

&lt;h3 id=&quot;what-are-broadcast-channels&quot;&gt;What are Broadcast channels&lt;/h3&gt;

&lt;p&gt;In a multi-tab environment, our users may send messages from any of the tabs and switch to another for the next message. For a seamless experience, we need to ensure that the state is in sync across all the browser contexts.&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;&lt;figure&gt;
  &lt;img src=&quot;/img/how-we-built-our-in-house-chat-platform-for-the-web/image1.png&quot; alt=&quot;Message passing across tabs&quot; /&gt;
  &lt;figcaption align=&quot;middle&quot;&gt;&lt;i&gt;Message passing across tabs&lt;/i&gt;&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;BroadcastChannel&lt;/code&gt; API creates a message bus that allows us to pass messages between multiple browser contexts within the same origin. This helps us sync the message that’s being sent on the client to all the open tabs.&lt;/p&gt;

&lt;p&gt;Let’s explore the API with a code example:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;channel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BroadcastChannel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;chat_messages&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Sets up an event listener to receive messages from other browser contexts&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onmessage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Received &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sendMessage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;new_message&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Publish event to all browser contexts listening on the chat\_messages channel&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;postMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;off&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// clear event listeners&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;One thing to note here is that communication is restricted to listeners from the same origin.&lt;/p&gt;

&lt;h2 id=&quot;how-are-our-chat-rooms-powered&quot;&gt;How are our chat rooms powered&lt;/h2&gt;

&lt;p&gt;Now that we have a basic understanding of how SharedWorker and Broadcast channels work, let’s take a peek into how Grab is using it.&lt;/p&gt;

&lt;p&gt;Our Chat SDK abstracts the calls to the worker and the underlying transport mechanism. On the surface, the interface just exposes two methods: one for sending a message and another for listening to incoming events from the server.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;IChatSDK&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;sendMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ChatMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;sendReadReceipt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;receiptAck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MessageReceiptACK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ICallBack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;off&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;topic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SDKTopics&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The SDK does all the heavy lifting to manage the connection with our TCP service, and keeping the information in-sync across tabs.&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;&lt;figure&gt;
  &lt;img src=&quot;/img/how-we-built-our-in-house-chat-platform-for-the-web/image5.png&quot; alt=&quot;SDK flow&quot; /&gt;
  &lt;figcaption align=&quot;middle&quot;&gt;&lt;i&gt;SDK flow&lt;/i&gt;&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;In our worker, we additionally maintain all the connections from browser contexts. When an incoming event arrives from the socket, we publish it to the first active connection. Our SDK listens to this event, processes it, sends out an acknowledgment to the server, and publishes it in the BroadcastChannel. Let’s look at how we’ve achieved this via a code example.&lt;/p&gt;

&lt;p&gt;Managing connections in the worker:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;instances&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;connections&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;URI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Called when a  new worker is connected.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Worker is created at&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;onconnect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

 &lt;span class=&quot;nx&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
 &lt;span class=&quot;nx&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onmessage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handleEventFromMainThread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;nx&quot;&gt;connections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;nx&quot;&gt;instances&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Publish ONLY to the first connection.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Let the caller decide on how to sync this with other tabs&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;topic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;connections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;postMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;topic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

 &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handleEventFromMainThread&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;topic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SocketTopics&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;CONNECT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;c1&quot;&gt;// Establishes a WebSocket connection with the server&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;socket&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SocketManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({...})&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SocketTopics&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CONNECTED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SocketTopics&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;CLOSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;connections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;instances&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;connections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;splice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;instances&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Forward everything else to the server&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sendMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And in the ChatSDK:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Implements IChatSDK&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Rough outline of our GrabChat implementation&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;GrabChatSDK&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;channel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BroadcastChannel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'incoming_events'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onmessage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Handle events from other tabs&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// .....&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;worker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SharedWorker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./worker'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'module'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appEnv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;credentials&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'include'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;worker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// Publish a connected event, so the worker manager can register this connection&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;worker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;postMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;topic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SocketTopics&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CONNECT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// Incoming event from the shared worker&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;worker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onmessage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_handleIncomingMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// Disconnect this port before tab closes&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'beforeunload'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_disconnect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;sendMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// Attempt a delivery of the message&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;worker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;postMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;topic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SocketTopics&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;NEW_MESSAGE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;getPayload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// Send the message to all tabs to keep things in sync&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;postMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getPayload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Hit if this connection is the leader of the SharedWorker connection&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;_handleIncomingMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// Send an ACK to our servers confirming receipt of the message&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;worker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;postMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;topic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SocketTopics&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ACK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;shouldBroadcast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;postMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;_disconnect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;worker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;postMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;removeEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'beforeunload'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_disconnect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This ensures that there is only one connection between our application and the TCP service irrespective of the number of tabs the page is open in.&lt;/p&gt;

&lt;h2 id=&quot;some-caveats&quot;&gt;Some caveats&lt;/h2&gt;

&lt;p&gt;While SharedWorker is a great way to enforce singleton objects across browser contexts, the developer experience of SharedWorker leaves a lot to be desired. There aren’t many resources on the web, and it could be quite confusing if this is the first time you’re using this feature.&lt;/p&gt;

&lt;p&gt;We faced some trouble integrating SharedWorker with bundling the worker code along. This plugin from &lt;a href=&quot;https://github.com/GoogleChromeLabs/worker-plugin&quot;&gt;GoogleChromeLabs&lt;/a&gt; did a great job of alleviating some pain. Debugging an issue with SharedWorker was not obvious. Chrome has a dedicated page for inspecting SharedWorkers (&lt;code class=&quot;highlighter-rouge&quot;&gt;chrome://inspect/#workers&lt;/code&gt;), and it took some getting used to.&lt;/p&gt;

&lt;p&gt;The browser support for SharedWorker is &lt;a href=&quot;https://caniuse.com/sharedworkers&quot;&gt;far from universal&lt;/a&gt;. While it works great in Chrome, Firefox, and Opera, Safari and most mobile browsers lack support. This was an acceptable trade-off in our use case, as we built this for an internal portal and all our users are on Chrome.&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;&lt;figure&gt;
  &lt;img src=&quot;/img/how-we-built-our-in-house-chat-platform-for-the-web/image4.png&quot; alt=&quot;Shared race&quot; /&gt;
  &lt;figcaption align=&quot;middle&quot;&gt;&lt;i&gt;Shared race&lt;/i&gt;&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;SharedWorker enforces uniqueness using a combination of origin and the script name. This could potentially introduce an unintentional race condition during deploy times if we’re not careful. Let’s say the user has a tab open before the latest deployment, and another one after deployment, it’s possible to end up with two different versions of the same script. We built a wrapper over the SharedWorker which cedes control to the latest connection, ensuring that there is only one version of the worker active.&lt;/p&gt;

&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;

&lt;p&gt;We’re happy to have shared our learnings from building our in-house chat platform for the web, and we hope you found this post helpful. We’ve built the web solution as a reusable SDK for our internal portals and public-facing websites for quick and easy integration, providing a powerful user experience.&lt;/p&gt;

&lt;p&gt;We hope this post also helped you get a deeper sense of how SharedWorker and BroadcastChannels work in a production application.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;small class=&quot;credits&quot;&gt;Authored By Vasu on behalf of the Real-Time Communications team at Grab. Special thanks to the working team for their contributions- Sanket Thanvi, Dinh Duong,  Kevin Lee, and Matthew Yeow.&lt;/small&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;join-us&quot;&gt;Join us&lt;/h2&gt;

&lt;p&gt;Grab is more than just the leading ride-hailing and mobile payments platform in Southeast Asia. We use data and technology to improve everything from transportation to payments and financial services across a region of more than 620 million people. We aspire to unlock the true potential of Southeast Asia and look for like-minded individuals to join us on this ride.&lt;/p&gt;

&lt;p&gt;If you share our vision of driving South East Asia forward, &lt;a href=&quot;https://grab.careers/jobs/&quot;&gt;apply&lt;/a&gt; to join our team today.&lt;/p&gt;
</description>
        <pubDate>Mon, 29 Jun 2020 14:34:40 +0000</pubDate>
        <link>https://engineering.grab.com/how-we-built-our-in-house-chat-platform-for-the-web</link>
        <guid isPermaLink="true">https://engineering.grab.com/how-we-built-our-in-house-chat-platform-for-the-web</guid>
        
        <category>chat</category>
        
        <category>web</category>
        
        <category>customer support</category>
        
        <category>engineering</category>
        
        
        <category>Engineering</category>
        
      </item>
    
      <item>
        <title>Go Modules- A guide for monorepos (Part 1)</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://github.com/golang/go/wiki/Modules%23quick-start&quot;&gt;Go modules&lt;/a&gt; are a new feature in Go for versioning packages and managing dependencies. It has been almost 2 years in the making, and it’s finally production-ready in the Go 1.14 release early this year. Go recommends using single-module repositories by default, and warns that multi-module repositories require great care.&lt;/p&gt;

&lt;p&gt;At Grab, we have a large monorepo and changing from our existing monorepo structure has been an interesting and humbling adventure. We faced serious obstacles to fully adopting Go modules. This series of articles describes Grab’s experience working with Go modules in a multi-module monorepo, the challenges we faced along the way, and the solutions we came up with.&lt;/p&gt;

&lt;p&gt;To fully appreciate Grab’s journey in using Go Modules, it’s important to learn about the beginning of our vendoring process.&lt;/p&gt;

&lt;h2 id=&quot;native-support-for-vendoring-using-the-vendor-folder&quot;&gt;Native support for vendoring using the vendor folder&lt;/h2&gt;

&lt;p&gt;With Go 1.5 came the concept of the &lt;code class=&quot;highlighter-rouge&quot;&gt;vendor&lt;/code&gt; folder, a new package discovery method, providing native support for vendoring in Go for the first time.&lt;/p&gt;

&lt;p&gt;With the &lt;code class=&quot;highlighter-rouge&quot;&gt;vendor&lt;/code&gt; folder, projects influenced the lookup path simply by copying packages into a &lt;code class=&quot;highlighter-rouge&quot;&gt;vendor&lt;/code&gt; folder nested at the project root. Go uses these packages before traversing the &lt;code class=&quot;highlighter-rouge&quot;&gt;GOPATH&lt;/code&gt; root, which allows a monorepo structure to vendor packages within the same repo as if they were 3rd-party libraries. This enabled &lt;code class=&quot;highlighter-rouge&quot;&gt;go build&lt;/code&gt; to work consistently without any need for extra scripts or env var modifications.&lt;/p&gt;

&lt;h3 id=&quot;initial-obstacles&quot;&gt;Initial obstacles&lt;/h3&gt;

&lt;p&gt;There was no official command for managing the &lt;code class=&quot;highlighter-rouge&quot;&gt;vendor&lt;/code&gt; folder, and even copying the files in the &lt;code class=&quot;highlighter-rouge&quot;&gt;vendor&lt;/code&gt; folder manually was common.&lt;/p&gt;

&lt;p&gt;At Grab, different teams took different approaches. This meant that we had multiple version manifests and lock files for our monorepo’s vendor folder. It worked fine as long as there were no conflicts. At this time very few 3rd-party libraries were using proper tagging and semantic versioning, so it was worse because the lock files were largely a jumble of commit hashes and timestamps.&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;&lt;figure&gt;
  &lt;img src=&quot;/img/go-module-a-guide-for-monorepos-part-1/image2.png&quot; alt=&quot;Jumbled commit hashes and timestamps&quot; /&gt;
  &lt;figcaption align=&quot;middle&quot;&gt;&lt;i&gt;Jumbled commit hashes and timestamps&lt;/i&gt;&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;As a result of the multiple versions and lock files, the vendor directory was not reproducible, and we couldn’t be sure what versions we had in there.&lt;/p&gt;

&lt;h3 id=&quot;temporary-relief&quot;&gt;Temporary relief&lt;/h3&gt;

&lt;p&gt;We eventually settled on using &lt;a href=&quot;https://github.com/Masterminds/glide&quot;&gt;Glide&lt;/a&gt;, and standardized our vendoring process. Glide gave us a reproducible, verifiable &lt;code class=&quot;highlighter-rouge&quot;&gt;vendor&lt;/code&gt; folder for our dependencies, which worked up until we switched to Go modules.&lt;/p&gt;

&lt;h2 id=&quot;vendoring-using-go-modules&quot;&gt;Vendoring using Go modules&lt;/h2&gt;

&lt;p&gt;I first heard about Go modules from Russ Cox’s talk at &lt;a href=&quot;https://2018.gophercon.sg&quot;&gt;GopherCon Singapore&lt;/a&gt; in 2018, and soon after started working on adopting modules at Grab, which was to manage our existing &lt;code class=&quot;highlighter-rouge&quot;&gt;vendor&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;This allowed us to align with the official Go toolchain and familiarise ourselves with Go modules while the feature matured.&lt;/p&gt;

&lt;h3 id=&quot;switching-to-go-mod&quot;&gt;Switching to go mod&lt;/h3&gt;

&lt;p&gt;Go modules introduced a &lt;code class=&quot;highlighter-rouge&quot;&gt;go mod vendor&lt;/code&gt; command for exporting all dependencies from &lt;code class=&quot;highlighter-rouge&quot;&gt;go.mod&lt;/code&gt; into &lt;code class=&quot;highlighter-rouge&quot;&gt;vendor&lt;/code&gt;. We didn’t plan to enable Go modules for builds at this point, so our builds continued to run exactly as before, indifferent to the fact that the vendor directory was created using &lt;code class=&quot;highlighter-rouge&quot;&gt;go mod&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The initial task to switch to &lt;code class=&quot;highlighter-rouge&quot;&gt;go mod vendor&lt;/code&gt; was relatively straightforward as listed here:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Generated a &lt;code class=&quot;highlighter-rouge&quot;&gt;go.mod&lt;/code&gt; file from our &lt;code class=&quot;highlighter-rouge&quot;&gt;glide.yaml&lt;/code&gt; dependencies. This was scripted so it could be kept up to date without manual effort.&lt;/li&gt;
  &lt;li&gt;Replaced the vendor directory.&lt;/li&gt;
  &lt;li&gt;Committed the changes.&lt;/li&gt;
  &lt;li&gt;Used &lt;code class=&quot;highlighter-rouge&quot;&gt;go mod&lt;/code&gt; instead of glide to manage the vendor folder.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The change was extremely large (due to differences in how glide and &lt;code class=&quot;highlighter-rouge&quot;&gt;go mod&lt;/code&gt; handled the pruning of unused code), but equivalent in terms of Go code. However, there were some additional changes needed besides porting the version file.&lt;/p&gt;

&lt;h3 id=&quot;addressing-incompatible-dependencies&quot;&gt;Addressing incompatible dependencies&lt;/h3&gt;

&lt;p&gt;Some of our dependencies were not yet compatible with Go modules, so we had to use Go module’s replace directive to substitute them with a working version.&lt;/p&gt;

&lt;p&gt;A more complex issue was that parts of our codebase relied on nested vendor directories, and had dependencies that were incompatible with the top level. The &lt;code class=&quot;highlighter-rouge&quot;&gt;go mod vendor&lt;/code&gt; command attempts to include all code nested under the root path, whether or not they have used a sub-vendor directory, so this led to conflicts.&lt;/p&gt;

&lt;h4 id=&quot;problematic-paths&quot;&gt;Problematic paths&lt;/h4&gt;

&lt;p&gt;Rather than resolving all the incompatibilities, which would’ve been a major undertaking in the monorepo, we decided to exclude these paths from Go modules instead. This was accomplished by &lt;a href=&quot;https://github.com/golang/go/wiki/Modules%23can-an-additional-gomod-exclude-unnecessary-content-do-modules-have-the-equivalent-of-a-gitignore-file&quot;&gt;placing an empty go.mod file&lt;/a&gt; in the problematic paths.&lt;/p&gt;

&lt;h4 id=&quot;nested-modules&quot;&gt;Nested modules&lt;/h4&gt;

&lt;p&gt;The empty &lt;code class=&quot;highlighter-rouge&quot;&gt;go.mod&lt;/code&gt; file worked. This brought us to an important rule of Go modules, which is central to understanding many of the issues we encountered:&lt;/p&gt;

&lt;div&gt;
 &lt;p align=&quot;middle&quot;&gt;&lt;b&gt;&lt;i&gt;A module cannot contain other modules&lt;/i&gt;&lt;/b&gt;
&lt;/p&gt;&lt;/div&gt;

&lt;p&gt;This means that although the modules are within the same repository, Go modules treat them as though they are completely independent. When running &lt;code class=&quot;highlighter-rouge&quot;&gt;go mod&lt;/code&gt; commands in the root of the monorepo, Go doesn’t even ‘see’ the other modules nested within.&lt;/p&gt;

&lt;h3 id=&quot;tackling-maintenance-issues&quot;&gt;Tackling maintenance issues&lt;/h3&gt;

&lt;p&gt;After completing the initial migration of our vendor directory to go mod vendor however, it opened up a different set of problems related to maintenance.&lt;/p&gt;

&lt;p&gt;With Glide, we could guarantee that the Glide files and vendor directory would not change unless we deliberately changed them. This was not the case after switching to Go modules; we found that the &lt;code class=&quot;highlighter-rouge&quot;&gt;go.mod&lt;/code&gt; file frequently required unexpected changes to keep our vendor directory reproducible.&lt;/p&gt;

&lt;p&gt;There are two frequent cases that cause the &lt;code class=&quot;highlighter-rouge&quot;&gt;go.mod&lt;/code&gt; file to need updates: &lt;em&gt;dependency inheritance&lt;/em&gt; and &lt;em&gt;implicit updates&lt;/em&gt;.&lt;/p&gt;

&lt;h4 id=&quot;dependency-inheritance&quot;&gt;Dependency inheritance&lt;/h4&gt;

&lt;p&gt;Dependency inheritance is a consequence of Go modules &lt;a href=&quot;https://github.com/golang/go/wiki/Modules%23is-gosum-a-lock-file-why-does-gosum-include-information-for-module-versions-i-am-no-longer-using&quot;&gt;version selection&lt;/a&gt;. If one of the monorepo’s dependencies uses Go modules, then the monorepo inherits those version requirements as well.&lt;/p&gt;

&lt;p&gt;When starting a new module, the default is to use the latest version of dependencies. This was an issue for us as some of our monorepo dependencies had not been updated for some time. As engineers wanted to import their module from the monorepo, it caused &lt;code class=&quot;highlighter-rouge&quot;&gt;go mod vendor&lt;/code&gt; to pull in a huge amount of updates.&lt;/p&gt;

&lt;p&gt;To solve this issue, we wrote a quick script to copy the dependency versions from one module to another.&lt;/p&gt;

&lt;p&gt;One key learning here is to have other modules use the monorepo’s versions, and if any updates are needed then the monorepo should be updated first.&lt;/p&gt;

&lt;h4 id=&quot;implicit-updates&quot;&gt;Implicit updates&lt;/h4&gt;

&lt;p&gt;Implicit updates are a more subtle problem. The typical Go modules &lt;a href=&quot;https://github.com/golang/go/wiki/Modules%23daily-workflow&quot;&gt;workflow&lt;/a&gt; is to use standard Go commands: &lt;code class=&quot;highlighter-rouge&quot;&gt;go build&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;go test&lt;/code&gt;, and so on, and they will automatically update the &lt;code class=&quot;highlighter-rouge&quot;&gt;go.mod&lt;/code&gt; file as needed. However, this was sometimes surprising, and it wasn’t always clear why the &lt;code class=&quot;highlighter-rouge&quot;&gt;go.mod&lt;/code&gt; file was being updated. Some of the reasons we found were:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A new import was added by mistake, causing the dependency to be added to the &lt;code class=&quot;highlighter-rouge&quot;&gt;go.mod&lt;/code&gt; file&lt;/li&gt;
  &lt;li&gt;There is a &lt;a href=&quot;https://github.com/golang/go/wiki/Modules%23when-should-i-use-the-replace-directive&quot;&gt;local replace&lt;/a&gt; for some module B, and B changes its own &lt;code class=&quot;highlighter-rouge&quot;&gt;go.mod&lt;/code&gt;. When there’s a local replace, it bypasses versioning, so the changes to B’s go.mod are immediately inherited.&lt;/li&gt;
  &lt;li&gt;The build imports a package from a dependency that can’t be satisfied with the current version, so Go attempts to update it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This means that simply &lt;em&gt;creating&lt;/em&gt; a tag in an external repository is sometimes enough to affect the &lt;code class=&quot;highlighter-rouge&quot;&gt;go.mod&lt;/code&gt; file, if you already have a broken import in the codebase.&lt;/p&gt;

&lt;h3 id=&quot;resolving-unexpected-dependencies-using-graphs&quot;&gt;Resolving unexpected dependencies using graphs&lt;/h3&gt;

&lt;p&gt;To investigate the unexpected dependencies, the command &lt;code class=&quot;highlighter-rouge&quot;&gt;go mod graph&lt;/code&gt; proved the most useful.&lt;/p&gt;

&lt;p&gt;Running &lt;code class=&quot;highlighter-rouge&quot;&gt;graph&lt;/code&gt; with good old grep was good enough, but its output is also compatible with the &lt;a href=&quot;https://godoc.org/golang.org/x/tools/cmd/digraph&quot;&gt;digraph tool&lt;/a&gt; for more sophisticated queries. For example, we could use the following command to trace the source of a dependency on &lt;code class=&quot;highlighter-rouge&quot;&gt;cloud.google.com/go&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ go mod graph | digraph somepath grab.com/example cloud.google.com/go@v0.26.0

github.com/hashicorp/vault/api@v1.0.4 github.com/hashicorp/vault/sdk@v0.1.13

github.com/hashicorp/vault/sdk@v0.1.13 google.golang.org/genproto@v0.0.0-20190404172233-64821d5d2107

google.golang.org/genproto@v0.0.0-20190404172233-64821d5d2107 google.golang.org/grpc@v1.19.0

google.golang.org/grpc@v1.19.0 cloud.google.com/go@v0.26.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;post-image-section&quot;&gt;&lt;figure&gt;
  &lt;img src=&quot;/img/go-module-a-guide-for-monorepos-part-1/image1.png&quot; alt=&quot;Diagram generated using modgraphviz&quot; /&gt;
  &lt;figcaption align=&quot;middle&quot;&gt;&lt;i&gt;Diagram generated using modgraphviz&lt;/i&gt;&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/div&gt;

&lt;h2 id=&quot;stay-tuned-for-more&quot;&gt;Stay tuned for more&lt;/h2&gt;
&lt;p&gt;I hope you have enjoyed this article. In our next post, we’ll cover the other solutions we have for catching unexpected changes to the &lt;code class=&quot;highlighter-rouge&quot;&gt;go.mod&lt;/code&gt; file and addressing dependency issues.&lt;/p&gt;

&lt;h2 id=&quot;join-us&quot;&gt;Join us&lt;/h2&gt;
&lt;p&gt;Grab is more than just the leading ride-hailing and mobile payments platform in Southeast Asia. We use data and technology to improve everything from transportation to payments and financial services across a region of more than 620 million people. We aspire to unlock the true potential of Southeast Asia and look for like-minded individuals to join us on this ride.&lt;/p&gt;

&lt;p&gt;If you share our vision of driving South East Asia forward, &lt;a href=&quot;https://grab.careers/jobs/&quot;&gt;apply&lt;/a&gt; to join our team today.&lt;/p&gt;

&lt;h4 id=&quot;credits&quot;&gt;Credits&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;The cute Go gopher logo for this blog’s cover image was inspired by Renee French’s original work.&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 29 May 2020 11:34:40 +0000</pubDate>
        <link>https://engineering.grab.com/go-module-a-guide-for-monorepos-part-1</link>
        <guid isPermaLink="true">https://engineering.grab.com/go-module-a-guide-for-monorepos-part-1</guid>
        
        <category>go</category>
        
        <category>monorepo</category>
        
        <category>vendoring</category>
        
        <category>vendors</category>
        
        <category>libraries</category>
        
        
        <category>Engineering</category>
        
      </item>
    
      <item>
        <title>Does Southeast Asia run on coffee?</title>
        <description>&lt;p align=&quot;center&quot;&gt;&lt;i&gt;This article was originally published in the Grab Medium account on December 4, 2019. Reposting it here for your reading pleasure.&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;There is no surprise as to why coffee is a go-to drink in the region. For one, almost a third of coffee is produced in &lt;a href=&quot;https://utzcertified.org/en/aboututzcertified/136-general-stories-coffee/asia8/2155-coffee-asia&quot;&gt;Asia&lt;/a&gt;, giving us easy access to beans. Coupled with the plethora of local cafes and stores at every corner in Southeast Asia, coffee has become an accessible and affordable drink — and one that enjoys a huge following.&lt;/p&gt;

&lt;p&gt;For many, a morning cuppa is fuel to kick start their day. For some it’s the secret weapon to a food coma, for others, it’s fuel to keep them going throughout the day.&lt;/p&gt;

&lt;p&gt;To get a glimpse of how our fellow Southeast Asians refuel with coffee on a daily basis, we took a look (along with our ‘kopi’) at GrabFood data, and here is what we found.&lt;/p&gt;

&lt;h2 id=&quot;did-you-know-coffee-orders-have-grown-1400-on-grabfood&quot;&gt;Did you know: Coffee orders have grown 1,400% on GrabFood?&lt;/h2&gt;

&lt;p&gt;How much do we actually love our coffee? It seems like we do, a lot.&lt;/p&gt;

&lt;p&gt;Coffee orders on GrabFood has been growing pervasively throughout the major cities, and a timelapse visualisation based on data from GrabFood orders show us the growth of orders across major cities over a 9-month period:&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;&lt;figure&gt;
  &lt;img src=&quot;/img/does-southeast-asia-run-on-coffee/image1.gif&quot; alt=&quot;Timelapse visualisation&quot; /&gt;
&lt;/figure&gt;&lt;/div&gt;

&lt;h2 id=&quot;time-for-coffee&quot;&gt;Time for coffee?&lt;/h2&gt;

&lt;p&gt;But how reliant are we on caffeine? We analysed the coffee consumption behaviour of GrabFood users from major SEA countries across a typical week.&lt;/p&gt;

&lt;h3 id=&quot;coffee-orders-by-day-of-the-week-singapore-coffee-orders-peak-on-the-weekends&quot;&gt;Coffee Orders by Day of the Week: Singapore coffee orders peak on the weekends&lt;/h3&gt;

&lt;div class=&quot;post-image-section&quot;&gt;&lt;figure&gt;
  &lt;img src=&quot;/img/does-southeast-asia-run-on-coffee/image2.png&quot; alt=&quot;Coffee Orders by Day of the Week - Chart&quot; /&gt;
&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;Turns out most coffee orders are placed on Wednesdays — clearly a much needed shot to overcome the dreaded hump day. And as we head into the weekend, orders begin to decline as Southeast Asians wind down from the work week.&lt;/p&gt;

&lt;p&gt;However, the complete opposite happens for our friends in Singapore and the Philippines! Coffee orders actually spike on the weekends, and especially so on Sundays. It can only mean that Singaporeans and Filipinos surely enjoy their coffee catch-ups with friends and family.&lt;/p&gt;

&lt;h3 id=&quot;am--coffee-pm--still-coffee&quot;&gt;AM- Coffee… PM- Still coffee&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;The question begets&lt;/em&gt; — when exactly do SEA coffee drinkers summon that life saving cup from our delivery heroes in green?&lt;/p&gt;

&lt;p&gt;Check out this trippy visualisation that resembles jumping coffee beans:&lt;/p&gt;

&lt;h3 id=&quot;coffee-orders-by-hour-of-day--orders-peak-at-10am-for-thailand-and-2pm-in-indonesia&quot;&gt;Coffee Orders by Hour of Day — Orders peak at 10am for Thailand and 2pm in Indonesia&lt;/h3&gt;

&lt;div class=&quot;post-image-section&quot;&gt;&lt;figure&gt;
  &lt;img src=&quot;/img/does-southeast-asia-run-on-coffee/image3.gif&quot; alt=&quot;Coffee Orders by Day of the Week&quot; /&gt;
&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;While other cities generally reach for the Grab app at noon for that extra boost to fight that food coma through the rest of the day, our friends in Thailand gets their caffeine fix early, with most orders coming in at 10.00am, just before the lunch hour.&lt;/p&gt;

&lt;p&gt;Interestingly, coffee orders for Singapore peak at about 4pm in the afternoon… are they working hard, or are they hardly working?&lt;/p&gt;

&lt;h2 id=&quot;grabfoods-love-is-in-the-air-and-it-smells-like-coffee&quot;&gt;GrabFood’s love is in the air, and it smells like coffee&lt;/h2&gt;

&lt;p&gt;Curious as to what coffee flavours our SEA neighbours prefer? We spill the (coffee) beans!&lt;/p&gt;

&lt;h3 id=&quot;top-3-coffee-flavours-in-each-country&quot;&gt;Top 3 Coffee Flavours in each Country&lt;/h3&gt;

&lt;div class=&quot;post-image-section&quot;&gt;&lt;figure&gt;
  &lt;img src=&quot;/img/does-southeast-asia-run-on-coffee/image4.png&quot; alt=&quot;Top 3 Coffee Flavours in each Country&quot; /&gt;
&lt;/figure&gt;&lt;/div&gt;

&lt;h3 id=&quot;what-is-a-non-coffee-drinker-to-do&quot;&gt;What is a non-coffee drinker to do?&lt;/h3&gt;

&lt;div class=&quot;post-image-section&quot;&gt;&lt;figure&gt;
  &lt;img src=&quot;/img/does-southeast-asia-run-on-coffee/image5.png&quot; alt=&quot;What non-coffee drinker drinks&quot; /&gt;
&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;Also known as Matcha Latte, Green Tea Latte seems to be the next big beverage fad in the region , serving as a perfect coffee alternative for non-coffee drinkers.&lt;/p&gt;

&lt;p&gt;Matcha latte, made with concentrated shots of green tea and topped with frothy, steamed milk, is gaining popularity. While it offers the same quantity of caffeine as a cup of brewed coffee, the drink is perceived to be as more energising , because of the slower release of caffeine.&lt;/p&gt;

&lt;p&gt;It has consistently been one of the top 10 beverage items ordered on GrabFood, and we’ve delivered over 25 million cups of these green, frothy and creamy ‘heaven in a cup’ over the last nine months!&lt;/p&gt;

&lt;p&gt;Southeast Asian’s love of tea-based latte (other than green tea) is apparent in Grab’s data! Some of the unique flavours that are being ordered on GrabFood include the following flavours:&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;&lt;figure&gt;
  &lt;img src=&quot;/img/does-southeast-asia-run-on-coffee/image6.png&quot; alt=&quot;Unique flavours&quot; /&gt;
&lt;/figure&gt;&lt;/div&gt;

&lt;h2 id=&quot;grabfood-coffee-is-a-hug-in-a-mug&quot;&gt;GrabFood Coffee is a hug in a mug&lt;/h2&gt;

&lt;p&gt;Is your blood type coffee? Whether you feel like caramelly and chocolatey Macchiato, or fruity and floral aroma of freshly brewed Americano, or intense and bitter double-shot Long Black — GrabFood has got you covered! May your coffee get delivered (and kick in) before reality does!&lt;/p&gt;

&lt;h2 id=&quot;join-us&quot;&gt;Join us&lt;/h2&gt;
&lt;p&gt;Grab is more than just the leading ride-hailing and mobile payments platform in Southeast Asia. We use data and technology to improve everything from transportation to payments and financial services across a region of more than 620 million people. We aspire to unlock the true potential of Southeast Asia and look for like-minded individuals to join us on this ride.&lt;/p&gt;

&lt;p&gt;If you share our vision of driving South East Asia forward, &lt;a href=&quot;https://grab.careers/jobs/&quot;&gt;apply&lt;/a&gt; to join our team today.&lt;/p&gt;
</description>
        <pubDate>Thu, 26 Mar 2020 08:34:00 +0000</pubDate>
        <link>https://engineering.grab.com/does-southeast-asia-run-on-coffee</link>
        <guid isPermaLink="true">https://engineering.grab.com/does-southeast-asia-run-on-coffee</guid>
        
        <category>Data</category>
        
        <category>Data Analytics</category>
        
        <category>Data Visualisation</category>
        
        
        <category>Data Science</category>
        
      </item>
    
      <item>
        <title>GrabChat Much? Talk Data to me!</title>
        <description>&lt;p align=&quot;center&quot;&gt;&lt;i&gt;This article was originally published in the Grab Medium account on November 20, 2019. Reposting it here for your reading pleasure.&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;In September 2016 GrabChat was born, a platform designed to allow seamless communication between passenger and driver-partner. Since then, Grab has continuously improved the GrabChat experience by introducing features such as instant translation, images, and audio chats, and as a result — reduced cancellation rates by up to 50%! We’ve even &lt;a href=&quot;https://engineering.grab.com/experiment-chat-booking-cancellations&quot;&gt;experimented with various features&lt;/a&gt; to deliver hyper-localised experiences in each country! So with all these features, how have our users responded? Let’s take a deeper look into this to uncover some interesting insights from our data in Singapore, Malaysia and Indonesia.&lt;/p&gt;

&lt;h2 id=&quot;the-chattiest-country&quot;&gt;The Chattiest Country&lt;/h2&gt;

&lt;div class=&quot;post-image-section&quot;&gt;&lt;figure&gt;
  &lt;img src=&quot;/img/grabchat-much-talk-data-to-me/image1.png&quot; alt=&quot;Number of Chats by Country&quot; /&gt;
  &lt;figcaption align=&quot;middle&quot;&gt;&lt;i&gt;Number of Chats by Country&lt;/i&gt;&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;In a previous &lt;a href=&quot;https://www.grab.com/sg/blog/grabchat-feature/&quot;&gt;blog post&lt;/a&gt; several years ago, we revealed that Indonesia was the chattiest nation in South-east Asia. Our latest data is no different. &lt;strong&gt;Indonesia is still the chattiest country out of the three, having an average of 5.5 chats per bookings, while Singapore is the least chatty!&lt;/strong&gt; Furthermore, passengers in Singapore tend to be chattier than driver-partners, while the reverse relationship is true for the other two countries.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But what do people talk about?&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;&lt;figure&gt;
  &lt;img src=&quot;/img/grabchat-much-talk-data-to-me/image2.png&quot; alt=&quot;Common words in Indonesia&quot; /&gt;  
  &lt;figcaption align=&quot;middle&quot;&gt;&lt;i&gt;Common words in Indonesia&lt;/i&gt;&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/div&gt;

&lt;div class=&quot;post-image-section&quot;&gt;&lt;figure&gt;
  &lt;img src=&quot;/img/grabchat-much-talk-data-to-me/image3.png&quot; alt=&quot;Common words in Singapore&quot; /&gt;  
  &lt;figcaption align=&quot;middle&quot;&gt;&lt;i&gt;Common words in Singapore&lt;/i&gt;&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/div&gt;

&lt;div class=&quot;post-image-section&quot;&gt;&lt;figure&gt;
  &lt;img src=&quot;/img/grabchat-much-talk-data-to-me/image4.png&quot; alt=&quot;Common words in Malaysia&quot; /&gt;  
  &lt;figcaption align=&quot;middle&quot;&gt;&lt;i&gt;Common words in Malaysia&lt;/i&gt;&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;As expected, most of the chats revolve around pick-up points. There are &lt;strong&gt;many similarities between the three countries, such as typing courtesies such as ‘Hi’ and ‘Thank you’, and that the driver-partner/passenger is coming.&lt;/strong&gt; However, there are slight differences between the countries. Can you spot them all?&lt;/p&gt;

&lt;p&gt;In Indonesia, chats are usually in Bahasa Indonesia, and tend to be mostly driver-partners thanking passengers for using Grab.&lt;/p&gt;

&lt;p&gt;Chats in Singapore on the other hand, tend to be in English, and contain mostly pick-up locations, such as a car park. There are quite a few unique words in the Singapore context, such as ‘rubbish chute’ and ‘block’ that reflect features of the ubiquitous HDB’s (public housing) found everywhere in Singapore that serve as popular residential pickup points.&lt;/p&gt;

&lt;p&gt;Malaysia seems to be a blend of the other two countries, with chats in a mix of English and Bahasa Malaysia. Many of the chats highlight pickup locations, such as a guard house, as well as the phrase all Malaysians know: being stuck in traffic.&lt;/p&gt;

&lt;h2 id=&quot;time-trends&quot;&gt;Time Trends&lt;/h2&gt;

&lt;div class=&quot;post-image-section&quot;&gt;&lt;figure&gt;
  &lt;img src=&quot;/img/grabchat-much-talk-data-to-me/image5.png&quot; alt=&quot;Time Trend&quot; /&gt;
  &lt;figcaption align=&quot;middle&quot;&gt;&lt;i&gt;Time Trend&lt;/i&gt;&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;Analysis in chat trends across the three countries revealed an unexpected insight: &lt;strong&gt;a trend of talking more from midnight until around 4am&lt;/strong&gt;. Perplexed but intrigued, we dug further to discover what prompted our users to talk more in such odd hours.&lt;/p&gt;

&lt;p&gt;From midnight to 4am shops and malls are usually closed during these hours, and pickup locations become more obscure as people wander around town late at night. Driver-partners and passengers thus tend to have more conversations to determine the pickup point. This also explains why the &lt;strong&gt;proportion of&lt;/strong&gt; &lt;strong&gt;pick-up location based messages out of all messages is highest between 12 and 6am&lt;/strong&gt;. On the other hand, these messages are less common in the mornings (6am-12pm) as people tend to be picked up from standard residential locations.&lt;/p&gt;

&lt;h2 id=&quot;image-trends&quot;&gt;Image Trends&lt;/h2&gt;

&lt;div class=&quot;post-image-section&quot;&gt;&lt;figure&gt;
  &lt;img src=&quot;/img/grabchat-much-talk-data-to-me/image6a.png&quot; alt=&quot;GrabChat’s Image-function uptake in Jakarta, Singapore, and Kuala Lumpur (Nov 2018 — March 2019) - Image 1&quot; /&gt;
  &lt;figcaption align=&quot;middle&quot;&gt;&lt;i&gt;GrabChat’s Image-function uptake in Jakarta, Singapore, and Kuala Lumpur (Nov 2018 — March 2019) - Image 1&lt;/i&gt;&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/div&gt;

&lt;div class=&quot;post-image-section&quot;&gt;&lt;figure&gt;
  &lt;img src=&quot;/img/grabchat-much-talk-data-to-me/image6b.png&quot; alt=&quot;GrabChat’s Image-function uptake in Jakarta, Singapore, and Kuala Lumpur (Nov 2018 — March 2019)  - Image 2&quot; /&gt;
  &lt;figcaption align=&quot;middle&quot;&gt;&lt;i&gt;GrabChat’s Image-function uptake in Jakarta, Singapore, and Kuala Lumpur (Nov 2018 — March 2019) - Image 2&lt;/i&gt;&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/div&gt;

&lt;div class=&quot;post-image-section&quot;&gt;&lt;figure&gt;
  &lt;img src=&quot;/img/grabchat-much-talk-data-to-me/image6c.png&quot; alt=&quot;GrabChat’s Image-function uptake in Jakarta, Singapore, and Kuala Lumpur (Nov 2018 — March 2019) - Image 3&quot; /&gt;
  &lt;figcaption align=&quot;middle&quot;&gt;&lt;i&gt;GrabChat’s Image-function uptake in Jakarta, Singapore, and Kuala Lumpur (Nov 2018 — March 2019) - Image 3&lt;/i&gt;&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;The ability to send images on GrabChat was introduced in September 2018, with the aim of helping driver-partners identify the exact pickup location of passengers. Within the first few weeks of release, 22,000 images were sent in Singapore alone. The increase in uptake of the image feature for the cities of Jakarta, Singapore and Kuala Lumpur can be seen in the images above.&lt;/p&gt;

&lt;p&gt;From analysis, we found that &lt;strong&gt;areas that were more remote such as Tengah in Singapore tended to have the highest percentage of images sent&lt;/strong&gt;, indicating that images are useful for users in unfamiliar places.&lt;/p&gt;

&lt;h2 id=&quot;safety-first&quot;&gt;Safety First&lt;/h2&gt;

&lt;p&gt;Aside from images, Grab also introduced two other features: templates and audio chats, to &lt;strong&gt;avoid driver-partners from texting while driving&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;&lt;figure&gt;
  &lt;img src=&quot;/img/grabchat-much-talk-data-to-me/image7.png&quot; alt=&quot;Templates and audio features used by driver-partners, and a reduced number of typed texts by driver-partners per booking&quot; /&gt;
  &lt;figcaption align=&quot;middle&quot;&gt;&lt;i&gt;Templates and audio features used by driver-partners, and a reduced number of typed texts by driver-partners per bookin&lt;/i&gt;&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;“Templates” (pre-populated phrases) allowed driver-partners to send templated messages with just a quick tap. In our recent data analysis, we discovered that almost 50% of driver-partner texts comprised of templates.&lt;/p&gt;

&lt;p&gt;“Audio chat” alongside “images chat” were introduced in September 2018, and the use of this feature has been steadily increasing, with audio comprising an increasing percentage of driver-partner texts.&lt;/p&gt;

&lt;p&gt;With both features being picked up by driver-partners across all three countries, Grab has successfully seen a decrease in the overall number of driver-partner texts (non-templates) per booking within a 3 month period.&lt;/p&gt;

&lt;h2 id=&quot;a-brief-pick-up-guide&quot;&gt;A Brief Pick-up Guide&lt;/h2&gt;

&lt;p&gt;No one likes a cancelled ride, right? Well, after analysing millions of data points, we’ve unearthed some neat tips and tricks to help you complete your ride, and we’re sharing them with you!&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;&lt;figure&gt;
  &lt;img src=&quot;/img/grabchat-much-talk-data-to-me/image8.png&quot; alt=&quot;Completed Rides&quot; /&gt;
  &lt;figcaption align=&quot;middle&quot;&gt;&lt;i&gt;Completed Rides&lt;/i&gt;&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;This first tip might be a no-brainer, but replying your driver-partner would result in a higher completion rate. No one likes to be blue-ticked do they?&lt;/p&gt;

&lt;p&gt;Next, we discovered various things you could say that would result in higher completion rates, explained below in the graphic.&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;&lt;figure&gt;
  &lt;img src=&quot;/img/grabchat-much-talk-data-to-me/image9.png&quot; alt=&quot;Tips for a Better Pickup Experience&quot; /&gt;
  &lt;figcaption align=&quot;middle&quot;&gt;&lt;i&gt;Tips for a Better Pickup Experience&lt;/i&gt;&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;Informing the driver-partner that you’re coming, giving them directions, and telling them how to identify you results in almost double the chances of completing the ride!&lt;/p&gt;

&lt;p&gt;Last but not least, &lt;strong&gt;let’s not forget our manners&lt;/strong&gt;. Grab’s data analysis revealed that saying ‘thank you’ correlated with an increase in completion rates! Also, be at the pickup point on time — remember, time is money for our driver-partners!&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Just like in Shakespeare’s &lt;em&gt;Much Ado about Nothing&lt;/em&gt;, ample information can be gathered from the mere whim of a message. Grab is constantly aspiring to achieve the best experience for both passengers and driver-partners, and data plays a huge role in helping us achieve this.&lt;/p&gt;

&lt;p&gt;This is just the first page of the book. The amount of information lurking between every page is endless. So stay tuned for more interesting insights about our GrabChat platform!&lt;/p&gt;

&lt;h2 id=&quot;join-us&quot;&gt;Join us&lt;/h2&gt;
&lt;p&gt;Grab is more than just the leading ride-hailing and mobile payments platform in Southeast Asia. We use data and technology to improve everything from transportation to payments and financial services across a region of more than 620 million people. We aspire to unlock the true potential of Southeast Asia and look for like-minded individuals to join us on this ride.&lt;/p&gt;

&lt;p&gt;If you share our vision of driving South East Asia forward, &lt;a href=&quot;https://grab.careers/jobs/&quot;&gt;apply&lt;/a&gt; to join our team today.&lt;/p&gt;
</description>
        <pubDate>Tue, 24 Mar 2020 05:02:55 +0000</pubDate>
        <link>https://engineering.grab.com/grabchat-much-talk-data-to-me</link>
        <guid isPermaLink="true">https://engineering.grab.com/grabchat-much-talk-data-to-me</guid>
        
        <category>Data</category>
        
        <category>Data Analytics</category>
        
        <category>Data Visualisation</category>
        
        
        <category>Data Science</category>
        
      </item>
    
      <item>
        <title>7 Fun Facts about Grab’s Driver-Partners in Singapore</title>
        <description>&lt;p align=&quot;center&quot;&gt;&lt;i&gt;This article was originally published in the Grab Medium account on June 17, 2019. Reposting it here for your reading pleasure.&lt;/i&gt;&lt;/p&gt;

&lt;h2 id=&quot;grabs-big-data-story&quot;&gt;Grab’s Big Data Story&lt;/h2&gt;

&lt;p&gt;Grab is on an incredible mission to empower our driver-partners in 336 cities in 8 countries.&lt;/p&gt;

&lt;p&gt;Curious about what Grab’s data tells us about driver-partners on the platform?&lt;/p&gt;

&lt;p&gt;Let us share with you the most interesting data points we found among our driver-partners in Singapore!&lt;/p&gt;

&lt;h3 id=&quot;1-its-a-small-world&quot;&gt;1. It’s a Small World&lt;/h3&gt;

&lt;div class=&quot;post-image-section&quot;&gt;&lt;figure&gt;
  &lt;img src=&quot;/img/seven-facts-about-grab-partner-drivers-in-sg/image1.png&quot; alt=&quot;It's a Small World&quot; /&gt;
&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;Lim Chu Kang may feel like a world away from Katong, but Singapore is a small world for our driver-partners — a driver-partner has a 1 in 400 chance of having a repeat passenger amongst the 5.4 million population!&lt;/p&gt;

&lt;h3 id=&quot;2-saturday-night-fever&quot;&gt;2. Saturday Night Fever&lt;/h3&gt;

&lt;div class=&quot;post-image-section&quot;&gt;&lt;figure&gt;
  &lt;img src=&quot;/img/seven-facts-about-grab-partner-drivers-in-sg/image2.png&quot; alt=&quot;Saturday Night Fever&quot; /&gt;
&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;The annual average number of rides that a Grab driver-partner complete on Saturday nights is 110. But there was one special driver-partner who did 1,131 Saturday night trips in the year of 2018! Weekend parties just wouldn’t be the same without you. Rock on!&lt;/p&gt;

&lt;h3 id=&quot;3-share-the-love&quot;&gt;3. Share the Love&lt;/h3&gt;

&lt;div class=&quot;post-image-section&quot;&gt;&lt;figure&gt;
  &lt;img src=&quot;/img/seven-facts-about-grab-partner-drivers-in-sg/image3.png&quot; alt=&quot;Share the Lover&quot; /&gt;
&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;Did you know that having more passengers in a car can yield more 5-star ratings? Our GrabShare passengers share more than just rides — they share their appreciation too! GrabShare rides have an average trip rating of 4.8!&lt;/p&gt;

&lt;h3 id=&quot;4-the-road-more-travelled&quot;&gt;4. The Road More Travelled&lt;/h3&gt;

&lt;div class=&quot;post-image-section&quot;&gt;&lt;figure&gt;
  &lt;img src=&quot;/img/seven-facts-about-grab-partner-drivers-in-sg/image4.png&quot; alt=&quot;The Road More Travelled&quot; /&gt;
&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;Which neighbourhoods are painting the town green? Our driver partners picked up the most passengers from Tampines, while Orchard &amp;amp; Marina Bay areas were the most popular destination in 2018!&lt;/p&gt;

&lt;h3 id=&quot;5-tricks-of-the-trade&quot;&gt;5. Tricks of the Trade&lt;/h3&gt;

&lt;div class=&quot;post-image-section&quot;&gt;&lt;figure&gt;
  &lt;img src=&quot;/img/seven-facts-about-grab-partner-drivers-in-sg/image5.png&quot; alt=&quot;Tricks of the Trad&quot; /&gt;
&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;Ever wondered if seasoned driver-partners who have been with us for more than 2 years, have different driving preferences and habits? They tend to start their day 1 hour earlier around 6–7am, and are on auto-accept most of the time. Did you know that drivers on auto-accept spend less time idle waiting for new jobs?&lt;/p&gt;

&lt;h3 id=&quot;6-busy-bee&quot;&gt;6. Busy Bee&lt;/h3&gt;

&lt;div class=&quot;post-image-section&quot;&gt;&lt;figure&gt;
  &lt;img src=&quot;/img/seven-facts-about-grab-partner-drivers-in-sg/image6.png&quot; alt=&quot;Busy Bee&quot; /&gt;
&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;Did you know? Drivers are twice as likely to get back-to-back allocations during evening peak hours! Drivers with frequent back-to-back jobs earn about 50% more per hour.&lt;/p&gt;

&lt;h2 id=&quot;7-road-runner&quot;&gt;7. Road Runner&lt;/h2&gt;

&lt;div class=&quot;post-image-section&quot;&gt;&lt;figure&gt;
  &lt;img src=&quot;/img/seven-facts-about-grab-partner-drivers-in-sg/image7.png&quot; alt=&quot;Road Runner&quot; /&gt;
&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;One of our most active driver-partners covered 57,000km ferrying passengers in 2018 — that’s like driving every road, street, jalan, lorong and tanjong in Singapore for more than 57 times!&lt;/p&gt;

&lt;p&gt;How our driver-partners utilize the Grab platform to make a living (and break a few records along the way) never ceases to amaze us.&lt;/p&gt;

&lt;p&gt;Interested to know more about the winning strategies among our driver-partners? Look out for the next data story!&lt;/p&gt;

&lt;h2 id=&quot;join-us&quot;&gt;Join us&lt;/h2&gt;
&lt;p&gt;Grab is more than just the leading ride-hailing and mobile payments platform in Southeast Asia. We use data and technology to improve everything from transportation to payments and financial services across a region of more than 620 million people. We aspire to unlock the true potential of Southeast Asia and look for like-minded individuals to join us on this ride.&lt;/p&gt;

&lt;p&gt;If you share our vision of driving South East Asia forward, &lt;a href=&quot;https://grab.careers/jobs/&quot;&gt;apply&lt;/a&gt; to join our team today.&lt;/p&gt;
</description>
        <pubDate>Fri, 20 Mar 2020 12:13:20 +0000</pubDate>
        <link>https://engineering.grab.com/seven-facts-about-grab-driver-partners-in-sg</link>
        <guid isPermaLink="true">https://engineering.grab.com/seven-facts-about-grab-driver-partners-in-sg</guid>
        
        <category>Data</category>
        
        <category>Data Analytics</category>
        
        
        <category>Data Science</category>
        
      </item>
    
      <item>
        <title>Tackling UI test execution time imbalance for Xcode parallel testing</title>
        <description>&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Testing is a common practice to ensure that code logic is not easily broken during development and refactoring. Having tests running as part of Continuous Integration (CI) infrastructure is essential, especially with a large codebase contributed by many engineers. However, the more tests we add, the longer it takes to execute. In the context of iOS development, the execution time of the whole test suite might be significantly affected by the increasing number of tests written. Running &lt;a href=&quot;https://about.gitlab.com/blog/2019/07/12/guide-to-ci-cd-pipelines/&quot;&gt;CI pre-merge pipelines&lt;/a&gt; against a change, would cost us more time. Therefore, reducing test execution time is a long term epic we have to tackle in order to build a good CI infrastructure.&lt;/p&gt;

&lt;p&gt;Apart from splitting tests into subsets and running each of them in a CI job, we can also make use of the &lt;a href=&quot;https://www.zachsim.one/blog/2018/6/15/parallel-testing-in-xcode-10&quot;&gt;Xcode parallel testing&lt;/a&gt; feature to achieve parallelism within one single CI job. However, due to platform-specific implementations, there are some constraints that prevent parallel testing from working efficiently. One constraint we found is that tests of the same &lt;a href=&quot;https://swift.org/about/&quot;&gt;Swift&lt;/a&gt; class run on the same simulator. In this post, we will discuss this constraint in detail and introduce a tip to overcome it.&lt;/p&gt;

&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;h3 id=&quot;xcode-parallel-testing&quot;&gt;Xcode parallel testing&lt;/h3&gt;

&lt;p&gt;The parallel testing feature was shipped as part of the &lt;a href=&quot;https://developer.apple.com/documentation/xcode_release_notes/xcode_10_release_notes&quot;&gt;Xcode 10 release&lt;/a&gt;. This support enables us to easily configure test setup:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;There is no need to care about how to split a given test suite.&lt;/li&gt;
  &lt;li&gt;The number of workers (i.e. parallel runners/instances) is configurable. We can pass this value in the &lt;code class=&quot;highlighter-rouge&quot;&gt;xcodebuild&lt;/code&gt; CLI via the &lt;code class=&quot;highlighter-rouge&quot;&gt;-parallel-testing-worker-count&lt;/code&gt; option.&lt;/li&gt;
  &lt;li&gt;Xcode takes care of cloning and starts simulators accordingly.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, &lt;em&gt;the distribution logic under the hood is a black-box&lt;/em&gt;. We do not really know how &lt;em&gt;tests are assigned to each worker or simulator, and in which order&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;&lt;figure&gt;
  &lt;img src=&quot;/img/tackling-ui-test-execution-time-imbalance-for-xcode-parallel-testing/image6.png&quot; alt=&quot;Three simulators running tests in parallel&quot; /&gt;
  &lt;figcaption align=&quot;middle&quot;&gt;&lt;i&gt;Three simulators running tests in parallel&lt;/i&gt;&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;It is worth mentioning that even without the Xcode parallel testing support, we can still achieve similar improvements by running subsets of tests in different child processes. But it takes more effort to dispatch tests to each child process in an efficient way, and to handle the output from each test process appropriately.&lt;/p&gt;

&lt;h3 id=&quot;test-time-imbalance&quot;&gt;Test time imbalance&lt;/h3&gt;

&lt;p&gt;Generally, a &lt;em&gt;parallel execution system&lt;/em&gt; is at its best efficiency if each parallel task executes in roughly the same duration and ends at roughly the same time.&lt;/p&gt;

&lt;p&gt;If the time spent on each parallel task is significantly different, it will take more time than expected to execute all tasks. For example, in the following image, it takes the system on the left 13 mins to finish 3 tasks. Whereas, the one on the right takes only 10.5 mins to finish those 3 tasks.&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;&lt;figure&gt;
  &lt;img src=&quot;/img/tackling-ui-test-execution-time-imbalance-for-xcode-parallel-testing/image3.png&quot; alt=&quot;Bad parallelism vs. good parallelism&quot; /&gt;
  &lt;figcaption align=&quot;middle&quot;&gt;&lt;i&gt;Bad parallelism vs. good parallelism&lt;/i&gt;&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;Assume there are N workers. The i&lt;sup&gt;th&lt;/sup&gt; worker executes its tasks in t&lt;sub&gt;i&lt;/sub&gt; seconds/minutes. In the left plot, t&lt;sub&gt;1&lt;/sub&gt; = 10 mins, t&lt;sub&gt;2&lt;/sub&gt; = 7 mins, t&lt;sub&gt;3&lt;/sub&gt; = 13 mins.&lt;/p&gt;

&lt;p&gt;We define the test time imbalance metric as the difference between the min and max end time:&lt;/p&gt;

&lt;p&gt;max(t&lt;sub&gt;i&lt;/sub&gt;) - min(t&lt;sub&gt;i&lt;/sub&gt;)&lt;/p&gt;

&lt;p&gt;For the example above, the test time imbalance is 13 mins - 7 mins = 6 mins.&lt;/p&gt;

&lt;h3 id=&quot;contributing-factors-in-test-time-imbalance&quot;&gt;Contributing factors in test time imbalance&lt;/h3&gt;

&lt;p&gt;There are several factors causing test time imbalance. The top two prominent factors are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Tests vary in execution time.&lt;/li&gt;
  &lt;li&gt;Tests of the same class run on the same simulator.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;An example of the first factor is that in our project, around 50% of tests execute in a range of 20-40 secs. Some tests take under 15 secs to run while several take up to 2 minutes. Sometimes tests taking longer execution time is inevitable since those tests usually touch many flows, which cannot be split. If such tests run last, the test time imbalance may increase.&lt;/p&gt;

&lt;p&gt;However, this issue, in general, does not matter that much because long-time-execution tests do not always run last.&lt;/p&gt;

&lt;p&gt;Regarding the second factor, there is no official Apple documentation that explicitly states this constraint. When &lt;a href=&quot;https://developer.apple.com/documentation/xcode_release_notes/xcode_10_release_notes&quot;&gt;Apple first introduced parallel testing support in Xcode 10&lt;/a&gt;, they only mentioned that test classes are distributed across runner processes:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Test parallelization occurs by &lt;strong&gt;distributing the test classes in a target across multiple runner processes&lt;/strong&gt;. Use the test log to see how your test classes were parallelized. You will see an entry in the log for each runner process that was launched, and below each runner you will see the list of classes that it executed.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For example, we have a test class &lt;code class=&quot;highlighter-rouge&quot;&gt;JobFlowTests&lt;/code&gt; that includes five tests and another test class &lt;code class=&quot;highlighter-rouge&quot;&gt;TutorialTests&lt;/code&gt; that has only one single test.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;JobFlowTests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;BaseXCTestCase&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;testHappyFlow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;testRecoverFlow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;testJobIgnoreByDax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;testJobIgnoreByTimer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;testForceClearBooking&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TutorialTests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;BaseXCTestCase&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;testOnboardingFlow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When executing the two tests with two simulators running in parallel, the actual run is like the one shown on the left side of the following image, but ideally it should work like the one on the right side.&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;&lt;figure&gt;
  &lt;img src=&quot;/img/tackling-ui-test-execution-time-imbalance-for-xcode-parallel-testing/image1.png&quot; alt=&quot;Tests of the same class are supposed to run on the same simulator but they should be able to run on different simulators.&quot; /&gt;
  &lt;figcaption align=&quot;middle&quot;&gt;&lt;i&gt;Tests of the same class are supposed to run on the same simulator but they should be able to run on different simulators.&lt;/i&gt;&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/div&gt;

&lt;h2 id=&quot;diving-deep-into-xcode-parallel-testing&quot;&gt;Diving deep into Xcode parallel testing&lt;/h2&gt;

&lt;h3 id=&quot;demystifying-xcode-scheduling-log&quot;&gt;Demystifying Xcode scheduling log&lt;/h3&gt;

&lt;p&gt;As mentioned above, Xcode distributes tests to simulators/workers in a black-box manner. However, by looking at the scheduling log generated when running tests, we can understand how Xcode parallel testing works.&lt;/p&gt;

&lt;p&gt;When running UI tests via the &lt;code class=&quot;highlighter-rouge&quot;&gt;xcodebuild&lt;/code&gt; command:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;xcodebuild &lt;span class=&quot;nt&quot;&gt;-workspace&lt;/span&gt; Driver/Driver.xcworkspace &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-scheme&lt;/span&gt; Driver &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-configuration&lt;/span&gt; Debug &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-sdk&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'iphonesimulator'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-destination&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'platform=iOS Simulator,id=EEE06943-7D7B-4E76-A3E0-B9A5C1470DBE'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-derivedDataPath&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./DerivedData'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-parallel-testing-enabled&lt;/span&gt; YES &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-parallel-testing-worker-count&lt;/span&gt; 2 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-only-testing&lt;/span&gt;:DriverUITests/JobFlowTests &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;# 👈👈👈👈👈&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-only-testing&lt;/span&gt;:DriverUITests/TutorialTests &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    test-without-building
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The log can be found inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;*.xcresult&lt;/code&gt; folder under &lt;code class=&quot;highlighter-rouge&quot;&gt;DerivedData/Logs/Test&lt;/code&gt;. For example: &lt;code class=&quot;highlighter-rouge&quot;&gt;DerivedData/Logs/Test/Test-Driver-2019.11.04\_23-31-34-+0800.xcresult/1\_Test/Diagnostics/DriverUITests-144D9549-FD53-437B-BE97-8A288855E259/scheduling.log&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;&lt;figure&gt;
  &lt;img src=&quot;/img/tackling-ui-test-execution-time-imbalance-for-xcode-parallel-testing/image5.png&quot; alt=&quot;Scheduling log under xcresult folder.&quot; /&gt;
  &lt;figcaption align=&quot;middle&quot;&gt;&lt;i&gt;Scheduling log under xcresult folder&lt;/i&gt;&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2019-11-05 03:55:00 +0000: Received worker from worker provider: 0x7fe6a684c4e0 [0: Clone 1 of DaxIOS-XC10-1-iP7-1 (3D082B53-3159-4004-A798-EA5553C873C4)]
2019-11-05 03:55:13 +0000: Worker 0x7fe6a684c4e0 [4985: Clone 1 of DaxIOS-XC10-1-iP7-1 (3D082B53-3159-4004-A798-EA5553C873C4)] finished bootstrapping
2019-11-05 03:55:13 +0000: Parallelization enabled; test execution driven by the IDE
2019-11-05 03:55:13 +0000: Skipping test class discovery
2019-11-05 03:55:13 +0000: Executing tests {(	# 👈👈👈👈👈
    DriverUITests/JobFlowTests,
    DriverUITests/TutorialTests
)}; skipping tests {(
)}
2019-11-05 03:55:13 +0000: Load balancer requested an additional worker
2019-11-05 03:55:13 +0000: Dispatching tests {(  # 👈👈👈👈👈
    DriverUITests/JobFlowTests
)} to worker: 0x7fe6a684c4e0 [4985: Clone 1 of DaxIOS-XC10-1-iP7-1 (3D082B53-3159-4004-A798-EA5553C873C4)]
2019-11-05 03:55:13 +0000: Received worker from worker provider: 0x7fe6a1582e40 [0: Clone 2 of DaxIOS-XC10-1-iP7-1 (F640C2F1-59A7-4448-B700-7381949B5D00)]
2019-11-05 03:55:39 +0000: Dispatching tests {(  # 👈👈👈👈👈
    DriverUITests/TutorialTests
)} to worker: 0x7fe6a684c4e0 [4985: Clone 1 of DaxIOS-XC10-1-iP7-1 (3D082B53-3159-4004-A798-EA5553C873C4)]
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Looking at the log below, we know that once a test class is dispatched or distributed to a worker/simulator, all tests of that class will be executed in that simulator.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2019-11-05 03:55:39 +0000: Dispatching tests {(
    DriverUITests/TutorialTests
)} to worker: 0x7fe6a684c4e0 [4985: Clone 1 of DaxIOS-XC10-1-iP7-1 (3D082B53-3159-4004-A798-EA5553C873C4)]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Even when we customize a test suite (by swizzling some &lt;code class=&quot;highlighter-rouge&quot;&gt;XCTestSuite&lt;/code&gt; class methods or variables), to split a test suite into multiple suites, it does not work because the made-up test suite is only initialized after tests are dispatched to a given worker.&lt;/p&gt;

&lt;p&gt;Therefore, &lt;strong&gt;&lt;em&gt;any hook to bypass this constraint must be done early on&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;passing-the--only-testing-argument-to-xcodebuild-command&quot;&gt;Passing the -only-testing argument to xcodebuild command&lt;/h3&gt;

&lt;p&gt;Now we pass tests (instead of test classes) to the &lt;code class=&quot;highlighter-rouge&quot;&gt;-only-testing&lt;/code&gt; argument.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ xcodebuild -workspace Driver/Driver.xcworkspace \
    # ...
    -only-testing:DriverUITests/JobFlowTests/testJobIgnoreByTimer \
    -only-testing:DriverUITests/JobFlowTests/testRecoverFlow \
    -only-testing:DriverUITests/JobFlowTests/testJobIgnoreByDax \
    -only-testing:DriverUITests/JobFlowTests/testHappyFlow \
    -only-testing:DriverUITests/JobFlowTests/testForceClearBooking \
    -only-testing:DriverUITests/TutorialTests/testOnboardingFlow \
    test-without-building
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But still, the scheduling log shows that &lt;strong&gt;&lt;em&gt;tests are grouped by test class before being dispatched to workers&lt;/em&gt;&lt;/strong&gt; (see the following log for reference). This grouping is automatically done by Xcode (which it should not).&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2019-11-05 04:21:42 +0000: Executing tests {(	# 👈
    DriverUITests/JobFlowTests/testJobIgnoreByTimer,
    DriverUITests/JobFlowTests/testRecoverFlow,
    DriverUITests/JobFlowTests/testJobIgnoreByDax,
    DriverUITests/TutorialTests/testOnboardingFlow,
    DriverUITests/JobFlowTests/testHappyFlow,
    DriverUITests/JobFlowTests/testForceClearBooking
)}; skipping tests {(
)}
2019-11-05 04:21:42 +0000: Load balancer requested an additional worker
2019-11-05 04:21:42 +0000: Dispatching tests {(  # 👈 ❌
    DriverUITests/JobFlowTests/testJobIgnoreByTimer,
    DriverUITests/JobFlowTests/testForceClearBooking,
    DriverUITests/JobFlowTests/testJobIgnoreByDax,
    DriverUITests/JobFlowTests/testHappyFlow,
    DriverUITests/JobFlowTests/testRecoverFlow
)} to worker: 0x7fd781261940 [6300: Clone 1 of DaxIOS-XC10-1-iP7-1 (93F0FCB6-C83F-4419-9A75-C11765F4B1CA)]
......
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;overcoming-grouping-logic-in-xcode-parallel-testing&quot;&gt;Overcoming grouping logic in Xcode parallel testing&lt;/h2&gt;

&lt;h3 id=&quot;tweaking-the--only-testing-argument-values&quot;&gt;Tweaking the -only-testing argument values&lt;/h3&gt;

&lt;p&gt;Based on our observation, we can imagine how Xcode runs tests in parallel. See below.&lt;/p&gt;

&lt;div class=&quot;language-py highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Step&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;tests&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;detect_tests_to_run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# parse -only-testing arguments
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Step&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;groups_of_tests&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;group_tests_by_test_class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Step&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;groups_of_tests&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Step&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;worker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;find_free_worker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Step&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;worker&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                  &lt;span class=&quot;n&quot;&gt;dispatch_tests_to_workers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;groups_of_tests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the pseudo-code above, we do not have much control to change step 2 since that grouping logic is implemented by Xcode. But we have a good guess that Xcode groups tests, by the first two components (class name) only (For example,  &lt;code class=&quot;highlighter-rouge&quot;&gt;DriverUITests/JobFlowTests&lt;/code&gt;). In other words, tests having the same class name run together on one simulator.&lt;/p&gt;

&lt;p&gt;The trick to break this constraint is simple. We can tweak the input (test names) so that each group contains only one test. By inserting a random token in the class name, all class names in the tests that are passed via &lt;code class=&quot;highlighter-rouge&quot;&gt;-only-testing&lt;/code&gt; argument are different.&lt;/p&gt;

&lt;p&gt;For example, instead of passing:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;-only-testing&lt;/span&gt;:DriverUITests/JobFlowTests/testJobIgnoreByTimer &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-only-testing&lt;/span&gt;:DriverUITests/JobFlowTests/testRecoverFlow &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We rather use:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;-only-testing&lt;/span&gt;:DriverUITests/JobFlowTests_AxY132z8/testJobIgnoreByTimer &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-only-testing&lt;/span&gt;:DriverUITests/JobFlowTests_By8MTk7l/testRecoverFlow &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Or we can use the test name itself as the token:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;-only-testing&lt;/span&gt;:DriverUITests/JobFlowTests_testJobIgnoreByTimer/testJobIgnoreByTimer &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-only-testing&lt;/span&gt;:DriverUITests/JobFlowTests_testRecoverFlow/testRecoverFlow &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After that, looking at the scheduling log, we will see that the trick can bypass the grouping logic. Now, only one test is dispatched to a worker once ready.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2019-11-05 06:06:56 +0000: Dispatching tests {(	# 👈 ✅
    DriverUITests/JobFlowTests_testJobIgnoreByDax/testJobIgnoreByDax
)} to worker: 0x7fef7952d0e0 [13857: Clone 2 of DaxIOS-XC10-1-iP7-1 (9BA030CD-C90F-4B7A-B9A7-D12F368A5A64)]
2019-11-05 06:06:58 +0000: Dispatching tests {(	# 👈 ✅
    DriverUITests/TutorialTests_testOnboardingFlow/testOnboardingFlow
)} to worker: 0x7fef7e85fd70 [13719: Clone 1 of DaxIOS-XC10-1-iP7-1 (584F99FE-49C2-4536-B6AC-90B8A10F361B)]
2019-11-05 06:07:07 +0000: Dispatching tests {(	# 👈 ✅
    DriverUITests/JobFlowTests_testRecoverFlow/testRecoverFlow
)} to worker: 0x7fef7952d0e0 [13857: Clone 2 of DaxIOS-XC10-1-iP7-1 (9BA030CD-C90F-4B7A-B9A7-D12F368A5A64)]

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;handling-tweaked-test-names&quot;&gt;Handling tweaked test names&lt;/h3&gt;

&lt;p&gt;When a worker/simulator receives a request to run a test, the app (could be the runner app or the hosting app) initializes an &lt;code class=&quot;highlighter-rouge&quot;&gt;XCTestSuite&lt;/code&gt; corresponding to the test name. In order for the test suite to be properly made up, we need to remove the inserted token.&lt;/p&gt;

&lt;p&gt;This could be done easily by swizzling the &lt;a href=&quot;https://developer.apple.com/documentation/xctest/xctestsuite/1500897-init&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;XCTestSuite.init(forTestCaseWithName:)&lt;/code&gt;&lt;/a&gt;. Inside that swizzled function, we remove the token and then call the original init function.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;XCTestSuite&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;/// For 'Selected tests' suite&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;@objc&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;dynamic&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;swizzled_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forTestCaseWithName&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;maskedName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;XCTestSuite&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// Recover the original test name&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// - masked: UITestCaseA_testA1/testA1      	--&amp;gt; recovered: UITestCaseA/testA1&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// - masked: Driver/UITestCaseA_testA1/testA1   --&amp;gt; recovered: Driver/UITestCaseA/testA1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;testBaseName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maskedName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;separator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;last&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;swizzled_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;forTestCaseWithName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maskedName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;recoveredName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maskedName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;replacingOccurrences&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;_&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testBaseName&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;👈&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remove&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;swizzled_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;forTestCaseWithName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recoveredName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;👈&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;original&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;init&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;post-image-section&quot;&gt;&lt;figure&gt;
  &lt;img src=&quot;/img/tackling-ui-test-execution-time-imbalance-for-xcode-parallel-testing/image2.png&quot; alt=&quot;Swizzle function to run tests properly&quot; /&gt;
  &lt;figcaption align=&quot;middle&quot;&gt;&lt;i&gt;Swizzle function to run tests properly&lt;/i&gt;&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/div&gt;

&lt;h3 id=&quot;test-class-discovery&quot;&gt;Test class discovery&lt;/h3&gt;

&lt;p&gt;In order to adopt this tip, we need to know which test classes we need to run in advance. Although Apple does not provide an API to obtain the list before running tests, this can be done in several ways. One approach we can use is to generate test classes using &lt;a href=&quot;https://github.com/krzysztofzablocki/Sourcery&quot;&gt;Sourcery&lt;/a&gt;. Another alternative is to parse the binaries inside &lt;code class=&quot;highlighter-rouge&quot;&gt;.xctest&lt;/code&gt; bundles (in build products) to look for symbols related to tests.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In this article, we identified some factors causing test execution time imbalance in Xcode parallel testing (particularly for UI tests).&lt;/p&gt;

&lt;p&gt;We also looked into how Xcode distributes tests in parallel testing. We also try to mitigate a constraint in which tests within the same class run on the same simulator. The trick not only reduces the imbalance but also gives us more confidence in adding more tests to a class without caring about whether it affects our CI infrastructure.&lt;/p&gt;

&lt;p&gt;Below is the metric about test time imbalance recorded when running UI tests. After adopting the trick, we saw a decrease in the metric (which is a good sign). As of now, the metric stabilizes at around 0.4 mins.&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;&lt;figure&gt;
  &lt;img src=&quot;/img/tackling-ui-test-execution-time-imbalance-for-xcode-parallel-testing/image4.png&quot; alt=&quot;Tracking data of UI test time imbalance (in minutes) in our project, collected by multiple runs&quot; /&gt;
  &lt;figcaption align=&quot;middle&quot;&gt;&lt;i&gt;Tracking data of UI test time imbalance (in minutes) in our project, collected by multiple runs&lt;/i&gt;&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/div&gt;

&lt;h2 id=&quot;join-us&quot;&gt;Join us&lt;/h2&gt;
&lt;p&gt;Grab is more than just the leading ride-hailing and mobile payments platform in Southeast Asia. We use data and technology to improve everything from transportation to payments and financial services across a region of more than 620 million people. We aspire to unlock the true potential of Southeast Asia and look for like-minded individuals to join us on this ride.&lt;/p&gt;

&lt;p&gt;If you share our vision of driving South East Asia forward, &lt;a href=&quot;https://grab.careers/jobs/&quot;&gt;apply&lt;/a&gt; to join our team today.&lt;/p&gt;
</description>
        <pubDate>Mon, 16 Mar 2020 08:13:20 +0000</pubDate>
        <link>https://engineering.grab.com/tackling-ui-test-execution-time-imbalance-for-xcode-parallel-testing</link>
        <guid isPermaLink="true">https://engineering.grab.com/tackling-ui-test-execution-time-imbalance-for-xcode-parallel-testing</guid>
        
        <category>xcode</category>
        
        <category>testing</category>
        
        <category>mobile</category>
        
        <category>parallelism</category>
        
        <category>UI tests</category>
        
        <category>CI</category>
        
        <category>iOS</category>
        
        
        <category>Engineering</category>
        
      </item>
    
      <item>
        <title>Returning 575 Terabytes of storage space back to our users</title>
        <description>&lt;p&gt;Have you ever run out of storage on your phone? Mobile phones come with limited storage and with the multiplication of apps and large video files, many of you are running out of space.&lt;/p&gt;

&lt;p&gt;In this article, we explain how we measure and reduce the storage footprint of the Grab App on a user’s device to help you overcome this issue.&lt;/p&gt;

&lt;h2 id=&quot;the-wakeup-call&quot;&gt;The wakeup call&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.android.com/topic/performance/vitals&quot;&gt;Android vitals&lt;/a&gt; (information provided by Google play Console about our app performance) gives us two main pieces of information about storage footprint.&lt;/p&gt;

&lt;p&gt;15.7% of users have less than 1GB of free storage and they tend to uninstall more than other users (1.2x).&lt;/p&gt;

&lt;p&gt;The proportion of 30 day active devices which reported less than 1GB free storage. Calculated as a 30 days rolling average.&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;&lt;figure&gt;
  &lt;img src=&quot;/img/returning-storage-space-back-to-our-users/image2.png&quot; alt=&quot;Active devices with &amp;lt;1GB free space&quot; /&gt;
  &lt;figcaption align=&quot;middle&quot;&gt;&lt;i&gt;Active devices with &amp;lt;1GB free space&lt;/i&gt;&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;This is the ratio of uninstalls on active devices with less than 1GB free storage to uninstalls on all active devices. Calculated as a 30 days rolling average.&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;&lt;figure&gt;
  &lt;img src=&quot;/img/returning-storage-space-back-to-our-users/image5.png&quot; alt=&quot;Ratio of uninstalls on active devices with less than 1GB&quot; /&gt;
  &lt;figcaption align=&quot;middle&quot;&gt;&lt;i&gt;Ratio of uninstalls on active devices with less than 1GB&lt;/i&gt;&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/div&gt;

&lt;h2 id=&quot;instrumentation-to-know-where-we-stand&quot;&gt;Instrumentation to know where we stand&lt;/h2&gt;

&lt;p&gt;First things first, we needed to know how much space the Grab App occupies on user device. So we started using our personal devices. We can find this information by opening the phone settings and selecting Grab App.&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;&lt;figure&gt;
  &lt;img src=&quot;/img/returning-storage-space-back-to-our-users/image3.jpg&quot; alt=&quot;App Settings&quot; /&gt;
  &lt;figcaption align=&quot;middle&quot;&gt;&lt;i&gt;App Settings&lt;/i&gt;&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;For this device (screenshot), the application itself (Installed binary) was 186 MB and the total footprint was 322 MB. Since this information varies a lot based on the usage of the app, we needed this information directly from our users in production.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Disclaimer: We are only measuring files that are inside the internal Grab app folder (Cache/Database). We do NOT measure any file that is not inside the private Grab folder.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We decided to leverage on our current implementation using &lt;a href=&quot;https://developer.android.com/reference/android/os/storage/StorageManager&quot;&gt;StorageManager&lt;/a&gt; API to gather the following information during each session launch:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Application Size (Installed binary size)&lt;/li&gt;
  &lt;li&gt;Cache folder size&lt;/li&gt;
  &lt;li&gt;Total footprint&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;post-image-section&quot;&gt;&lt;figure&gt;
  &lt;img src=&quot;/img/returning-storage-space-back-to-our-users/image1.png&quot; alt=&quot;Sample code to retrieve storage information on Android&quot; /&gt;
  &lt;figcaption align=&quot;middle&quot;&gt;&lt;i&gt;Sample code to retrieve storage information on Android&lt;/i&gt;&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/div&gt;

&lt;h3 id=&quot;data-analysis&quot;&gt;Data analysis&lt;/h3&gt;

&lt;p&gt;We began analysing this data one month after our users’ updated their app and found that the cache size was anomaly huge (&amp;gt; 1GB) for a lot of users. Intrigued, we dug deeper.&lt;/p&gt;

&lt;p&gt;We added code to log the top largest files inside the cache folder, and we found that most of the files were inside a sub cache folder that was no longer in use. This was due to a usage of a 3rd party library that was removed from our app. We added a specific metric to track the size of this folder.&lt;/p&gt;

&lt;p&gt;In the end, a lot of users still had this old cache data and for some users the amount of data can be up to 1GB.&lt;/p&gt;

&lt;h3 id=&quot;root-cause-analysis&quot;&gt;Root cause analysis&lt;/h3&gt;

&lt;p&gt;The Grab app relies a lot on 3rd party libraries. For example, &lt;a href=&quot;https://github.com/square/picasso&quot;&gt;Picasso&lt;/a&gt; was a library we used in the past for image display which is now replaced by &lt;a href=&quot;https://developer.android.com/topic/performance/graphics/load-bitmap&quot;&gt;Glide&lt;/a&gt;. Picasso uses a cache to store images and avoid making network calls again and again. After removing Picasso from the app, we didn’t delete this cache folder on the user device. We knew there would likely be more third-party libraries that had been discontinued so we expanded our analysis to look at how other 3rd party libraries cached their data.&lt;/p&gt;

&lt;h2 id=&quot;freeing-up-space-on-users-phone&quot;&gt;Freeing up space on user’s phone&lt;/h2&gt;

&lt;p&gt;Here comes the fun part. We implemented a cleanup mechanism to remove old cache folders. When users update the GrabApp, any old cache folders which were there before would automatically be removed. Through this, we released up to 1GB of data in a second back to our users. In total, we removed 575 terabytes of old cache data across more than 13 million devices (approximately 40MB per user on average).&lt;/p&gt;

&lt;h2 id=&quot;data-summary&quot;&gt;Data summary&lt;/h2&gt;

&lt;p&gt;The following graph shows the total size of junk data (in Terabytes) that we can potentially remove each day, calculated by summing up the maximum size of cache when a user opens the Grab app each day.&lt;/p&gt;

&lt;p&gt;The first half of the graph reflects the amount of junk data in relation to the latest app version before auto-clean up was activated. The second half of the graph shows a dramatic dip in junk data after auto-clean up was activated. We were deleting up to 33 Terabytes of data per day on the user’s device when we first started!&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;&lt;figure&gt;
  &lt;img src=&quot;/img/returning-storage-space-back-to-our-users/image4.png&quot; alt=&quot;Sum of all junk data on user’s device reported per day in Terabytes&quot; /&gt;
  &lt;figcaption align=&quot;middle&quot;&gt;&lt;i&gt;Sum of all junk data on user’s device reported per day in Terabytes&lt;/i&gt;&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/div&gt;

&lt;h2 id=&quot;next-step&quot;&gt;Next step&lt;/h2&gt;

&lt;p&gt;This is the first phase of our journey in reducing the storage footprint of our app on Android devices. We specifically focused on making improvements at scale i.e. deliver huge storage gains to the most number of users in the shortest time. In the next phase, we will look at more targeted improvements for specific groups of users that still have a high storage footprint. In addition, we are also reviewing iOS data to see if a round of clean up is necessary.&lt;/p&gt;

&lt;p&gt;Concurrently, we are also reducing the maximum size of cache created by some libraries. For example, Glide by default creates a cache of 250MB but this can be configured and optimised.&lt;/p&gt;

&lt;p&gt;We hope you found this piece insightful and please remember to update your app regularly to benefit from the improvements we’re making every day. If you find that your app is still taking a lot of space on your phone, be assured that we’re looking into it.&lt;/p&gt;

&lt;h2 id=&quot;join-us&quot;&gt;Join us&lt;/h2&gt;

&lt;p&gt;Grab is more than just the leading ride-hailing and mobile payments platform in Southeast Asia. We use data and technology to improve everything from transportation to payments and financial services across a region of more than 620 million people. We aspire to unlock the true potential of Southeast Asia and look for like-minded individuals to join us on this ride.&lt;/p&gt;

&lt;p&gt;If you share our vision of driving South East Asia forward, &lt;a href=&quot;https://grab.careers/jobs/&quot;&gt;apply&lt;/a&gt; to join our team today.&lt;/p&gt;
</description>
        <pubDate>Tue, 25 Feb 2020 20:13:00 +0000</pubDate>
        <link>https://engineering.grab.com/returning-storage-space-back-to-our-users</link>
        <guid isPermaLink="true">https://engineering.grab.com/returning-storage-space-back-to-our-users</guid>
        
        <category>Mobile</category>
        
        <category>Android</category>
        
        <category>Performance</category>
        
        
        <category>Engineering</category>
        
      </item>
    
      <item>
        <title>Grab-Posisi - Southeast Asia’s first comprehensive GPS trajectory dataset</title>
        <description>&lt;h2 id=&quot;introduction&quot;&gt;Introduction        &lt;/h2&gt;

&lt;p&gt;At Grab, thousands of bookings happen daily via the Grab app. The driver phones and GPS devices enable us to collect large-scale GPS trajectories.&lt;/p&gt;

&lt;p&gt;Apart from the time and location of the object, GPS trajectories are also characterised by other parameters such as speed, the headed direction, the area and distance covered during its travel, and the travelled time. Thus, the trajectory patterns from users GPS data are a valuable source of information for a wide range of urban applications, such as solving transportation problems, traffic prediction, and developing reasonable urban planning.&lt;/p&gt;

&lt;p&gt;Currently, it’s a herculean task to create and maintain the GPS datasets since it’s costly and laborious. As a result, most of the GPS datasets available today in the market have poor coverage or contain outdated information. They cover only a small area of a city, have low sampling rates and contain less contextual information of the GPS pings such as no accuracy level, bearing, and speed. Despite over a dozen mapping communities engaged in collecting GPS trajectory datasets, a significant amount of effort would be required for data cleaning and data pre-processing in order to utilize them.&lt;/p&gt;

&lt;p&gt;To overcome the shortfalls in the existing datasets, we built Grab-Posisi, the first GPS trajectory dataset of Southeast Asia. The term Posisi refers to a position in Bahasa. The data was collected from Grab drivers’ phones while in transit. By tackling the addition of major arterial roads in regions where existing maps have poor coverage, and the incremental improvement of coverage in regions where major roads are already mapped, Posisi substantially improves mapping productivity.&lt;/p&gt;

&lt;h2 id=&quot;whats-inside-the-dataset&quot;&gt;What’s inside the dataset&lt;/h2&gt;

&lt;p&gt;The whole Grab-Posisi dataset contains in total 84K trajectories that consist of more than 80 million GPS pings and cover over 1 million km. The average trajectory length is 11.94 km and the average duration per trip is 21.50 minutes.&lt;/p&gt;

&lt;p&gt;The data were collected very recently in April 2019 with a 1 second sampling rate, which is the highest amongst all the publicly available datasets. It also has richer contextual information, including the accuracy level, bearing and speed. The accuracy level is important because GPS measurements are noisy and the true location can be anywhere inside a circle centred at the reported location with a radius equal to the accuracy level. The bearing is the horizontal direction of travel, measured in degrees relative to true north. Finally, the speed is reported in meters/second over ground.&lt;/p&gt;

&lt;p&gt;As the GPS trajectories were collected from Grab drivers’ phones while in transit, we labelled each trajectory by phone device type being either Android or iOS. This is the first dataset which differentiates such device information. Furthermore, we also label the trajectories by driving mode (Car or Motorcycle).&lt;/p&gt;

&lt;p&gt;All drivers’ personal information is encrypted and the real start/end locations are removed within the dataset.&lt;/p&gt;

&lt;h3 id=&quot;data-format&quot;&gt;Data format&lt;/h3&gt;

&lt;p&gt;Each trajectory is serialised in a file in Apache Parquet format. The whole dataset size is around 2 GB. Each GPS ping is associated with values for a trajectory ID, latitude, longitude, timestamp (UTC), accuracy level, bearing and speed. The GPS sampling rate is 1 second, which is the highest among all the existing open source datasets. Table 1 shows a sample of the dataset.&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;&lt;figure&gt;
  &lt;img src=&quot;/img/grab-posisi/image6.png&quot; alt=&quot;Table 1: Sample dataset&quot; /&gt;
  &lt;figcaption align=&quot;middle&quot;&gt;&lt;i&gt;Table 1: Sample dataset&lt;/i&gt;&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/div&gt;

&lt;h3 id=&quot;coverage&quot;&gt;Coverage&lt;/h3&gt;

&lt;p&gt;Figure 1a shows the spatial coverage of the dataset in Singapore. Compared with the GPS datasets available in the market that only cover a specific area of a city, the Grab-Posisi dataset encompasses almost the whole island of Singapore. Figure 1b depicts the GPS density in Singapore. Red represents high density while green represents low density. Expressways in Singapore are clearly visible because of their dense GPS pings.&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;&lt;figure&gt;
  &lt;img src=&quot;/img/grab-posisi/image7.png&quot; alt=&quot;Figure 1a. Spatial coverage (Singapore)&quot; /&gt;
  &lt;figcaption align=&quot;middle&quot;&gt;&lt;i&gt;Figure 1a. Spatial coverage (Singapore)&lt;/i&gt;&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/div&gt;

&lt;div class=&quot;post-image-section&quot;&gt;&lt;figure&gt;
  &lt;img src=&quot;/img/grab-posisi/image5.png&quot; alt=&quot;Figure 1b. GPS density (highways have more GPS)&quot; /&gt;
  &lt;figcaption align=&quot;middle&quot;&gt;&lt;i&gt;Figure 1b. GPS density (highways have more GPS)&lt;/i&gt;&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;Figure 2a illustrates that the Grab-Posisi dataset encloses not only central Jakarta but also extends to external highways. Figure 2b depicts the GPS density of cars in Jakarta. Compared with Singapore, trips in Jakarta are spread out in all different areas, not just concentrated on highways.&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;&lt;figure&gt;
  &lt;img src=&quot;/img/grab-posisi/image2.png&quot; alt=&quot;Figure 2a. Spatial coverage (Jakarta)&quot; /&gt;
  &lt;figcaption align=&quot;middle&quot;&gt;&lt;i&gt;Figure 2a. Spatial coverage (Jakarta)&lt;/i&gt;&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/div&gt;

&lt;div class=&quot;post-image-section&quot;&gt;&lt;figure&gt;
  &lt;img src=&quot;/img/grab-posisi/image1.png&quot; alt=&quot;Figure 2b. GPS density (Car)&quot; /&gt;
  &lt;figcaption align=&quot;middle&quot;&gt;&lt;i&gt;Figure 2b. GPS density (Car)&lt;/i&gt;&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/div&gt;

&lt;h4 id=&quot;applications-of-grab-posisi&quot;&gt;Applications of Grab-Posisi&lt;/h4&gt;

&lt;p&gt;The following are some of the applications of Grab-Posisi dataset.&lt;/p&gt;

&lt;h5 id=&quot;on-map-inference&quot;&gt;On Map Inference&lt;/h5&gt;

&lt;p&gt;The traditional method used in updating road networks in maps is time-consuming and labour-intensive. That’s why maps might have important roads missing and real-time traffic conditions might be unavailable. To address this problem, we can use GPS trajectories in reconstructing road networks automatically.&lt;/p&gt;

&lt;p&gt;A bunch of map generation algorithms can be applied to infer both map topology and road attributes. Figure 3b shows a snippet of the inferred map from our GPS trajectories (Figure 3a) using one of the algorithms. As you can see from the blue dots, the skeleton of the underlining map inferred is correct, although some section of the inferred road is disconnected, and at the roundabout in the bottom right corner it’s not a smooth curve.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
&lt;div class=&quot;row&quot;&gt;
  &lt;div class=&quot;column&quot;&gt;
    &lt;img src=&quot;/img/grab-posisi/image3.jpg&quot; alt=&quot;Figure 3a. Raw GPS trajectories&quot; /&gt;
    &lt;figcaption align=&quot;middle&quot;&gt;&lt;i&gt;Figure 3a. Raw GPS trajectories  &lt;/i&gt;&lt;/figcaption&gt;
  &lt;/div&gt;
  &lt;div class=&quot;column&quot;&gt;
    &lt;img src=&quot;/img/grab-posisi/image4.jpg&quot; alt=&quot;Figure 3b. Inferred Map&quot; /&gt;
    &lt;figcaption align=&quot;middle&quot;&gt;&lt;i&gt;Figure 3b. Inferred Map&lt;/i&gt;&lt;/figcaption&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h5 id=&quot;on-map-matching-&quot;&gt;On Map Matching                                         &lt;/h5&gt;

&lt;p&gt;The map matching refers to the task of automatically determining the correct route where the driver has travelled on a digital map, given a sequence of raw and noisy GPS points. The correction of the raw GPS data has been important for many location-based applications such as navigation, tracking, and road attribute detection as aforementioned. The accuracy levels provided in the Grab-Posisi dataset can be of great use to address this issue.&lt;/p&gt;

&lt;h5 id=&quot;on-traffic-detection-and-forecast-&quot;&gt;On Traffic Detection and Forecast                         &lt;/h5&gt;

&lt;p&gt;In addition to the inference of a static digital map, the Grab-Posisi GPS dataset can also be used to perform real-time traffic forecasting, which is very important for congestion detection, flow control, route planning, and navigation. Some examples of the fundamental indicators that are mostly used to monitor the current status of traffic conditions include the average speed, volume, and density in each road segment. These variables can be computed based on drivers’ GPS trajectories and can be used to predict the future traffic conditions.&lt;/p&gt;

&lt;h5 id=&quot;on-mode-detection-&quot;&gt;On Mode Detection                         &lt;/h5&gt;

&lt;p&gt;Transportation mode detection refers to the task of identifying the travel mode of a user (some examples of transportation mode include walk, bike, car, bus, etc.). The GPS trajectories in our dataset are associated with rich attributes including GPS accuracy, bearing, and speed in addition to the latitude and longitude of geo-coordinates, which can be used to develop mode detection models. Our dataset also provides labels for each trajectory to be collected from a car or motorcycle, which can be used to verify performance of those models.&lt;/p&gt;

&lt;h5 id=&quot;economics-perspective-&quot;&gt;Economics Perspective                                         &lt;/h5&gt;

&lt;p&gt;The real-world GPS trajectories of people reveal realistic travel patterns and demands, which can be of great help for city planning. As there are some realistic constraints faced by governments such as budget limitations and construction inconvenience, it is important to incorporate both the planning authorities’ requirements and the realistic travel demands mined from trajectories for intelligent city planning. For example, the trajectories of cars can provide suggestions on how to schedule highway constructions. The trajectories of motorcycles can help the government to choose the optimal locations to construct motorcycle lanes for safety concerns.&lt;/p&gt;

&lt;h2 id=&quot;want-to-access-our-dataset&quot;&gt;Want to access our dataset?&lt;/h2&gt;

&lt;p&gt;Grab-Posisi dataset offers a great value and is a significant resource to the community for benchmarking and revisiting existing technologies.         &lt;/p&gt;

&lt;p&gt;If you want to access our dataset for research purposes, email &lt;a href=&quot;mailto:grab.posisi@grabtaxi.com&quot;&gt;grab.posisi@grabtaxi.com&lt;/a&gt; with the following details:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Your Name and contact details&lt;/li&gt;
  &lt;li&gt;Your institution&lt;/li&gt;
  &lt;li&gt;Your potential usage of the dataset&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When using Grab-Posisi dataset, please cite the following paper:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Huang, X., Yin, Y., Lim, S., Wang, G., Hu, B., Varadarajan, J., … &amp;amp; Zimmermann, R. (2019, November). Grab-Posisi: An Extensive Real-Life GPS Trajectory Dataset in Southeast Asia. In Proceedings of the 3rd ACM SIGSPATIAL International Workshop on Prediction of Human Mobility (pp. 1-10). DOI: &lt;a href=&quot;https://doi.org/10.1145/3356995.3364536&quot;&gt;https://doi.org/10.1145/3356995.3364536&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;div&gt;Click &lt;a href=&quot;/files/Grab-Posisi_An_Extensive_Real-Life_GPS_Trajectory_Dataset_in_Southeast_Asia.pdf&quot; download=&quot;&quot;&gt;here&lt;/a&gt; to download the published paper.&lt;p&gt;&lt;/p&gt;&lt;/div&gt;

&lt;div&gt;Click &lt;a href=&quot;/files/grab-posisi-dataset.bib&quot; download=&quot;&quot;&gt;here&lt;/a&gt; to download the BibTex file.&lt;p&gt;&lt;/p&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Note: You cannot use Grab-Posisi dataset for commercial purposes.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;join-us&quot;&gt;Join us&lt;/h2&gt;

&lt;p&gt;Grab is more than just the leading ride-hailing and mobile payments platform in Southeast Asia. We use data and technology to improve everything from transportation to payments and financial services across a region of more than 620 million people. We aspire to unlock the true potential of Southeast Asia and look for like-minded individuals to join us on this ride.&lt;/p&gt;

&lt;p&gt;If you share our vision of driving South East Asia forward, &lt;a href=&quot;https://grab.careers/jobs/&quot;&gt;apply&lt;/a&gt; to join our team today.&lt;/p&gt;
</description>
        <pubDate>Thu, 20 Feb 2020 18:43:40 +0000</pubDate>
        <link>https://engineering.grab.com/grab-posisi</link>
        <guid isPermaLink="true">https://engineering.grab.com/grab-posisi</guid>
        
        <category>gps</category>
        
        <category>datasets</category>
        
        <category>map</category>
        
        
        <category>Engineering</category>
        
      </item>
    
  </channel>
</rss>
