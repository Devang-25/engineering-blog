<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Grab Tech</title>
    <description>Grab's Engineering team solves critical transportation challenges and makes transport freedom a reality for 620 million people in Southeast Asia.
</description>
    <link>https://engineering.grab.com/</link>
    <atom:link href="https://engineering.grab.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Fri, 31 May 2019 10:50:54 +0000</pubDate>
    <lastBuildDate>Fri, 31 May 2019 10:50:54 +0000</lastBuildDate>
    <generator>Jekyll v3.8.4</generator>
    
      <item>
        <title>React Native in GrabPay</title>
        <description>&lt;h1 id=&quot;overview&quot;&gt;Overview&lt;/h1&gt;

&lt;p&gt;It wasn’t too long ago that Grab formed a new team, GrabPay, to improve the cashless experience in Southeast Asia and to venture into the promising mobile payments arena. To support the work, Grab also decided to open a new R&amp;amp;D center in Bangalore.&lt;/p&gt;

&lt;p&gt;It was an exciting journey for the team from the very beginning, as it gave us the opportunity to experiment with new cutting edge technologies. Our first release was the &lt;a href=&quot;https://itunes.apple.com/sg/app/grabpay-merchant/id1343620481?mt%3D8&quot;&gt;GrabPay Merchant App&lt;/a&gt;, the first all React Native Grab App. Its success gave us the confidence to use React Native to optimize the Grab PAX app.&lt;/p&gt;

&lt;p&gt;React Native is an open source mobile application framework. It lets developers use React (a JavaScript library for building user interfaces) with native platform capabilities. Its two big advantages are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We could make cross-platform mobile apps and components completely in JavaScript.&lt;/li&gt;
  &lt;li&gt;Its &lt;a href=&quot;http://facebook.github.io/react-native/blog/2016/03/24/introducing-hot-reloading&quot;&gt;hot reloading&lt;/a&gt; feature significantly reduced development time.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This post describes our work on developing React Native components for Grab apps, the challenges faced during implementation, what we learned from other internal React Native projects, and our future roadmap.&lt;/p&gt;

&lt;p&gt;Before embarking on our work with React Native, these were the goals we set out. We wanted to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Have a reusable code between Android and iOS as well as across various Grab apps (Driver app, Merchant app, etc.).&lt;/li&gt;
  &lt;li&gt;Have a single codebase to minimize the effort needed to modify and maintain our code long term.&lt;/li&gt;
  &lt;li&gt;Match the performance and standards of existing Grab apps.&lt;/li&gt;
  &lt;li&gt;Use as few Engineering resources as possible.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;challenges&quot;&gt;Challenges&lt;/h1&gt;

&lt;p&gt;Many Grab teams located across Southeast Asia and in the United States support the App platform. It was hard to convince all of them to add React Native as a project dependency and write new feature code with React Native. In particular, having React Native dependency significantly increases a project’s binary’s size,&lt;/p&gt;

&lt;p&gt;But the initial cost was worth it. We now have only a few modules, all written in React Native:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Express&lt;/li&gt;
  &lt;li&gt;Transaction History&lt;/li&gt;
  &lt;li&gt;Postpaid Billpay&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As there is only one codebase instead of two, the modules take half the maintenance resources. Debugging is faster with React Native’s hot reloading. And it’s much easier and faster to implement one of our modules in another app, such as DAX.&lt;/p&gt;

&lt;p&gt;Another challenge was creating a universally acceptable format for a bridging library to communicate between existing code and React Native modules. We had to define fixed guidelines to create new bridges and define communication protocols between React Native modules and existing code.&lt;/p&gt;

&lt;p&gt;Invoking a module written in React Native from a Native Module (written in a standard computer language such as Swift or Kotlin) should follow certain guidelines. Once all Grab’s tech families reached consensus on solutions to these problems, we started making our bridges and doing the groundwork to use React Native.&lt;/p&gt;

&lt;h1 id=&quot;foundation&quot;&gt;Foundation&lt;/h1&gt;

&lt;p&gt;On the native side, we used the Grablet architecture to add our React Native modules. Grablet gave us a wonderful opportunity to scale our Grab platform so it could be used by any tech family to plug and play their module. And the module could be in any of  Native, React Native, Flutter, or Web.&lt;/p&gt;

&lt;p&gt;We also created a framework encapsulating all the project’s React Native Binaries. This simplified the React Native Upgrade process. Dependencies for the framework are &lt;a href=&quot;https://www.npmjs.com/package/react&quot;&gt;react&lt;/a&gt;, &lt;a href=&quot;https://www.npmjs.com/package/react-native&quot;&gt;react-native&lt;/a&gt;, and &lt;a href=&quot;https://www.npmjs.com/package/react-native-event-bridge&quot;&gt;react-native-event-bridge&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We had some internal proof of concept projects for determining React Native’s performance on different devices, as discussed here. Many teams helped us make an extensive set of JS bridges for React Native in Android and iOS. Oleksandr Prokofiev wrote this bridge creation example:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;publicfinalclassDeviceKitModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;RCTBridgeModule&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;nv&quot;&gt;privateletdeviceKit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;DeviceKitService&lt;/span&gt;

 &lt;span class=&quot;nf&quot;&gt;publicinit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;deviceKit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;DeviceKitService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deviceKit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deviceKit&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;nf&quot;&gt;publicstaticfuncmoduleName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;DeviceKitModule&quot;&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;nf&quot;&gt;publicfuncmethodsToExport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;RCTBridgeMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;RCTBridgeMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
     &lt;span class=&quot;nf&quot;&gt;buildGetDeviceID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compactMap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

 &lt;span class=&quot;nf&quot;&gt;privatefuncbuildGetDeviceID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;BridgeMethodWrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;nf&quot;&gt;returnBridgeMethodWrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;getDeviceID&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weakself&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;letvalue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deviceKit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getDeviceID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
     &lt;span class=&quot;nf&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;grabpay-components-and-react-native&quot;&gt;GrabPay Components and React Native&lt;/h2&gt;

&lt;p&gt;The GrabPay Merchant App gave us a good foundation for React Native in terms of&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Component libraries&lt;/li&gt;
  &lt;li&gt;Networking layer and api middleware&lt;/li&gt;
  &lt;li&gt;Real world data for internal assessment of performance and stability&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We used this knowledge to build theTransaction History and GrabPay Digital Marketplace components inside the Grab Pax App with React Native.&lt;/p&gt;

&lt;h3 id=&quot;component-library&quot;&gt;Component Library&lt;/h3&gt;

&lt;p&gt;We selected particularly useful components from the Merchant App codebase such as &lt;code class=&quot;highlighter-rouge&quot;&gt;GPText&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;GPTextInput&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;GPErrorView&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;GPActivityIndicator&lt;/code&gt;. We expanded that selection to a common (internal) component library of approximately 20 stateless and stateful components.&lt;/p&gt;

&lt;h3 id=&quot;api-calls&quot;&gt;API Calls&lt;/h3&gt;

&lt;p&gt;We used to make api calls using &lt;a href=&quot;https://github.com/axios/axios&quot;&gt;axios&lt;/a&gt; (now deprecated). We now make calls from the Native side using bridges that return a promise and make api calls using an existing framework. This helped us remove the dependency for getting an access token from  Native-Android or Native-iOS to make the calls. Also it helped us optimize the api requests, as suggested by &lt;a href=&quot;https://hasgeek.com/reactfoo/2019/proposals/building-react-native-8TGxsthFUN4CJi2B82zDxd&quot;&gt;Parashuram&lt;/a&gt; from Facebook’s React Native team.&lt;/p&gt;

&lt;h3 id=&quot;locale&quot;&gt;Locale&lt;/h3&gt;

&lt;p&gt;We use &lt;a href=&quot;https://www.npmjs.com/package/react-localize-redux&quot;&gt;React Localize Redux&lt;/a&gt; for all our translations and &lt;a href=&quot;https://www.npmjs.com/package/moment&quot;&gt;moment&lt;/a&gt; for our date time conversion as per the device’s current Locale. We currently support translation in five languages; English, Chinese Simplified, Bahasa Indonesia, Malay, and Vietnamese. This Swift code shows how we get the device’s current Locale from the native-react Native Bridge.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;methodsToExport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;RCTBridgeMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;RCTBridgeMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
     &lt;span class=&quot;kt&quot;&gt;BridgeMethodWrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;getLocaleIdentifier&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resolver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;letlocaleIdentifier&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;locale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getLocaleIdentifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
     &lt;span class=&quot;nf&quot;&gt;resolver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localeIdentifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;})]&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compactMap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;redux&quot;&gt;Redux&lt;/h3&gt;

&lt;p&gt;Redux is an extremely lightweight predictable state container that behaves consistently in every environment. We use Redux with React Native to manage its state.&lt;/p&gt;

&lt;h3 id=&quot;navigation&quot;&gt;Navigation&lt;/h3&gt;

&lt;p&gt;For in-app navigation we use &lt;a href=&quot;https://reactnavigation.org/docs/en/getting-started.html&quot;&gt;react-navigation&lt;/a&gt;. It is very flexible in adapting to both the Android and iOS navigation and gesture recognition styles.&lt;/p&gt;

&lt;h1 id=&quot;end-product&quot;&gt;End Product&lt;/h1&gt;

&lt;p&gt;After setting up our foundation bridges and porting skeleton boilerplate code from the GrabPay Merchant App, we wrote two payments modules using GrabPay Digital Marketplace (also known as BillPay), React Native, and Transaction History.&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;Grab app - Selecting a company&quot; src=&quot;/img/react-native-in-grabpay/image4.jpg&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;The ios Version is on the left and the Android version is on the right. Not only do their UIs look identical, but also their code is identical. A single codebase lets us debug faster, deliver quicker, and maintain smaller (codebase; apologies but it was necessary for the joke).&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;Grab app - Company selected&quot; src=&quot;/img/react-native-in-grabpay/image6.jpg&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;We launched BillPay first in Indonesia, then in Vietnam and Malaysia. So far, it’s been a very stable product with little to no downtime.&lt;/p&gt;

&lt;p&gt;Transaction History started in Singapore and is now rolling out in other countries.&lt;/p&gt;

&lt;h1 id=&quot;flow-for-billpay&quot;&gt;Flow For BillPay&lt;/h1&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;BillPay Flow&quot; src=&quot;/img/react-native-in-grabpay/image3.jpg&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;The above shows BillPay’s flow.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;We start with the first screen, called Biller List. It shows all the postpaid billers available for the current region. For now, we show Billers based on which country the user is in. The user selects a biller.&lt;/li&gt;
  &lt;li&gt;We then asks for your &lt;code class=&quot;highlighter-rouge&quot;&gt;customerID&lt;/code&gt; (or prefills that value if you have paid your bill before). The amount is either fetched from the backend or filled in by the user, depending on the region and biller type.&lt;/li&gt;
  &lt;li&gt;Next, the user confirms all the entered details before they pay the dues.&lt;/li&gt;
  &lt;li&gt;Finally, the user sees their bill payment receipt. It comes directly from the biller, and so it’s a valid proof of payment.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Our React Native version has kept the same experience as our Native developed App and help users pay their bills seamlessly and hassle free.&lt;/p&gt;

&lt;h1 id=&quot;future&quot;&gt;Future&lt;/h1&gt;

&lt;p&gt;We are moving code to Typescript to reduce compile-time bugs and clean up our code. In addition to reducing native dependencies, we will refactor modules as needed. We will also have 100% unit test code coverage. But most importantly, we plan to open source our component library as soon as we feel it is stable.&lt;/p&gt;
</description>
        <pubDate>Thu, 30 May 2019 17:00:00 +0000</pubDate>
        <link>https://engineering.grab.com/react-native-in-grabpay</link>
        <guid isPermaLink="true">https://engineering.grab.com/react-native-in-grabpay</guid>
        
        <category>Grab</category>
        
        <category>Mobile</category>
        
        <category>GrabPay</category>
        
        <category>React</category>
        
        
        <category>Engineering</category>
        
      </item>
    
      <item>
        <title>Connecting the Invisibles to Design Seamless Experiences</title>
        <description>&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;Leonardo Da Vinci's Vitruvian Man&quot; src=&quot;/img/connecting-the-invisibles-to-design-seamless-experiences/image2.jpg&quot; /&gt;
  &lt;small class=&quot;post-image-caption&quot;&gt;Leonardo Da Vinci's Vitruvian Man (Source: &lt;a href=&quot;https://www.google.com/url?q=http://commons.wikimedia.org/wiki/File:Vitruvian.jpg&amp;amp;sa=D&amp;amp;ust=1559122791757000&quot;&gt;Public Doman @Wikicommons&lt;/a&gt;)&lt;/small&gt;
&lt;/div&gt;

&lt;h2 id=&quot;before-we-begin-what-is-service-design-anyway&quot;&gt;Before we begin, what is service design anyway?&lt;/h2&gt;

&lt;p&gt;In the world of design jargon, meet “service design”. Unlike other objectives in design to simplify and clarify, service design is not about building singular touchpoints. Rather, it is about bringing ease and harmony into large and often complex ecosystems.&lt;/p&gt;

&lt;p&gt;Think of the human body. There are organ systems such as the cardiovascular, respiratory, musculoskeletal, and nervous systems. These systems perform key functions that we see and feel everyday, like breathing, moving, and feeling.&lt;/p&gt;

&lt;p&gt;Service design serves as the connective tissue that brings the amazing systems together to work in harmony. Much of the work done by the service design team at Grab revolves around connecting online experiences to the offline world, connecting challenges across a complex ecosystem, and enabling effective collaboration across cross-functional teams.&lt;/p&gt;

&lt;h2 id=&quot;connecting-online-experiences-to-the-offline-world&quot;&gt;Connecting online experiences to the offline world&lt;/h2&gt;

&lt;p&gt;We explore holistic experiences by visualizing the connections across features, both through the online-offline as well as internal-external interactions. At Grab, we have a collection of (very cool!) features that many teams have worked hard to build. However, equally important is how a person arrives from feature to feature seamlessly, from the app to their physical experiences, as well as how our internal teams at Grab support and execute behind-the-scenes throughout our various systems.&lt;/p&gt;

&lt;p&gt;For example, placing an order on GrabFood requires much more work than sending information to the merchant through the Grab app. How might Grab&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;allocate drivers effectively,&lt;/li&gt;
  &lt;li&gt;support unhappy paths with our customer support team,&lt;/li&gt;
  &lt;li&gt;resolve discrepancies in our operations teams, and&lt;/li&gt;
  &lt;li&gt;store this data in a system that can continue to expand for future uses to come?&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;Connecting online experiences to the offline world&quot; src=&quot;/img/connecting-the-invisibles-to-design-seamless-experiences/image1.png&quot; /&gt;
&lt;/div&gt;

&lt;h2 id=&quot;connecting-challenges-across-a-complex-ecosystem&quot;&gt;Connecting challenges across a complex ecosystem&lt;/h2&gt;

&lt;p&gt;Sometimes, as designers, we might get too caught up in solving problems through a singular lens, and overlook how it affects the rest of the system. Meanwhile, many problems are part of a connected network. Changing one part of the problem can potentially affect other parts of the network.&lt;/p&gt;

&lt;p&gt;Considering those connections, or the “stuff in between”, makes service design a holistic practice - crossing boundaries between teams in search of a root cause, and considering how treating one problem might affect other parts of the network.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If this happens, then what?&lt;/li&gt;
  &lt;li&gt;Which point in the system is easiest to fix and has the greatest impact?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, if we want to introduce a feature for drivers to report restaurant closings, how might Grab&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ensure the report is accurate?&lt;/li&gt;
  &lt;li&gt;Deal with accidental closings or fraud?&lt;/li&gt;
  &lt;li&gt;Use that data for our operations team to make decisions?&lt;/li&gt;
  &lt;li&gt;Let drivers know when their report has led to a successful action?&lt;/li&gt;
  &lt;li&gt;Last but not least, is this the easiest point in the system to fix restaurant opening inaccuracies, or should this be tackled through an operational fix?&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;Connecting challenges across a complex ecosystem&quot; src=&quot;/img/connecting-the-invisibles-to-design-seamless-experiences/image4.png&quot; /&gt;
&lt;/div&gt;

&lt;h2 id=&quot;facilitating-effective-collaborations-in-cross-functional-teams&quot;&gt;Facilitating effective collaborations in cross-functional teams&lt;/h2&gt;

&lt;p&gt;Finally, we believe in the power of a participatory design process to unlock meaningful, customer-centric solutions. Working on the “stuff in between” often puts the service design team in the thick of alignment of priorities, creation of a common vision, and coherent action plans. Achieving this requires solid facilitation and processes for cross-team collaboration.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Who are the right stakeholders and how do we engage?&lt;/li&gt;
  &lt;li&gt;How does an initiative affect stakeholders, and how can they contribute?&lt;/li&gt;
  &lt;li&gt;How can we create visual processes that allow diverse stakeholders to have a shared understanding and co-create solutions?&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;Facilitating effective collaborations in cross-functional teams&quot; src=&quot;/img/connecting-the-invisibles-to-design-seamless-experiences/image3.png&quot; /&gt;
&lt;/div&gt;

&lt;h2 id=&quot;whats-the-ultimate-goal-a-harmonious-backstage-for-a-delightful-customer-experience&quot;&gt;What’s the ultimate goal? A Harmonious Backstage for a Delightful Customer Experience&lt;/h2&gt;

&lt;p&gt;By facilitating cross-functional collaborations and espousing a whole-of-Grab approach, the service design team at Grab helps to connect the dots in an interconnected ‘super-app’ service ecosystem. By empathising with our users, and having a deep understanding of how different parts of the Grab ecosystem affect one another, we hope to unleash the full power of Grab to deliver maximum value and delight to serve our users.&lt;/p&gt;
</description>
        <pubDate>Tue, 28 May 2019 18:43:40 +0000</pubDate>
        <link>https://engineering.grab.com/connecting-the-invisibles-to-design-seamless-experiences</link>
        <guid isPermaLink="true">https://engineering.grab.com/connecting-the-invisibles-to-design-seamless-experiences</guid>
        
        <category>Design</category>
        
        <category>Service Design</category>
        
        
        <category>Design</category>
        
      </item>
    
      <item>
        <title>Tourists on GrabChat!</title>
        <description>&lt;p&gt;Just over two years ago we introduced GrabChat, Southeast Asia’s first of its kind in-app messaging platform. Since then we’ve added all sorts of useful features to it. Auto-translated messages, the ability to send photos, and even voice messages! It’s been a great tool to facilitate smoother communications between our driver-partners and our passengers, and one group in particular has found it incredibly useful: tourists!&lt;/p&gt;

&lt;p&gt;Now, &lt;a href=&quot;https://medium.com/grab/journey-of-a-tourist-via-grab-1c711a4d0890&quot;&gt;we’ve analysed tourist data before&lt;/a&gt;, but we were curious about how GrabChat in particular has served this demographic. So we looked for interesting insights using sampled tourist chat data from Singapore, Malaysia, and Indonesia for the period of December 2018 to March 2019. That’s more than 3.7 million individual GrabChat messages sent by tourists! Here’s what we found.&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;Average chats per booking per country&quot; src=&quot;/img/tourist-chat-data-story/image9.png&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Looking at the volume of the chats being transmitted per booking, we can see that the “chattiest” tourists are from East Timor, Nigeria, and Ukraine with averages of 6.0, 5.6, and 5.1 chats per booking respectively.&lt;/p&gt;

&lt;p&gt;Then we wondered: if tourists from all over the world are talking this much to our driver-partners, how are they actually communicating if their mother-tongue is not the local language?&lt;/p&gt;

&lt;h2 id=&quot;need-a-translator&quot;&gt;Need a Translator?&lt;/h2&gt;

&lt;p&gt;When we go to another country, we eat all the heavenly good food, fall in love with the culture, and admire the scenery. Language and communication barriers shouldn’t get in the way of all of that. That’s why Grab’s Chat feature has got it covered!&lt;/p&gt;

&lt;p&gt;With Grab’s in-house translation solutions, any Grab passenger can send messages in their preferred language without fear of being misunderstood - or not understood at all! Their messages will be automatically translated into Bahasa Indonesia, Bahasa Melayu, Simplified Chinese, Thai, or Vietnamese depending on where they are. This applies not only apply to Grab’s transport services- GrabChat can be used when ordering GrabFood too!&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;Percentage of translated GrabChat messages&quot; src=&quot;/img/tourist-chat-data-story/image8.png&quot; /&gt;
  &lt;small class=&quot;post-image-caption&quot;&gt;Indonesia saw the highest usage of translations on a by-booking basis!&lt;/small&gt;
&lt;/div&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Let’s look deeper into the tourist translation statistics for each country with the donut charts below. We can see that the most popular translation route for tourists in Indonesia was from English to Indonesian. The story is different for Singapore and Malaysia: we can see that there are translations to and from a more diverse set of languages, reflecting a more multicultural demographic.&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;Percentage of translated GrabChat messages&quot; src=&quot;/img/tourist-chat-data-story/image5.png&quot; /&gt;
  &lt;small class=&quot;post-image-caption&quot;&gt;The most popular translation routes for tourist bookings in Indonesia, Malaysia, and Singapore.&lt;/small&gt;
&lt;/div&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h2 id=&quot;tap-for-templates&quot;&gt;Tap for Templates!&lt;/h2&gt;

&lt;p&gt;GrabChat also provides achat template feature. Templates are prewritten messages that you can send with just one tap! Did we mention that they are translated automatically too? Passengers and drivers can have a fast, simple, and translated conversation with each other without typing a single word- and sometimes, templates are really all you need.&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;Examples of chat templates, as they appear in GrabChat!&quot; src=&quot;/img/tourist-chat-data-story/image6.png&quot; /&gt;
  &lt;small class=&quot;post-image-caption&quot;&gt;Examples of chat templates, as they appear in GrabChat!&lt;/small&gt;
&lt;/div&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;As if all this wasn’t convenient enough, you can also make your own custom templates! Use them for those repetitive, identical messages you always seem to be sending out like telling your drivers where the hotel lobby is, or how to navigate right to your doorstep, or even to send a quick description of what you look like to make it easier for a driver to find you!&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;Template message usage&quot; src=&quot;/img/tourist-chat-data-story/image2.png&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Taking a look at individual country data, tourists in Indonesia used templates the most with almost 60% of all of them using a template in their conversations at least once. Malaysia and Singapore saw lower but still sizeable utilisation rates of this feature, at 53% and 33% respectively.&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;Template message usage percentage&quot; src=&quot;/img/tourist-chat-data-story/image10.png&quot; /&gt;
  &lt;small class=&quot;post-image-caption&quot;&gt;Indonesia saw the highest usage of templates on a by-booking basis.&lt;/small&gt;
&lt;/div&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;In our analysis, we found an interesting insight! There was a positive correlation between template usage and the success rate of rides. Overall, bookings that used templates in their conversations saw 10% more completions over bookings that didn’t.&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;Template vs completed bookings&quot; src=&quot;/img/tourist-chat-data-story/image4.png&quot; /&gt;
&lt;/div&gt;

&lt;h2 id=&quot;picture-this-a-hassle-free-experience&quot;&gt;Picture this: a hassle-free experience&lt;/h2&gt;

&lt;p&gt;A picture says a thousand words, and for tourists using GrabChat’s image feature, those thousand words don’t even need to be translated. Instead of typing out a description of where they are standing for pickup, they can just click, snap, and send an image!&lt;/p&gt;

&lt;p&gt;Our data revealed that GrabChat’s image functionality is most frequently used in areas where the tourist traffic is the highest. In fact, image function in GrabChat saw the most use in pickup areas such as airports, large shopping malls, public transport stations, and hotels, because it was harder for drivers to find their passengers in these crowded areas. Even with our super convenient &lt;a href=&quot;https://medium.com/grab/guiding-you-door-to-door-via-our-super-app-48b6b3cd93a&quot;&gt;Entrances feature&lt;/a&gt;, every little bit of information goes a long way to help your driver find you!&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;Pickup locations&quot; src=&quot;/img/tourist-chat-data-story/image7.png&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;If we take it a step further and look at the actual areas  within the cities where images were sent the most, we see that our initial hypothesis still holds fast.&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;Pickup locations&quot; src=&quot;/img/tourist-chat-data-story/image1.png&quot; /&gt;
  &lt;small class=&quot;post-image-caption&quot;&gt;The top 5 pickup areas per country in which images were the most prevalent in GrabChat (for tourists).&lt;/small&gt;
&lt;/div&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;In Singapore, we see the most images being sent out at the Downtown Core area- this area contains the majestic Marina Bay Sands, the Merlion statue, and the Esplanade, amongst other iconic attractions.&lt;/p&gt;

&lt;p&gt;In Malaysia, the highest image usage occurs at none other than the Kuala Lumpur City Centre (KLCC) itself. This area includes the Twin Towers, a plethora of malls and hotels, Bukit Bintang (a bustling and lively night-life zone), and even an aquarium.&lt;/p&gt;

&lt;p&gt;Indonesia’s top location for image chats is Kuta. A beach village in Bali, Kuta is a tourist hotspot with surfing, water parks, bars, budget-friendly yet delicious food, and numerous cultural attractions.&lt;/p&gt;

&lt;h2 id=&quot;speak-up&quot;&gt;Speak up!&lt;/h2&gt;

&lt;p&gt;Allowing for two-way communication via GrabChat empowers both passengers and drivers to improve their journeys by divulging useful information, and asking clarifying questions: how many bags do you have? Does your car accommodate my pet dog? I’m standing by the lobby with my two kids- these are the sorts of things that are talked about in GrabChat messages.&lt;/p&gt;

&lt;p&gt;During the analysis of our multitudes of wide-ranging GrabChat conversations, we picked up some pro-tips for you to get a Grab ride with even more convenience and ease, whether you’re a tourist or not:&lt;/p&gt;

&lt;h4 id=&quot;tip-1-did-some-shopping-on-your-trip-swamped-with-bags-send-a-message-to-your-driver-to-let-them-know-how-many-pieces-of-luggage-you-have-with-you&quot;&gt;Tip #1: Did some shopping on your trip? Swamped with bags? Send a message to your driver to let them know how many pieces of luggage you have with you.&lt;/h4&gt;

&lt;p&gt;As one might expect, chats that have keywords such as “luggage” or “baggage” (or any other related term) occur the most when riders are going to, or leaving, an airport. Most of the tourists on GrabChat asked the drivers if there was space for all of their things in the car. Interestingly, some of them also told the drivers how to recognise them for pickup based off of the descriptions of their bags!&lt;/p&gt;

&lt;h4 id=&quot;tip-2-your-children-make-good-landmarksif-youre-in-a-crowded-spot-and-youre-worried-your-driver-cant-find-you-drop-them-a-message-to-let-them-know-youre-that-family-with-a-baby-and-a-little-girl-in-pigtails&quot;&gt;Tip #2: Your children make good landmarks! If you’re in a crowded spot and you’re worried your driver can’t find you, drop them a message to let them know you’re that family with a baby and a little girl in pigtails.&lt;/h4&gt;

&lt;p&gt;When it comes to children, we found that passengers mainly use them to help identify themselves to the driver. Messages like “I’m with my two kids” or “We are a family with a baby” came up numerous times, and served as descriptions to facilitate fast pickup. These sorts of chats were the most prevalent in crowded areas like airports and shopping centres.&lt;/p&gt;

&lt;h4 id=&quot;tip-3-dont-get-caught-off-guard--be-sure-your-furry-friends-have-a-seat&quot;&gt;Tip #3: Don’t get caught off guard- be sure your furry friends have a seat!&lt;/h4&gt;

&lt;p&gt;Taking a look at pet related chats, we learned that our tourists have used GrabChat to ask clarifying questions to the driver. Passengers have likely considered that not every driver or vehicle is accommodating towards animals. The most common type of message was about whether pets are allowed in the vehicle. For example: “Is it okay if I bring a puppy?” or “I have a dog with me in a carrier, is that alright?”. Better safe than sorry! Alternatively, if you’re travelling with a pet, why not see if GrabPet is available in your country?&lt;/p&gt;

&lt;p&gt;From the chat content analysis we have learned that tourists do indeed use GrabChat to talk to their drivers about specific details of their trip. We see that the chat feature is an invaluable tool that anyone can use to clear up any ambiguities and make their journeys more pleasant.&lt;/p&gt;
</description>
        <pubDate>Wed, 22 May 2019 18:43:40 +0000</pubDate>
        <link>https://engineering.grab.com/tourist-chat-data-story</link>
        <guid isPermaLink="true">https://engineering.grab.com/tourist-chat-data-story</guid>
        
        <category>Data</category>
        
        <category>Analytics</category>
        
        <category>Data Analytics</category>
        
        
        <category>Data Science</category>
        
      </item>
    
      <item>
        <title>Bubble Tea Craze on GrabFood!</title>
        <description>&lt;h2 id=&quot;bigger-and-more-bubble-tea&quot;&gt;Bigger and More Bubble Tea!&lt;/h2&gt;

&lt;p&gt;Bubble tea orders on GrabFood has been constantly and dramatically increasing with an impressive regional average growth rate of 3,000% in the year of 2018!  Just look at the percentage increase over the year of 2018, across all countries!&lt;/p&gt;

&lt;table class=&quot;table&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Countries&lt;/th&gt;
      &lt;th&gt;Bubble tea growth by percentage in 2018*&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Indonesia&lt;/td&gt;
      &lt;td&gt;&amp;gt;8500% growth from Jan 2018 to Dec 2018&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Philippines&lt;/td&gt;
      &lt;td&gt;&amp;gt;3,500% growth from June 2018 to Dec 2018&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Thailand&lt;/td&gt;
      &lt;td&gt;&amp;gt;3,000% growth from Jan 21018 to Dec 2018&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Vietnam&lt;/td&gt;
      &lt;td&gt;&amp;gt;1,500% growth from May 2018 to Dec 2018&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Singapore&lt;/td&gt;
      &lt;td&gt;&amp;gt;700% growth from May 2018 to Dec 2018&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Malaysia&lt;/td&gt;
      &lt;td&gt;&amp;gt;250% growth from May 2018 to Dec 2018&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;small&gt;*Time period: January 2018 to December 2018, or from the time GrabFood was launched.&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;What’s driving this growth is not just die-hard bubble tea fans who can’t go a week without drinking this sweet treat, but a growing bubble tea fan club in Southeast Asia. The number of bubble tea lovers on GrabFood grew over 12,000% in 2018 - and there’s no sign of stopping!&lt;/p&gt;

&lt;p&gt;With increasing consumer demand, how is Southeast Asia’s bubble tea supply catching up?  As of December 2018, GrabFood has close to 4,000 bubble tea outlets from a network of over 1,500 brands - a 200% growth in bubble tea outlets in Southeast Asia!&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;Bubble-Tea-Lover growth on GrabFood&quot; src=&quot;/img/bubble-tea-craze-on-grabfood/image2.png&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;If this stat doesn’t stick, here is a map to show you how much bubble tea orders in different Southeast Asian cities have grown!&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;Maps of bubble tea merchants on GrabFood&quot; src=&quot;/img/bubble-tea-craze-on-grabfood/image3.gif&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;And here is a little shoutout to our star merchants including Chatime, Coco Fresh Tea &amp;amp; Juice, Macao Imperial Tea, Ochaya, Koi Tea, Cafe Amazon, The Alley, iTEA, Gong Cha, and Serenitea.&lt;/p&gt;

&lt;h2 id=&quot;just-how-much-do-you-drink&quot;&gt;Just how much do you drink?&lt;/h2&gt;

&lt;p&gt;On average, Southeast Asians drink  4 cups of bubble tea per person per month on GrabFood. Thai consumers top the regional average by 2 cups, consuming about six cups of bubble tea per person per month. This is closely followed by Filipino consumers who drink an average of 5 cups per person per month.&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;Average bubble tea consumption by cups per person per month&quot; src=&quot;/img/bubble-tea-craze-on-grabfood/image7.png&quot; /&gt;
&lt;/div&gt;

&lt;h2 id=&quot;favourite-flavours&quot;&gt;Favourite Flavours!&lt;/h2&gt;

&lt;p&gt;Have a look at the dazzling array of Bubble Tea flavours available on GrabFood today and you’ll find some uniquely Southeast Asian flavours like Chendol, Durian, and Gula Melaka, as well as rare flavours like salted cream and cheese! Can you spot your favourite flavours here?&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;Bubble tea flavour consumption per month&quot; src=&quot;/img/bubble-tea-craze-on-grabfood/image4.png&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Let’s break it down by the country that GrabFood serves, and see who likes which flavours of Bubble Tea more!&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;Bubble tea flavour consumption per month by country&quot; src=&quot;/img/bubble-tea-craze-on-grabfood/image6.png&quot; /&gt;
&lt;/div&gt;

&lt;h2 id=&quot;top-the-toppings&quot;&gt;Top the Toppings!&lt;/h2&gt;

&lt;p&gt;Pearl seems to be the unbeatable best topping of most of the countries, except Vietnam whose No. 1 topping turned out to be Cheese Pudding! Top 3 toppings that topped your favorite bubble tea are:&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;Top list of toppings&quot; src=&quot;/img/bubble-tea-craze-on-grabfood/image5.png&quot; /&gt;
&lt;/div&gt;

&lt;h2 id=&quot;best-time-for-bubble-tea&quot;&gt;Best Time for Bubble Tea!&lt;/h2&gt;

&lt;p&gt;Don’t we all need a cup of sweet Bubble Tea in the afternoon to get us through the day?  Across Southeast Asia, GrabFood’s data reveals that most people order bubble tea to accompany their meals at lunch, or as a  perfect midday energizer!&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;Times of the day when most people order bubble tea&quot; src=&quot;/img/bubble-tea-craze-on-grabfood/image1.png&quot; /&gt;
&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;So hazelnut or chocolate, pearl or (and) pudding (who says we can’t have the best of both worlds!)? The options are abundant and the choice is yours to enjoy!&lt;/p&gt;

&lt;p&gt;If you have a sweet tooth, or simply want to reward yourself with Southeast Asia’s most popular drink, go ahead - you are only a couple of taps away from savouring this cup full of delight&lt;/p&gt;
</description>
        <pubDate>Thu, 09 May 2019 17:49:30 +0000</pubDate>
        <link>https://engineering.grab.com/bubble-tea-craze-on-grabfood</link>
        <guid isPermaLink="true">https://engineering.grab.com/bubble-tea-craze-on-grabfood</guid>
        
        <category>Data</category>
        
        <category>Analytics</category>
        
        <category>Data Analytics</category>
        
        
        <category>Data Science</category>
        
      </item>
    
      <item>
        <title>Why you should organise an immersion trip for your next project</title>
        <description>&lt;p&gt;&lt;em&gt;Sherizan Sheikh is a Design Lead at Grab Ventures, an incubation arm that looks at experiences beyond ride-hailing, for example, groceries, healthcare and autonomous deliveries.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Grab Ventures is where exciting initiatives are birthed in Grab. From strategic partnerships like GrabFresh, Grab’s first on-demand grocery delivery service, to exploratory concepts such as on-demand e-scooter rentals, there has never been a more exciting time to be in this unique space.&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;Cover GrabFresh&quot; src=&quot;/img/why-you-should-organise-an-immersion-trip-for-your-next-project/image3.png&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;In my role as Design Lead for Grab Ventures, I juggle between both sides of the coin and whether it’s a partnership or exploratory concept, I ask myself:&lt;/p&gt;

&lt;h1 id=&quot;how-do-i-know-who-my-customers-are-and-what-are-their-pain-points&quot;&gt;“How do I know who my customers are, and what are their pain points?”&lt;/h1&gt;

&lt;p&gt;So I like to answer that question by starting with traditional research methods like desktop research and surveys, just to name a few. At Grab, it’s usually not enough to answer those questions.&lt;/p&gt;

&lt;p&gt;That said, I find that some of the best insights are formed from immersion trips.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;In one sentence, an immersion trip is getting deeply involved in a user’s life by understanding him or her through observation and conversation.&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;Our CEO, Anthony Tan, picking items for a customer, on an immersion trip.&quot; src=&quot;/img/why-you-should-organise-an-immersion-trip-for-your-next-project/image7.jpg&quot; /&gt;
  &lt;small class=&quot;post-image-caption&quot;&gt;Our CEO, Anthony Tan, picking items for a customer, on an immersion trip.&lt;/small&gt;
&lt;/div&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;For designers and researchers in Singapore, it plucks you out of your everyday reality and drops you into someone else’s, somewhere else, where 99.9% of the time, everything you expect and anticipate gets thrown out in a matter of minutes. I’ve trained myself to switch my mindset, go back to basics, and learn (or relearn) everything I need to know about the country I’d be visiting even if I’ve been there countless times.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Fun fact: In 2018, I spent about 100 days in Indonesia. That means roughly 30% of 2018 was spent on the ground, observing, shadowing, interviewing people (and getting stuck in traffic) and loving it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;why-immersions&quot;&gt;Why immersions?&lt;/h2&gt;

&lt;p&gt;Understanding one’s country, culture and her people is something that gets me excited as I continuously build empathy visit upon a visit, interview after interview.&lt;/p&gt;

&lt;p&gt;I remembered one time during an immersion trip, we interviewed locals at different supermarkets to learn and understand their motivations: why they prefer to visit the supermarket vs purchasing them online. One of our hypotheses was that the key motivator for Indonesians to buy groceries online must be down to convenience. We were wrong.&lt;/p&gt;

&lt;p&gt;It boiled down to 2 key factors.&lt;/p&gt;

&lt;p&gt;1) &lt;strong&gt;Freshness&lt;/strong&gt;: We found out that many of the locals still felt the need to touch and feel the products before they buy. There were many instances where they felt the need to touch the fresh produce on the shelves, cutting off a piece of fruit or even poking the eyes of the fish to check its freshness.&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;Oranges&quot; src=&quot;/img/why-you-should-organise-an-immersion-trip-for-your-next-project/image6.jpg&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;2) &lt;strong&gt;Price&lt;/strong&gt;: The de-facto for most locals as they are price-sensitive. Every decision was made with the price tag in mind. They are willing to travel far, spend the time to go through the traffic just to get to the wet or supermarket that offers the lowest prices and value for money. Through observations, while shadowing at a local wet market, we also found something interesting. Most of the wet market vendors are getting WhatsApp messages from their regular customers seeking fresh produce and making orders. The transactions were mostly via e-wallets or bank transfers. The vendors then packed them and get bike drivers to help with the delivery. I couldn’t have gotten this valuable information if I was just sitting at my desk.&lt;/p&gt;

&lt;p&gt;An immersion trip is an excellent opportunity to learn about our customers and the meaning behind their behaviours. There is only so much we can learn from white papers and reports. As soon as you are in the same environment as your users, seeing your users do everyday errands or acts, like grocery shopping or hopping on a bike, feeling their frustrations and experiencing them yourself, you’ll get so much more fruitful and valuable insights to help shape your next product. (Or even, improve an existing one!)&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;My colleagues trying to blend in.&quot; src=&quot;/img/why-you-should-organise-an-immersion-trip-for-your-next-project/image1.jpg&quot; /&gt;
  &lt;small class=&quot;post-image-caption&quot;&gt;My colleagues trying to blend in.&lt;/small&gt;
&lt;/div&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Now that I’ve sold you on this idea, here are some tips on how to plan and execute effective immersion trips, share your findings and turn them into actionable insights for your team and stakeholders.&lt;/p&gt;

&lt;h2 id=&quot;pro-tip-1---generate-a-hypothesis&quot;&gt;Pro tip #1 - Generate a hypothesis&lt;/h2&gt;

&lt;p&gt;Generating a hypothesis is a valuable exercise. It enables you to focus on the “wants vs. needs” and to validate your assumptions beyond desktop research. Be sure to get your core team members together, including Business, Ops and Tech, to generate a hypothesis. I’ll give an example below.&lt;/p&gt;

&lt;h2 id=&quot;pro-tip-2---have-short-immersion-days-with-a-debrief-at-the-end-for-everyone&quot;&gt;Pro tip #2 - Have short immersion days with a debrief at the end for everyone&lt;/h2&gt;

&lt;p&gt;Scheduling really depends on your project. I have planned for trips that are from a few hours to up to fourteen days long. Be sure not to have too many locations in a single day and spread them out evenly in case there are unexpected roadblocks such as traffic jams that might contribute to rushed research.&lt;/p&gt;

&lt;p&gt;Do include Brief and Debrief sessions into your schedule. I’d recommend shorter immersion days so that you have enough energy left for the critical Debrief session at the end of the day. The structure should be kept very simple with focus of collating ALL observations from the contextual inquiries you did into writing. It’s actually up to you how you structure your document.&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;Be prepared for the unexpected.&quot; src=&quot;/img/why-you-should-organise-an-immersion-trip-for-your-next-project/image4.jpg&quot; /&gt;
  &lt;small class=&quot;post-image-caption&quot;&gt;Be prepared for the unexpected.&lt;/small&gt;
&lt;/div&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h2 id=&quot;pro-tip-3---recce-locations-beforehand&quot;&gt;Pro tip #3 - Recce locations beforehand&lt;/h2&gt;

&lt;p&gt;Once you’ve nailed down the locations, it is essential for you to get a local resident to recce the places first. In Southeast Asia, more often than so would you realise that information found online is unreliable and misleading, so doing a physical recce will save you a lot of time.&lt;/p&gt;

&lt;p&gt;I had experienced a few time-wasting incidents when we did not expect specific locations to be what was intended. For example, while on our grocery-run, we wanted to visit a local wet market that opens only very early in the morning. We got up at 5 am, drove about 1.5 hours and only to realize the wet market is not open to the public and we eventually got chased out by the security guards.&lt;/p&gt;

&lt;h2 id=&quot;pro-tip-4---never-assume-a-customers-journey&quot;&gt;Pro tip #4 - Never assume a customer’s journey&lt;/h2&gt;

&lt;p&gt;(even though you’ve experienced it before as a customer)&lt;/p&gt;

&lt;p&gt;One of the most important processes throughout a product life cycle is to understand a customer’s journey. It’s particularly important to understand the journey if we are not familiar with the actual environment. Take our GrabFresh service as an example. It’s a complex journey that happens behind the scenes. Desktop research might not be enough to fully validate the journey hence, an immersion trip that allows you to be on the field will ensure you go through the lifecycle of the entire process to observe and note all the phases that happen in the real environment.&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;GrabFresh user journey&quot; src=&quot;/img/why-you-should-organise-an-immersion-trip-for-your-next-project/image5.png&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h2 id=&quot;pro-tip-5---be-100-sure-of-your-open-ended-non-leading-questions-that-will-validate-your-hypothesis&quot;&gt;Pro tip #5 - Be 100% sure of your open-ended, non-leading questions that will validate your hypothesis.&lt;/h2&gt;

&lt;p&gt;This part is an essential piece to the quality of your immersion outcome. Not spending enough time crafting or vetting the questions thoroughly might end up with skewed insights and could jeopardise your entire immersion. Please be sure your questions links up with your hypothesis and provide backup questions to support your assumptions.&lt;/p&gt;

&lt;p&gt;For example, don’t suggest answers in questions.&lt;/p&gt;

&lt;p&gt;Bad: “Why do you like this supermarket? Cheap? Convenient?”&lt;/p&gt;

&lt;p&gt;Good: “Tell me why you chose this particular supermarket?”&lt;/p&gt;

&lt;h2 id=&quot;pro-tip-6---break-into-smaller-groups-of-2-to-3-dress-comfortably-and-like-a-local-keep-your-expensive-belongings-out-of-sight&quot;&gt;Pro tip #6 - Break into smaller groups of 2 to 3. Dress comfortably and like a local. Keep your expensive belongings out of sight.&lt;/h2&gt;

&lt;p&gt;During my recent trip, I visited a lot of places that unknowingly had very tight security. One of the mistakes I made was going as a group of 6 (foreign-looking, and - okay -  maybe a little touristy with our appearances and expensive gadgets).&lt;/p&gt;

&lt;p&gt;Out of nowhere, once we started approaching customers for interviews, and snapping photos with our cameras and phones, we could see the security teams walking towards us. Unfortunately, we were asked to leave the premises when we could not provide a permit.&lt;/p&gt;

&lt;p&gt;As luck would have it, we eyed a few customers and approached them when they were further away from the original location. Success!&lt;/p&gt;

&lt;h2 id=&quot;pro-tip-7---find-translators-with-people-skills-and-interview-experience&quot;&gt;Pro tip #7 - Find translators with people skills and interview experience.&lt;/h2&gt;

&lt;p&gt;Most of my immersion trips are overseas, where English is not the main language. I get annoyed at myself for not being able to interview non-English speaking customers. Having seasoned, outgoingtranslators does help a lot! If you feel awkward standing around waiting for a translated answer, feel free to step away and let the translator interview the customer without feeling pressured. Be sure it’s all recorded for transcription later.&lt;/p&gt;

&lt;h2 id=&quot;insights--action-plan-strategy&quot;&gt;Insights + Action plan= Strategy&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Findings are significant, it’s the basis of everything that you do while you are in immersion. But what’s more important is the ability to connect those dots and extract value from them. It’s similar to how we can amass tons of raw data but entirely pointless if nothing is done with it.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A good strategy usually comes from good insights that are actionable.&lt;/p&gt;

&lt;p&gt;For example, we found out that a % of customers that we interviewed did not know that GrabFresh has a pool of professional shoppers who pick grocery items for customers. Their impression was that a driver would receive their order, drive to the location, get out of their vehicle and go into the store to do the picking. That’s not right. It hinders customers from making their first purchase through the app.&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;Observing a personal shopper interacting with Grab driver-partner.&quot; src=&quot;/img/why-you-should-organise-an-immersion-trip-for-your-next-project/image2.jpg&quot; /&gt;
  &lt;small class=&quot;post-image-caption&quot;&gt;Observing a personal shopper interacting with Grab driver-partner.&lt;/small&gt;
&lt;/div&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;So, in this case, our hypothesis was: if customers are aware of personal shoppers, the number of orders will increase.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This opinion was a shared one that may have had an impact on our business. So we needed to take this back to the team, look at the data, brainstorm, and come up with a great strategy to improve the perception and its impact on our business (whether good or bad).&lt;/p&gt;

&lt;h1 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h1&gt;

&lt;p&gt;After a full immersion, it is always important to ask each and every member of some of these questions:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“What went well? What did you learn?”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“What can be improved? If you could change one thing, what would it be?”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I’d usually document them and have a reflection for myself so that I can pick up what worked, what didn’t and continue to improve for my next immersion trip.&lt;/p&gt;

&lt;p&gt;Following the &lt;a href=&quot;https://www.designcouncil.org.uk/news-opinion/design-process-what-double-diamond&quot;&gt;Double Diamond&lt;/a&gt; framework, immersion trips are part of the “Discover”phase where we gather customer insights. Typically, I follow up with a &lt;a href=&quot;http://www.gv.com/sprint/&quot;&gt;Design sprint&lt;/a&gt; workshop where we start framing the problems. This is where we have a session where experts and researchers share their domain knowledge and research insights uncovered from various methodologies including immersions.&lt;/p&gt;

&lt;p&gt;Then, hopefully, we will have some actionable changes that we can execute confidently.&lt;/p&gt;

&lt;p&gt;So, good luck, bring some sunblock and see you on the ground!&lt;/p&gt;

&lt;p&gt;If you’d like to connect with Sherizan, you can find him on &lt;a href=&quot;https://www.linkedin.com/in/sherizansheikh/&quot;&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Tue, 07 May 2019 10:23:20 +0000</pubDate>
        <link>https://engineering.grab.com/why-you-should-organise-an-immersion-trip-for-your-next-project</link>
        <guid isPermaLink="true">https://engineering.grab.com/why-you-should-organise-an-immersion-trip-for-your-next-project</guid>
        
        <category>Hyperlocal</category>
        
        <category>Immersion</category>
        
        
        <category>Design</category>
        
      </item>
    
      <item>
        <title>Preventing Pipeline Calls from Crashing Redis Clusters</title>
        <description>&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;On Feb 15th, 2019, a slave node in Redis, an in-memory data structure storage, failed requiring a replacement. During this period, roughly only 1 in 21 calls to Apollo, a primary transport booking service, succeeded. This brought Grab rides down significantly for the one minute it took the Redis Cluster to self-recover. This behavior was totally unexpected and completely breached our intention of having multiple replicas.&lt;/p&gt;

&lt;p&gt;This blog post describes Grab’s outage post-mortem findings.&lt;/p&gt;

&lt;h1 id=&quot;understanding-the-infrastructure&quot;&gt;Understanding the infrastructure&lt;/h1&gt;

&lt;p&gt;With Grab’s continuous growth, our services must handle large amounts of data traffic involving high processing power for reading and writing operations. To address this significant growth, reduce handler latency, and improve overall performance, many of our services use &lt;em&gt;Redis&lt;/em&gt; - a common in-memory data structure storage - as a cache, database, or message broker. Furthermore, we use a &lt;em&gt;Redis Cluster&lt;/em&gt;, a distributed implementation of Redis, for shorter latency and higher availability.&lt;/p&gt;

&lt;p&gt;Apollo is our driver-side state machine. It is on almost all requests’ critical path and is a primary component for booking transport and providing great service for customer bookings. It stores individual driver availability in an AWS ElastiCache Redis Cluster, letting our booking service efficiently assign jobs to drivers. It’s critical to keep Apollo running and available 24/7.&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;Apollo's infrastructure&quot; src=&quot;/img/preventing-pipeline-calls-from-crashing-redis-clusters/image1.jpg&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Because of Apollo’s significance, its Redis Cluster has 3 shards each with 2 slaves. It hashes all keys and, according to the hash value, divides them into three partitions. Each partition has two replications to increase reliability.&lt;/p&gt;

&lt;p&gt;We use the Go-Redis client, a popular Redis library, to direct all written queries to the master nodes (which then write to their slaves) to ensure consistency with the database.&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;Master and slave nodes in the Redis Cluster&quot; src=&quot;/img/preventing-pipeline-calls-from-crashing-redis-clusters/image2.jpg&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;For reading related queries, engineers usually turn on the &lt;code class=&quot;highlighter-rouge&quot;&gt;ReadOnly&lt;/code&gt; flag and turn off the &lt;code class=&quot;highlighter-rouge&quot;&gt;RouteByLatency&lt;/code&gt; flag. These effectively turn on &lt;code class=&quot;highlighter-rouge&quot;&gt;ReadOnlyFromSlaves&lt;/code&gt; in the Grab &lt;code class=&quot;highlighter-rouge&quot;&gt;gredis3&lt;/code&gt; library, so the client directs all reading queries to the slave nodes instead of the master nodes. This load distribution frees up master node CPU usage.&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;Client reading and writing from/to the Redis Cluster&quot; src=&quot;/img/preventing-pipeline-calls-from-crashing-redis-clusters/image3.jpg&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;When designing a system, we consider potential hardware outages and network issues. We also think of ways to ensure our Redis Cluster is highly efficient and available; setting the above-mentioned flags help us achieve these goals.&lt;/p&gt;

&lt;p&gt;Ideally, this Redis Cluster configuration would not cause issues even if a master or slave node breaks. Apollo should still function smoothly. So, why did that February Apollo outage happen? Why did a single down slave node cause a 95+% call failure rate to the Redis Cluster during the dim-out time?&lt;/p&gt;

&lt;p&gt;Let’s start by discussing how to construct a local Redis Cluster step by step, then try and replicate the outage. We’ll look at the reasons behind the outage and provide suggestions on how to use a Redis Cluster client in Go.&lt;/p&gt;

&lt;h1 id=&quot;how-to-set-up-a-local-redis-cluster&quot;&gt;How to set up a local Redis Cluster&lt;/h1&gt;

&lt;p&gt;1. Download and install Redis from &lt;a href=&quot;https://redis.io/download&amp;amp;sa=D&amp;amp;ust=1557136452324000&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;2. Set up configuration files for each node. For example, in Apollo, we have 9 nodes, so we need to create 9 files like this with different port numbers(x).&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// file_name: node_x.conf (do not include this line in file)

port 600x

cluster-enabled yes

cluster-config-file cluster-node-x.conf

cluster-node-timeout 5000

appendonly yes

appendfilename node-x.aof

dbfilename dump-x.rdb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;3. Initiate each node in an individual terminal tab with:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$PATH/redis-4.0.9/src/redis-server node_1.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;4. Use this Ruby script to create a Redis Cluster. (Each master has two slaves.)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$PATH/redis-4.0.9/src/redis-trib.rb create --replicas 2127.0.0.1:6001..... 127.0.0.1:6009

&amp;gt;&amp;gt;&amp;gt; Performing Cluster Check (using node 127.0.0.1:6001)

M: 7b4a5d9a421d45714e533618e4a2b3becc5f8913 127.0.0.1:6001

   slots:0-5460 (5461 slots) master

   2 additional replica(s)

S: 07272db642467a07d515367c677e3e3428b7b998 127.0.0.1:6007

   slots: (0 slots) slave

   replicates 05363c0ad70a2993db893434b9f61983a6fc0bf8

S: 65a9b839cd18dcae9b5c4f310b05af7627f2185b 127.0.0.1:6004

   slots: (0 slots) slave

   replicates 7b4a5d9a421d45714e533618e4a2b3becc5f8913

M: 05363c0ad70a2993db893434b9f61983a6fc0bf8 127.0.0.1:6003

   slots:10923-16383 (5461 slots) master

   2 additional replica(s)

S: a78586a7343be88393fe40498609734b787d3b01 127.0.0.1:6006

   slots: (0 slots) slave

   replicates 72306f44d3ffa773810c810cfdd53c856cfda893

S: e94c150d910997e90ea6f1100034af7e8b3e0cdf 127.0.0.1:6005

   slots: (0 slots) slave

   replicates 05363c0ad70a2993db893434b9f61983a6fc0bf8

M: 72306f44d3ffa773810c810cfdd53c856cfda893 127.0.0.1:6002

   slots:5461-10922 (5462 slots) master

   2 additional replica(s)

S: ac6ffbf25f48b1726fe8d5c4ac7597d07987bcd7 127.0.0.1:6009

   slots: (0 slots) slave

   replicates 7b4a5d9a421d45714e533618e4a2b3becc5f8913

S: bc56b2960018032d0707307725766ec81e7d43d9 127.0.0.1:6008

   slots: (0 slots) slave

   replicates 72306f44d3ffa773810c810cfdd53c856cfda893

[OK] All nodes agree about slots configuration.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;5. Finally, we try to send queries to our Redis Cluster, e.g.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$PATH/redis-4.0.9/src/redis-cli -c -p 6001 hset driverID 100 state available updated_at 11111
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;what-happens-when-nodes-become-unreachable&quot;&gt;What happens when nodes become unreachable?&lt;/h1&gt;

&lt;h2 id=&quot;redis-cluster-server&quot;&gt;Redis Cluster Server&lt;/h2&gt;

&lt;p&gt;As long as the majority of a Redis Cluster’s masters and at least one slave node for each unreachable master are reachable, the cluster is accessible. It can survive even if a few nodes fail.&lt;/p&gt;

&lt;p&gt;Let’s say we have N masters, each with K slaves, and random T nodes become unreachable. This algorithm calculates the Redis Cluster failure rate percentage:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if T &amp;lt;= K:
        availability = 100%
else:
        availability = 100% - (1/(N*K - T))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you successfully built your own Redis Cluster locally, try to kill any node with a simple &lt;code class=&quot;highlighter-rouge&quot;&gt;command-c&lt;/code&gt;. The Redis Cluster broadcasts to all nodes that the killed node is now unreachable, so other nodes no longer direct traffic to that port.&lt;/p&gt;

&lt;p&gt;If you bring this node back up, all nodes know it’s reachable again. If you kill a master node, the Redis Cluster promotes a slave node to a temp master for writing queries.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$PATH/redis-4.0.9/src/redis-server node_x.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With this information, we can’t answer the big question of why a single slave node failure caused an over 95% failure rate in the Apollo outage. Per the above theory, the Redis Cluster should still be 100% available. So, the Redis Cluster server could properly handle an outage, and we concluded it wasn’t the failure rate’s cause. So we looked at the client side and Apollo’s queries.&lt;/p&gt;

&lt;h2 id=&quot;golang-redis-cluster-client--apollo-queries&quot;&gt;Golang Redis Cluster Client &amp;amp; Apollo Queries&lt;/h2&gt;

&lt;p&gt;Apollo’s client side is based on the &lt;a href=&quot;https://github.com/go-redis/redis/blob/master/cluster.go&quot;&gt;Go-Redis Library&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;During the Apollo outage, we found some code returned many errors during certain pipeline GET calls. When Apollo tried to send a pipeline of HMGET calls to its Redis Cluster, the pipeline returned errors.&lt;/p&gt;

&lt;p&gt;First, we looked at the pipeline implementation code in the &lt;a href=&quot;https://github.com/go-redis/redis/blob/9ecae37814bc6623672ec8967e2b322b23fd4540/cluster.go%23L1205&quot;&gt;Go-Redis library&lt;/a&gt;. In the function &lt;code class=&quot;highlighter-rouge&quot;&gt;defaultProcessPipeline&lt;/code&gt;, the code assigns each command to a Redis node in this line &lt;code class=&quot;highlighter-rouge&quot;&gt;err:=c.mapCmdsByNode(cmds, cmdsMap)&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func (c *ClusterClient) mapCmdsByNode(cmds []Cmder, cmdsMap *cmdsMap) error {
state, err := c.state.Get()
        if err != nil {
                setCmdsErr(cmds, err)
                returnerr
        }

        cmdsAreReadOnly := c.cmdsAreReadOnly(cmds)
        for_, cmd := range cmds {
                var node *clusterNode
                var err error
                if cmdsAreReadOnly {
                        _, node, err = c.cmdSlotAndNode(cmd)
                } else {
                        slot := c.cmdSlot(cmd)
                        node, err = state.slotMasterNode(slot)
                }
                if err != nil {
                        returnerr
                }
                cmdsMap.mu.Lock()
                cmdsMap.m[node] = append(cmdsMap.m[node], cmd)
                cmdsMap.mu.Unlock()
        }
        return nil
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next, since the &lt;code class=&quot;highlighter-rouge&quot;&gt;readOnly&lt;/code&gt; flag is on, we look at the &lt;code class=&quot;highlighter-rouge&quot;&gt;cmdSlotAndNode&lt;/code&gt; function. As mentioned earlier, you can get better performance by setting &lt;code class=&quot;highlighter-rouge&quot;&gt;readOnlyFromSlaves&lt;/code&gt; to true, which sets &lt;code class=&quot;highlighter-rouge&quot;&gt;RouteByLatency&lt;/code&gt; to false. By doing this, &lt;code class=&quot;highlighter-rouge&quot;&gt;RouteByLatency&lt;/code&gt; will not take priority and the master does not receive the read commands.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func (c *ClusterClient) cmdSlotAndNode(cmd Cmder) (int, *clusterNode, error) {
        state, err := c.state.Get()
        if err != nil {
                return 0, nil, err
        }

        cmdInfo := c.cmdInfo(cmd.Name())
        slot := cmdSlot(cmd, cmdFirstKeyPos(cmd, cmdInfo))

        if c.opt.ReadOnly &amp;amp;&amp;amp; cmdInfo != nil &amp;amp;&amp;amp; cmdInfo.ReadOnly {
                if c.opt.RouteByLatency {
                        node, err:= state.slotClosestNode(slot)
                        return slot, node, err
                }

                if c.opt.RouteRandomly {
                        node:= state.slotRandomNode(slot)
                        return slot, node, nil
                }

                node, err:= state.slotSlaveNode(slot)
                return slot, node, err
        }

        node, err:= state.slotMasterNode(slot)
        return slot, node, err
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, let’s try and better understand the outage.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;When a slave becomes unreachable, all commands assigned to that slave node fail.&lt;/li&gt;
  &lt;li&gt;We found in Grab’s Redis library code that a single error in all cmds could cause the entire pipeline to fail.&lt;/li&gt;
  &lt;li&gt;In addition, engineers return a failure in their code if &lt;code class=&quot;highlighter-rouge&quot;&gt;err != nil&lt;/code&gt;. This explains the high failure rate during the outage.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func (w *goRedisWrapperImpl) getResultFromCommands(cmds []goredis.Cmder) ([]gredisapi.ReplyPair, error) {
        results := make([]gredisapi.ReplyPair, len(cmds))
        var err error
        for idx, cmd := range cmds {
                results[idx].Value, results[idx].Err = cmd.(*goredis.Cmd).Result()
                if results[idx].Err == goredis.Nil {
                        results[idx].Err = nil
                        continue
                }
                if err == nil &amp;amp;&amp;amp; results[idx].Err != nil {
                        err = results[idx].Err
                }
        }

        return results, err
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Our next question was, “Why did it take almost one minute for Apollo to recover?”.  The Redis Cluster broadcasts instantly to its other nodes when one node is unreachable. So we looked at how the client assigns jobs.&lt;/p&gt;

&lt;p&gt;When the Redis Cluster client loads the node states, it only refreshes the state once a minute. So there’s a maximum one minute delay of state changes between the client and server. Within that minute, the Redis client kept sending queries to that unreachable slave node.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func (c *clusterStateHolder) Get() (*clusterState, error) {
        v := c.state.Load()
        if v != nil {
                state := v.(*clusterState)
                if time.Since(state.createdAt) &amp;gt; time.Minute {
                        c.LazyReload()
                }
                return state, nil
        }
        return c.Reload()
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What happened to the write queries? Did we lose new data during that one min gap? That’s a very good question! The answer is no since all write queries only went to the master nodes and the Redis Cluster client with a watcher for the master nodes. So, whenever any master node becomes unreachable, the client is not oblivious to the change in state and is well aware of the current state. See the &lt;a href=&quot;https://github.com/go-redis/redis/blob/9ecae37814bc6623672ec8967e2b322b23fd4540/cluster.go%23L825&quot;&gt;Watcher code&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;how-to-use-go-redis-safely&quot;&gt;How to use Go Redis safely?&lt;/h1&gt;

&lt;h2 id=&quot;redis-cluster-client&quot;&gt;Redis Cluster Client&lt;/h2&gt;

&lt;p&gt;One way to avoid a potential outage like our Apollo outage is to create another Redis Cluster client for pipelining only and with a true &lt;code class=&quot;highlighter-rouge&quot;&gt;RouteByLatency&lt;/code&gt; value. The Redis Cluster determines the latency according to ping calls to its server.&lt;/p&gt;

&lt;p&gt;In this case, all pipelining queries would read through the master nodesif the latency is less than 1ms (&lt;a href=&quot;https://github.com/go-redis/redis/blob/master/cluster.go%23L541&quot;&gt;code&lt;/a&gt;), and as long as the majority side of partitions are alive, the client will get the expected results. More load would go to master with this setting, so be careful about CPU usage in the master nodes when you make the change.&lt;/p&gt;

&lt;h2 id=&quot;pipeline-usage&quot;&gt;Pipeline Usage&lt;/h2&gt;

&lt;p&gt;In some cases, the master nodes might not handle so much traffic. Another way to mitigate the impact of an outage is to check for  errors on individual queries when errors happen in a pipeline call.&lt;/p&gt;

&lt;p&gt;In Grab’s Redis Cluster library, the function &lt;code class=&quot;highlighter-rouge&quot;&gt;Pipeline(PipelineReadOnly)&lt;/code&gt; returns a response with an error for individual reply.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func (c *clientImpl) Pipeline(ctx context.Context, argsList [][]interface{}) ([]gredisapi.ReplyPair, error) {
        defer c.stats.Duration(statsPkgName, metricElapsed, time.Now(), c.getTags(tagFunctionPipeline)...)
        pipe := c.wrappedClient.Pipeline()
        cmds := make([]goredis.Cmder, len(argsList))
        for i, args := range argsList {
                cmd := goredis.NewCmd(args...)
                cmds[i] = cmd
                _ = pipe.Process(cmd)
        }
        _, _ = pipe.Exec()
        return c.wrappedClient.getResultFromCommands(cmds)
}

func (w *goRedisWrapperImpl) getResultFromCommands(cmds []goredis.Cmder) ([]gredisapi.ReplyPair, error) {
        results := make([]gredisapi.ReplyPair, len(cmds))
        var err error
        for idx, cmd := range cmds {
                results[idx].Value, results[idx].Err = cmd.(*goredis.Cmd).Result()
                if results[idx].Err == goredis.Nil {
                        results[idx].Err = nil
                        continue
                }
                if err == nil &amp;amp;&amp;amp; results[idx].Err != nil {
                        err = results[idx].Err
                }
        }

        return results, err
}

type ReplyPair struct {
        Value interface{}
        Err   error
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Instead of returning nil or an error message when &lt;code class=&quot;highlighter-rouge&quot;&gt;err != nil&lt;/code&gt;, we could check for errors for each result so successful queries are not affected. This might have minimized the outage’s business impact.&lt;/p&gt;

&lt;h2 id=&quot;go-redis-cluster-library&quot;&gt;Go Redis Cluster Library&lt;/h2&gt;

&lt;p&gt;One way to fix the Redis Cluster library is to reload nodes’ status when an error happens.In the go-redis library, &lt;code class=&quot;highlighter-rouge&quot;&gt;defaultProcessor&lt;/code&gt; &lt;a href=&quot;https://github.com/go-redis/redis/blob/9ecae37814bc6623672ec8967e2b322b23fd4540/cluster.go%23L941&quot;&gt;has this logic&lt;/a&gt;, which can be applied to &lt;code class=&quot;highlighter-rouge&quot;&gt;defaultProcessPipeline&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;in-conclusion&quot;&gt;In Conclusion&lt;/h1&gt;

&lt;p&gt;We’ve shown how to build a local Redis Cluster server, explained how Redis Clusters work, and identified its potential risks and solutions. Redis Cluster is a great tool to optimize service performance, but there are potential risks when using it. Please carefully consider our points about how to best use it. If you have any questions, please ask them in the comments section.&lt;/p&gt;
</description>
        <pubDate>Sun, 05 May 2019 18:43:40 +0000</pubDate>
        <link>https://engineering.grab.com/preventing-pipeline-calls-from-crashing-redis-clusters</link>
        <guid isPermaLink="true">https://engineering.grab.com/preventing-pipeline-calls-from-crashing-redis-clusters</guid>
        
        <category>Grab</category>
        
        <category>Backend</category>
        
        <category>Redis</category>
        
        <category>Redis Cluster</category>
        
        <category>Go</category>
        
        
        <category>Engineering</category>
        
      </item>
    
      <item>
        <title>Guiding you Door-to-Door via our Super App!</title>
        <description>&lt;p&gt;Remember landing at an airport or going to your favourite mall and the hassle of finding the pickup spot when you booked a cab? When there are about a million entrances, it can get particularly annoying trying to find the right pickup location!&lt;/p&gt;

&lt;p&gt;Rolling out across South East Asia  is a brand new booking experience from Grab, designed  to make it easier for you to make a booking at large venues like airports, shopping centers, and tourist destinations! With the new booking flow, it will not only be easier to select one of the pre-designated Grab pickup points, you can also find text and image directions to help you navigate your way through the venue for a smoother rendezvous with your driver!&lt;/p&gt;

&lt;h2 id=&quot;inspiration-behind-the-work&quot;&gt;Inspiration behind the work&lt;/h2&gt;

&lt;p&gt;Finding your pick-up point closest to you, let alone predicting it, is incredibly challenging, especially when you are inside huge buildings or in crowded areas. Neeraj Mishra, Product Owner for Places at Grab explains: “We rely on GPS-data to understand user’s location which can be tricky when you are indoors or surrounded by skyscrapers. Since the satellite signal has to go through layers of concrete and steel, it becomes weak which adds to the inaccuracy. Furthermore, ensuring that passengers and drivers have the same pick-up point in mind can be tricky, especially with venues that have multiple entrances. ”  &lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;Marina One POI&quot; src=&quot;/img/poi-entrances-venues-door-to-door/image5.jpg&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Grab’s data analysis revealed that “rendezvous distance” (walking distance between the selected pick-up point and where the car is waiting) is more than twice the Grab average when the booking is made from large venues such as airports.&lt;/p&gt;

&lt;p&gt;To solve this issue, Grab launched “Entrances” (the green dots on the map) last year, which lists the various pick-up points available at a particular building, and shows them on the map, allowing users to easily choose the one closest to them, and ensuring their drivers know exactly where they want to be picked up from. Since then, Grab has created more than 120,000 such entrances, and we are delighted to inform you that average of rendezvous distances across all  countries have been steadily going down!&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;Decreasing rendezvous distance across region&quot; src=&quot;/img/poi-entrances-venues-door-to-door/image2.png&quot; /&gt;
&lt;/div&gt;

&lt;h2 id=&quot;one-problem-remained&quot;&gt;One problem remained&lt;/h2&gt;

&lt;p&gt;But there was still one common pain-point to be solved. Just because a passenger has selected the pick-up point closest to them, doesn’t mean it’s easy for them to find it. This is particularly challenging at very large venues like airports and shopping centres, and especially difficult if the passenger is unfamiliar with the venue, for example - a tourist landing at Jakarta Airport for the very first time. To deliver an even smoother booking and pick-up experience, Grab has rolled out a new feature called Venues - the first in the region - that will give passengers in-app photo and text directions to the pick-up point closest to them.&lt;/p&gt;

&lt;h2 id=&quot;lets-break-it-down-how-does-it-work&quot;&gt;Let’s break it down! How does it work?&lt;/h2&gt;

&lt;p&gt;Whether you are a local or a foreigner on holiday or business trip, fret not if you are not too familiar with the place that you are in!&lt;/p&gt;

&lt;p&gt;Let’s imagine that you are now at Singapore Changi Airport: your new booking experience will look something like this!&lt;/p&gt;

&lt;p&gt;Step 1: Fire the Grab app and click on Transport. You will see a welcome screen showing you where you are!&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;Welcome to Changi Airport&quot; src=&quot;/img/poi-entrances-venues-door-to-door/image1.jpg&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Step 2: On booking screen, you will see a new pickup menu with a list of available pickup points. Confirm the pickup point you want and make the booking!&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;Booking screen at Changi Airport&quot; src=&quot;/img/poi-entrances-venues-door-to-door/image6.jpg&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Step 3: Once you’ve been allocated a driver, tap on the bubble to get directions to your pick-up point!&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;Driver allocated at Changi Airport&quot; src=&quot;/img/poi-entrances-venues-door-to-door/image3.jpg&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Step 4: Follow the landmarks and walking instructions and you’ve arrived at your pick-up point!&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;Directions to pick-up point at Changi Airport&quot; src=&quot;/img/poi-entrances-venues-door-to-door/image4.jpg&quot; /&gt;
&lt;/div&gt;

&lt;h2 id=&quot;curious-about-how-we-got-this-done&quot;&gt;Curious about how we got this done?&lt;/h2&gt;

&lt;h3 id=&quot;data-driven-decisions&quot;&gt;Data-Driven Decisions&lt;/h3&gt;

&lt;p&gt;Based on a thorough data analysis of historical bookings, Grab identified key venues across our markets in Southeast Asia. Then we dispatched our Operations team to the ground, to identify all pick up points and perform detailed on-ground survey of the venue.&lt;/p&gt;

&lt;h3 id=&quot;operations-teams-leg-work&quot;&gt;Operations Team’s Leg Work&lt;/h3&gt;

&lt;p&gt;Nagur Hassan, Operations Manager at Grab, explains the process: “For the venue survey process, we send a team equipped with the tools required to capture the details, like cameras, wifi and bluetooth scanners etc. Once inside the venue, the team identifies strategic landmarks and clear direction signs that are related to drop-off and pick-up points. Team also captures turn-by-turn walking directions to make it easier for Grab users to navigate – For instance, walk towards Starbucks and take a left near H&amp;amp;M store. All the photos and documentations taken on the sites are then brought back to the office for further processing.”&lt;/p&gt;

&lt;h3 id=&quot;quality-assurance&quot;&gt;Quality Assurance&lt;/h3&gt;

&lt;p&gt;Once the data is collected, our in-house team checks the quality of the images and data. We also mask people’s faces and number plates of the vehicles to hide any identity-related information. As of today, we have collected 3400+ images for 1900+ pick up points belonging to 600 key venues! This effort took more than 3000 man-hours in total! And we aim to cover more than 10,000 such venues across the region in the next few months.&lt;/p&gt;

&lt;h2 id=&quot;this-is-only-the-beginning&quot;&gt;This is only the beginning&lt;/h2&gt;

&lt;p&gt;We’re constantly striving to improve the location accuracy of our passengers by using advanced Machine Learning and constant feedback mechanism. We understand GPS may not always be the most accurate determination of your current location, especially in crowded areas and skyscraper districts. This is just the beginning and we’re planning to launch some very innovative features in the coming months! So stay tuned for more!&lt;/p&gt;
</description>
        <pubDate>Fri, 12 Apr 2019 02:08:12 +0000</pubDate>
        <link>https://engineering.grab.com/poi-entrances-venues-door-to-door</link>
        <guid isPermaLink="true">https://engineering.grab.com/poi-entrances-venues-door-to-door</guid>
        
        <category>Grab</category>
        
        <category>Data</category>
        
        <category>Tech</category>
        
        <category>Maps</category>
        
        <category>App</category>
        
        
        <category>Product</category>
        
      </item>
    
      <item>
        <title>Loki, a dynamic mock server for HTTP/TCP testing</title>
        <description>&lt;h1 id=&quot;background&quot;&gt;Background&lt;/h1&gt;

&lt;p&gt;In a previous article we introduced &lt;a href=&quot;https://engineering.grab.com/mockers&quot;&gt;Mockers - an innovative tool for local box testing at Grab&lt;/a&gt;. Mockers used a &lt;a href=&quot;https://en.wikipedia.org/wiki/Shift_left_testing&quot;&gt;Shift Left testing strategy&lt;/a&gt;, making testing more effective and cheaper for development teams. Mockers’ popularity and success motivated us to create Loki - a one-stop dynamic mock server for local box testing of mobile apps.&lt;/p&gt;

&lt;p&gt;There are some unique challenges in mobile apps testing at Grab. End-to-end testing of an app is difficult due to high dependency on backend services and other apps. Staging environment, which hosts a plethora of backend services, is tough to manage and maintain. Issues such as staging downtime, configuration mismatches, and data corruption can affect staging adding to the testing woes. Moreover, our apps are fairly complex, utilizing multiple transport protocols such as HTTP, HTTPS, TCP for various business flows.&lt;/p&gt;

&lt;p&gt;The business flows are also complex, requiring exhaustive set up such as credit card payments set up, location spoofing, etc resulting in high maintenance costs for automated testing. Loki simulates these flows and developers can easily test use cases that take longer to set up in a real backend staging.&lt;/p&gt;

&lt;p&gt;Loki is our attempt to address challenges in mobile app testing by turning every developer local box into a full fledged pseudo backend environment where all mobile workflows can be tested without any external dependencies. It mocks backend services on developer local boxes, decoupling the mobile apps from real backend services, which provides several advantages such as:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;No need to deploy frequently to staging&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Testing is blocked if the app receives a bad response from staging. In these cases, code changes have to be deployed on staging to fix issues before resuming tests. In contrast, using Loki lets developers continue testing without any immediate need to deploy code changes to staging.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Allows parallel frontend and backend development&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Loki acts as a mock backend service when the real backend is still evolving. It lets the frontend development run in parallel with backend development.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Overcome time limitations&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In a one week regression-and-release scenario, testing time is limited. However, the application UI rendering and functionality still needs reasonable testing. Loki lets developers concentrate on testing in the available time instead of fixing dependencies on backend services.&lt;/p&gt;

&lt;h1 id=&quot;loki---grabs-solution-to-simplify-mobile-apps-testing&quot;&gt;Loki - Grab’s solution to simplify mobile apps testing&lt;/h1&gt;

&lt;p&gt;At Grab, we have multiple mobile apps that are dependent on each other. For example, our Passenger and Driver apps are two sides of a coin; the driver gets a job card only when a passenger requests a booking. These apps are developed by different teams, each with its own release cycle. This can make it tricky to confidently and repeatedly test the whole business flow across apps. Apps also depend on multiple backend services to execute a booking or food order and communicate over different protocols.&lt;/p&gt;

&lt;p&gt;Here’s a look at how our mobile apps interact with backend services over different protocols:&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;Mobile app interaction with backend services&quot; src=&quot;/img/loki-dynamic-mock-server-http-tcp-testing/image6.png&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Loki is a dynamic mock server, written in Golang, running in a Docker container on the local box or in CI. It is easy to set up and run through standard Docker commands. In the context of mobile app testing, it plays the role of backend services, so you no longer need to set up an extensive staging environment.&lt;/p&gt;

&lt;p&gt;The Loki architecture looks like this:&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;Loki architecture&quot; src=&quot;/img/loki-dynamic-mock-server-http-tcp-testing/image3.png&quot; /&gt;
&lt;/div&gt;

&lt;h1 id=&quot;the-technical-challenges-we-had-to-overcome&quot;&gt;The technical challenges we had to overcome&lt;/h1&gt;

&lt;p&gt;We wanted a comprehensive mocking solution so that teams don’t need to integrate multiple tools to achieve independent testing. It turned out that mocking TCP was most challenging because:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It is a long running client-server connection, and it doesn’t follow an HTTP-like request/response pattern.&lt;/li&gt;
  &lt;li&gt;Messages can be sent to the app without an incoming request as well, hence we had to expose a way via Loki to set a mock expectation which can send messages to the app without any request triggering it.&lt;/li&gt;
  &lt;li&gt;As TCP is a long running connection, we needed a way to delimit incoming requests so we know when we can truncate and deserialize the incoming request into JSON.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We engineered the Loki backend to support both HTTP and TCP protocols on different ports. Yet, the mock expectations are set up using RESTful APIs over HTTP for both protocols. A single point of entry for setting expectations made it more intuitive for our developers.&lt;/p&gt;

&lt;p&gt;An in-memory cron implementation pushes scheduled messages to the app over a TCP connection. This enabled testing of complex use cases such as drivers getting new job cards, driver and passenger chat workflows, etc. The delimiter for TCP protocol is configurable at start up, so each team can decide when to truncate the request.&lt;/p&gt;

&lt;p&gt;To enable Loki on our CI, we had to reduce its memory footprint. Hence, we built Loki with pluggable storages. MySQL is used when running on local and on CI we switch seamlessly to in-memory cache or Redis.&lt;/p&gt;

&lt;p&gt;For testing apps locally, developers must validate complex use cases such as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Payment related flows, which require the response to include the same payment ID as sent in the request. This is a case of simple mapping of request fields in the response JSON.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Flows requiring runtime logic execution. For example, a job card sent to a driver must have a valid timestamp, requiring runtime computation on Loki.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To support these cases and many more, we added JavaScript injection capability to Loki. So, when we set an expectation for an HTTP request/response pair or for TCP events, we can specify JavaScript for computing the dynamic response. This is executed in a sandbox by an in-house JS execution library.&lt;/p&gt;

&lt;p&gt;Grab follows a transactional workflow for bookings. Over the life of a ride, bookings go through different statuses. So, Loki had to address multiple HTTP requests to the same endpoint returning different responses. This feature is required for successfully mocking a whole ride end-to-end.&lt;/p&gt;

&lt;p&gt;Loki uses  an HTTP API &lt;code class=&quot;highlighter-rouge&quot;&gt;“httpTimesAndOrder”&lt;/code&gt; for this feature. For example, using &lt;code class=&quot;highlighter-rouge&quot;&gt;“httpTimesAndOrder”&lt;/code&gt;, you can configure the same status endpoint (&lt;code class=&quot;highlighter-rouge&quot;&gt;/ride/status&lt;/code&gt;) to return different ride statuses such as &lt;code class=&quot;highlighter-rouge&quot;&gt;“PICKING”&lt;/code&gt; for the first five requests, &lt;code class=&quot;highlighter-rouge&quot;&gt;“IN_RIDE”&lt;/code&gt; for the next three requests, and so on.&lt;/p&gt;

&lt;p&gt;Now, let’s look at how to use Loki to mock HTTP requests and TCP events.&lt;/p&gt;

&lt;h1 id=&quot;mocking-http-requests&quot;&gt;Mocking HTTP requests&lt;/h1&gt;

&lt;p&gt;To mock HTTP requests, developers first point their app to send requests to the Loki mock server. Then, they set up expectations for all requests sent to the Loki mock server.&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;Loki mock server&quot; src=&quot;/img/loki-dynamic-mock-server-http-tcp-testing/image4.png&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;For example, the Passenger app calls an HTTP dependency &lt;code class=&quot;highlighter-rouge&quot;&gt;GET /closeby/drivers/&lt;/code&gt; to get nearby drivers. To mock it with Loki, you set an expected response on the Loki mock server. When the &lt;code class=&quot;highlighter-rouge&quot;&gt;GET /closeby/drivers/&lt;/code&gt; request is actually made from the Passenger app, Loki returns the set response.&lt;/p&gt;

&lt;p&gt;This snippet shows how to set an expected response for the &lt;code class=&quot;highlighter-rouge&quot;&gt;GET /closeby/drivers/request&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Loki API: POST `/api/v1/expectations`

Request Body :

{
  &quot;uriToMock&quot;: &quot;/closeby/drivers&quot;,
  &quot;method&quot;: &quot;GET&quot;,
  &quot;response&quot;: {
    &quot;drivers&quot;: [
      1001,
      1002,
      1010
    ]
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;workflowfor-setting-expectations-and-receiving-responses&quot;&gt;Workflow for setting expectations and receiving responses&lt;/h2&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;Workflow for setting expectations and receiving responses&quot; src=&quot;/img/loki-dynamic-mock-server-http-tcp-testing/image5.png&quot; /&gt;
&lt;/div&gt;

&lt;h1 id=&quot;mocking-tcp-events&quot;&gt;Mocking TCP events&lt;/h1&gt;

&lt;p&gt;Developers point their app to Loki over a TCP connection and set up the TCP expectations. Loki then generates scheduled events such as sending push messages (job cards, notifications, etc) to the apps pointing at Loki.&lt;/p&gt;

&lt;p&gt;For example, if the Driver app, after it starts, wants to get a job card, you can set an expectation in Loki to push a job card over the TCP connection to the Driver app after a scheduled time interval.&lt;/p&gt;

&lt;p&gt;This snippet shows how to set the TCP expectation and schedule a push message:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Loki API: POST `/api/v1/tcp/expectations/pushmessage`

Request Body :

{
  &quot;name&quot;: &quot;samplePushMsg&quot;,
  &quot;msgSequence&quot;: [
    {
      &quot;messages&quot;: {
        &quot;body&quot;: {
          &quot;jobCardID&quot;: 1001
        }
      }
    },
    {
      &quot;messages&quot;: {
        &quot;body&quot;: {
          &quot;jobCardID&quot;: 1002
        }
      }
    }
  ],
  &quot;schedule&quot;: &quot;@every 1m&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;workflowfor-scheduling-a-push-message-over-tcp&quot;&gt;Workflow for scheduling a push message over TCP&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;images/image1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;Workflow for scheduling a push message over TCP&quot; src=&quot;/img/loki-dynamic-mock-server-http-tcp-testing/image1.png&quot; /&gt;
&lt;/div&gt;

&lt;h1 id=&quot;some-example-use-cases&quot;&gt;Some example use cases&lt;/h1&gt;

&lt;p&gt;Now that you know about Loki, let’s look at some example use cases.&lt;/p&gt;

&lt;h2 id=&quot;generating-a-custom-response-at-runtime&quot;&gt;Generating a custom response at runtime&lt;/h2&gt;

&lt;p&gt;Our first example is customizing a runtime response for both HTTP and TCP requests. This is helpful when developers need dynamic responses to requests. For example, you can add parameters from the request URL or request body to the runtime response.&lt;/p&gt;

&lt;p&gt;It’s simple to implement this with a JavaScript function. Assume you want to embed a message parameter in the request URL to the response. To do this, you first use a POST method to set up the expectation (in JSON format) for the request on Loki:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Loki API: POST `/api/v1/feature/expectations`

Request Body :

{
  &quot;expectations&quot;: [{
    &quot;name&quot;: &quot;Sample call&quot;,
    &quot;desc&quot;: &quot;v1/test/{name}&quot;,
    &quot;tags&quot;: &quot;v1/test/{name}&quot;,
    &quot;resource&quot;: &quot;/v1/test?name=user1&quot;,
    &quot;verb&quot;: &quot;POST&quot;,
    &quot;response&quot;: {
      &quot;body&quot;: &quot;{ \&quot;msg\&quot;: \&quot;Hi \&quot;}&quot;,
      &quot;status&quot;: 200
    },
    &quot;clientOptions&quot;: {
&quot;javascript&quot;: &quot;function main(req, resp) { var url = req.RequestURI; var captured = /name=([^&amp;amp;]+)/.exec(url)[1]; resp.msg =  captured ? resp.msg + captured : resp.msg + 'myDefaultValue'; return resp }&quot;
    },
    &quot;isActive&quot;: 1
  }]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When Loki receives the request, the JavaScript function used in the &lt;code class=&quot;highlighter-rouge&quot;&gt;clientOptionskey&lt;/code&gt;, adds &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt; to the response at runtime. For example, this is the request’s fixed response:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
    &quot;msg&quot;: &quot;Hi &quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But, after using the JavaScript function to add the URL parameter, the dynamic response is:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
    &quot;msg&quot;: &quot;Hi user1&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Similarly, you can use JavaScript to add other dynamic responses such as modifying the response’s JSON array, adding parameters to push messages, etc.&lt;/p&gt;

&lt;h2 id=&quot;defining-a-response-sequence-for-mocked-api-endpoints&quot;&gt;Defining a response sequence for mocked API endpoints&lt;/h2&gt;

&lt;p&gt;Here’s another interesting example - defining the response sequence for API endpoints.&lt;/p&gt;

&lt;p&gt;A response sequence is useful when you need different responses from the same API endpoint. For example, a status endpoint should return different ride statuses such as ‘allocating’, ‘allocated’, ‘picking’, etc. depending on the stage of a ride.&lt;/p&gt;

&lt;p&gt;To do this, developers set up their HTTP expectations on Loki. Then, they easily define the response sequence for an API endpoint using a Loki POST method.&lt;/p&gt;

&lt;p&gt;In this example:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;times&lt;/code&gt; - specifies the number of times the same response is returned.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;after&lt;/code&gt; - specifies one or more expectations that must match before a specified expectation is matched.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here, the expectations are matched in this sequence when a request is made to an endpoint - &lt;code class=&quot;highlighter-rouge&quot;&gt;Allocating&lt;/code&gt; &amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Allocated&lt;/code&gt; &amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Pickuser&lt;/code&gt; &amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Completed&lt;/code&gt;. Further, &lt;code class=&quot;highlighter-rouge&quot;&gt;Completed&lt;/code&gt; is set to two times, so Loki returns this response two times.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Loki API: POST `/api/v1/feature/sequence`

Request Body :
  &quot;httpTimesAndOrder&quot;: [
      {
          &quot;name&quot;: &quot;Allocating&quot;,
          &quot;times&quot;: 1
      },
      {
          &quot;name&quot;: &quot;Allocated&quot;,
          &quot;times&quot;: 1,
          &quot;after&quot;: [&quot;Allocating&quot;]
      },
      {
          &quot;name&quot;: &quot;Pickuser&quot;,
          &quot;times&quot;: 1,
          &quot;after&quot;: [&quot;Allocated&quot;]
      },
      {
          &quot;name&quot;: &quot;Completed&quot;,
          &quot;times&quot;: 2,
          &quot;after&quot;: [&quot;Pickuser&quot;]
      }
  ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;in-conclusion&quot;&gt;In conclusion&lt;/h1&gt;

&lt;p&gt;Since Loki’s inception, we have set up a full range CI with proper end-to-end app UI tests and, to a great extent, decoupled our app releases from the staging backend. This improved delivery cycles, and we did faster bug catching and more exhaustive testing. Moreover, both developers and QAs can easily play with apps to perform exploratory testing as well as manual functional validations. Teams are also using Loki to run automated scripts (Espresso and XCUItests) for validating the mobile app pages.&lt;/p&gt;

&lt;p&gt;Loki’s adoption is growing steadily at Grab. With our frequent release of new mobile app features, Loki helps teams meet our high quality bar and achieve huge productivity gains.&lt;/p&gt;

&lt;p&gt;If you have any feedback or questions on Loki, please leave a comment.&lt;/p&gt;
</description>
        <pubDate>Wed, 10 Apr 2019 02:41:42 +0000</pubDate>
        <link>https://engineering.grab.com/loki-dynamic-mock-server-http-tcp-testing</link>
        <guid isPermaLink="true">https://engineering.grab.com/loki-dynamic-mock-server-http-tcp-testing</guid>
        
        <category>Back End</category>
        
        <category>Service</category>
        
        <category>Mobile</category>
        
        <category>Testing</category>
        
        
        <category>Engineering</category>
        
      </item>
    
      <item>
        <title>How we harnessed the wisdom of crowds to improve restaurant location accuracy</title>
        <description>&lt;p&gt;While studying GPS ping data to understand how long our driver-partners needed to spend at restaurants during a GrabFood delivery, we came across an interesting observation. We realized that there was a significant proportion of restaurants where our driver-partners were waiting for abnormally short durations, often for just seconds.&lt;/p&gt;

&lt;p&gt;Considering that it typically takes a driver a few minutes to enter the restaurant, pick up the order and then leave, we decided to dig further into this phenomenon. What we uncovered was that these super short pit stops were restaurants that were registered at incorrect coordinates within the system due to reasons such as the restaurant had moved to a new location, or human error during onboarding the restaurants. Incorrectly registered locations within our system impact all involved parties - eaters may not see the restaurant because it falls outside their delivery radius or they may see an incorrect ETA, drivers may have trouble finding the restaurant and may end up having to cancel the order, and restaurants who may get fewer orders without really knowing why. &lt;/p&gt;

&lt;p&gt;So we asked ourselves - how can we improve this situation by leveraging the wealth of data that we have? &lt;/p&gt;

&lt;h2 id=&quot;the-solution&quot;&gt;The Solution&lt;/h2&gt;

&lt;p&gt;One of the biggest advantages we have is the huge driver-partner fleet we have on the ground in cities across Southeast Asia. They know the roads and cities like the back of their hand, and they are resourceful. As a result, they are often able to find the restaurants and complete orders even if the location was registered incorrectly. Knowing this, we looked at GPS pings and timestamps from these drivers, and combined this information with when they indicated that they have ordered or collected food from the restaurant. This is then used to infer the “pick-up location” from which the food was collected. &lt;/p&gt;

&lt;p&gt;Inferring this location is not so straightforward though. GPS ping quality can vary significantly across devices and will be affected by whether the device is outdoors or indoors (e.g. if the restaurant is inside a mall). Hence we compute metrics from times and distances between pings, ping frequency and ping quality to filter out orders where the GPS quality is determined to be sub-par. The thresholds for such filtering are determined based on a statistical analysis of orders by regions and times of day. &lt;/p&gt;

&lt;p&gt;One of the outcomes of such an analysis is that we deemed it acceptable to consider a driver “at” a restaurant, if their GPS ping falls within a predetermined radius of the registered location of the restaurant. However, knowing that a driver is at the restaurant does not necessarily tell us “when” he or she  is actually at the restaurant. See the following figure for an example. &lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;Map showing driver paths and GPS location&quot; src=&quot;/img/correcting-restaurant-locations-harnessing-wisdom-of-the-crowd/image1.png&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;As you can see from the area covered by the green circle, there are 3 distinct occurrences or “streaks” when the driver can be determined to be at the restaurant location - once when they are approaching the restaurant from the southwest before taking two right turns, then again when they are actually at the restaurant coming in from the northeast, and again when they leave the restaurant heading southwest before making a U-turn and then heading northeast. In this case, if the driver indicates that they have collected the food during the second streak, chronology is respected - the driver reaches the restaurant, the driver collects the food, the driver leaves the restaurant. However if the driver indicates that they have collected the food during one of the other streaks, that is an invalid pick-up even though it is “at” the restaurant.&lt;/p&gt;

&lt;p&gt;Such potentially invalid pick-ups could result in noisy estimates of restaurant location, as well as hamper us in our parent task of accurately estimating how long drivers need to wait at restaurants. Therefore, we modify the definition of the driver being at the restaurant to only include the time of the longest streak i.e. the time when the driver spent the longest time within the registered location radius. &lt;/p&gt;

&lt;p&gt;Extending this across multiple orders and drivers, we can form a cluster of pick-up locations (both “at” and otherwise) for each restaurant. Each restaurant then gets ranked through a combination of:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Order volume&lt;/strong&gt;: Restaurants which receive more orders are likely to have more valid signals for any predictions we make. Increasing the confidence we have in our estimates.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fraction of the orders where the pick-up location was not “at” the restaurant&lt;/strong&gt;: This fraction indicates the number of orders with a pick-up location not near the registered restaurant location (with near being defined both spatially and temporally as above). A higher value indicates a higher likelihood of the restaurant not being in the registered location subject to order volume&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Median distance between registered and estimated locations&lt;/strong&gt;: This factor is used to rank restaurants by a notion of “importance”. A restaurant which is just outside the fixed radius from above can be addressed after another restaurant which is a kilometer away. &lt;/p&gt;

&lt;p&gt;This ranked list of restaurants is then passed on to our mapping operations team to verify. The team checks various sources to verify if the restaurant is incorrectly located which is then fed back to the GrabFood system and the locations updated accordingly.&lt;/p&gt;

&lt;h2 id=&quot;results&quot;&gt;Results&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;We have a system to catch and fix obvious errors&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The table below shows a few examples of errors we were able to catch and fix. The image on the left shows the distance between an incorrectly registered address and the actual location of the restaurant.&lt;/p&gt;

&lt;table class=&quot;table&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Restaurant&lt;/th&gt;
      &lt;th&gt;Path from registered location to estimated location&lt;/th&gt;
      &lt;th&gt;Zoomed in view of estimated location&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Sederhana  Minang&lt;/td&gt;
      &lt;td&gt;&lt;img alt=&quot;Sederhana  Minang path from registered to estimated location&quot; src=&quot;/img/correcting-restaurant-locations-harnessing-wisdom-of-the-crowd/image3.png&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;img alt=&quot;Sederhana  Minang zoomed in view of estimated location&quot; src=&quot;/img/correcting-restaurant-locations-harnessing-wisdom-of-the-crowd/image2.png&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Papa Ron's Pizza&lt;/td&gt;
      &lt;td&gt;&lt;img alt=&quot;Papa Ron's Pizza path from registered to estimated location&quot; src=&quot;/img/correcting-restaurant-locations-harnessing-wisdom-of-the-crowd/image6.png&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;img alt=&quot;Papa Ron's Pizza zoomed in view of estimated location&quot; src=&quot;/img/correcting-restaurant-locations-harnessing-wisdom-of-the-crowd/image4.png&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Rich-O Donuts &amp;amp; Cafe&lt;/td&gt;
      &lt;td&gt;&lt;img alt=&quot;Rich-O Donuts &amp;amp; Cafe path from registered to estimated location&quot; src=&quot;/img/correcting-restaurant-locations-harnessing-wisdom-of-the-crowd/image9.png&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;img alt=&quot;Rich-O Donuts &amp;amp; Cafe zoomed in view of estimated location&quot; src=&quot;/img/correcting-restaurant-locations-harnessing-wisdom-of-the-crowd/image7.png&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Fixing these errors periodically greatly reduced the median error distance (measured as the straight line distance between the estimated location and registered location) in each city as restaurant locations were corrected.&lt;/p&gt;

&lt;table class=&quot;table&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Bangkok&lt;/th&gt;
      &lt;th&gt;Ho Chi Minh&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img alt=&quot;Median error distance in Bangkok&quot; src=&quot;/img/correcting-restaurant-locations-harnessing-wisdom-of-the-crowd/image13.png&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;img alt=&quot;Median error distance in Ho Chi Minh&quot; src=&quot;/img/correcting-restaurant-locations-harnessing-wisdom-of-the-crowd/image5.png&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;We helped to reduce cancellations&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We also tracked the number of GrabFood orders cancelled because the restaurant could not be found by our driver-partners as indicated on the app. Once we started making periodic updates, we saw a 5x decrease in cancellations because of incorrect restaurant locations. &lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;Relative cancellation rate due to incorrect location&quot; src=&quot;/img/correcting-restaurant-locations-harnessing-wisdom-of-the-crowd/image8.png&quot; /&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;We discovered some interesting findings!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In some cases, we were actually stumped when trying to correct some of the locations according to what the system estimated. One of the most interesting examples was the restaurant “Waroeng Steak and Shake” in Bekasi. According to our system, the restaurant’s location was further up Jalan Raya Jatiwaringin than we thought it to be. &lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;Waroeng Steak and Shake map location&quot; src=&quot;/img/correcting-restaurant-locations-harnessing-wisdom-of-the-crowd/image10.png&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Examining this on Google Maps, we noticed that both locations oddly seemed to have a branch of the restaurant. What was going on here? &lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;Waroeng Steak and Shake map location on Google Maps&quot; src=&quot;/img/correcting-restaurant-locations-harnessing-wisdom-of-the-crowd/image11.png&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;By looking at Google Reviews (credit to my colleague Kenneth Loh for the idea), we realized that  the restaurant seemed to have changed its location, and this is what our system was picking up on. &lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;Waroeng Steak and Shake Google Maps reviews&quot; src=&quot;/img/correcting-restaurant-locations-harnessing-wisdom-of-the-crowd/image12.png&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;In summary, the system was able to respond to a change in location for the restaurant without any active action taken by the restaurant and while other data sources had duplicates. &lt;/p&gt;

&lt;h2 id=&quot;whats-next&quot;&gt;What’s Next?&lt;/h2&gt;

&lt;p&gt;Going forward, we are looking to automate some aspects of this workflow. Currently, the validation part is handled by our mapping operations team and we are looking to feedback their validation and actions taken so that we can finetune various hyperparameters in our system (registered location radii, normalization factors, etc) and/or train more advanced models that are cognizant of different geo and driver characteristics in different markets.&lt;/p&gt;

&lt;p&gt;Additionally while we know that we should expect poor results for some scenarios (e.g. inside malls due to poor GPS quality and often approximate registered locations), we can extract such information (restaurant is inside a mall in this case) through a combination of manual feedback from operations teams and drivers, as well as automated NLP techniques such as name and address parsing and entity recognition. &lt;/p&gt;

&lt;p&gt;In the end, it is always useful to question the predictions that a system makes. By looking at some abnormally small wait times at restaurants, we were able to discover, provide feedback and continually update restaurant locations within the GrabFood ecosystem resulting in an overall better experience for our eaters, driver-partners and merchant-partners.&lt;/p&gt;
</description>
        <pubDate>Tue, 02 Apr 2019 07:43:40 +0000</pubDate>
        <link>https://engineering.grab.com/correcting-restaurant-locations-harnessing-wisdom-of-the-crowd</link>
        <guid isPermaLink="true">https://engineering.grab.com/correcting-restaurant-locations-harnessing-wisdom-of-the-crowd</guid>
        
        <category>Data Science</category>
        
        
        <category>Data Science</category>
        
      </item>
    
      <item>
        <title>Designing resilient systems beyond retries (Part 3): Architecture Patterns and Chaos Engineering</title>
        <description>&lt;p&gt;&lt;em&gt;This post is the third of a three-part series on going beyond retries and circuit breakers to improve system resiliency. This whole series covers techniques and architectures that can be used as part of a strategy to improve resiliency. In this article, we will focus on architecture patterns and chaos engineering to reduce, prevent, and test resiliency.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;reducing-failure-through-architecture-patterns&quot;&gt;Reducing failure through architecture patterns&lt;/h2&gt;

&lt;p&gt;Resiliency is all about preparing for and handling failure. So the most effective way to improve resiliency is undoubtedly to reduce the possible ways in which failure can occur, and several architectural patterns have emerged with this aim in mind. Unfortunately these are easier to apply when designing new systems and less relevant to existing ones, but if resiliency is still an issue and no other techniques are helping, then refactoring the system is a good approach to consider.&lt;/p&gt;

&lt;h3 id=&quot;idempotency&quot;&gt;Idempotency&lt;/h3&gt;

&lt;p&gt;One popular pattern for improving resiliency is the concept of &lt;em&gt;idempotency&lt;/em&gt;. Strictly speaking, an idempotent endpoint is one which always returns the same result given the same parameters, no matter how many times it is called. However, the definition is usually extended to mean it returns the results and has no side-effects, or any side-effects are &lt;em&gt;only executed&lt;/em&gt; once. The main benefit of making endpoints idempotent is that they are always safe to retry, so it complements the retry technique to make it more effective. It also means there is less chance of the system getting into an inconsistent or worse state after experiencing failure.&lt;/p&gt;

&lt;p&gt;If an operation has side-effects but cannot distinguish unique calls with its current parameters, it can be made to be idempotent by adding an &lt;em&gt;idempotency key&lt;/em&gt; parameter. The classic example is money: a ‘transfer money to X’ operation may legitimately occur multiple times with the same parameters, but making the same call twice would be a mistake, so it is not idempotent. A client would not be able to retry a call that timed out, because it does not know whether or not the server processed the request. However, if the client generates and sends a unique ID as an &lt;em&gt;idempotency key&lt;/em&gt; parameter, then it can safely retry. The server can then use this information to determine whether to process the request (if it sees the request for the first time) or return the result of the previous operation.&lt;/p&gt;

&lt;div class=&quot;post-image-section&quot;&gt;
  &lt;img alt=&quot;Using idempotency keys can guarantee idempotency for endpoints with side-effects&quot; src=&quot;/img/beyond-retries-part-3/image1.png&quot; /&gt;
  &lt;small class=&quot;post-image-caption&quot;&gt;Using idempotency keys can guarantee idempotency for endpoints with side-effects&lt;/small&gt;
&lt;/div&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h3 id=&quot;asynchronous-responses&quot;&gt;Asynchronous responses&lt;/h3&gt;

&lt;p&gt;A second pattern is making use of asynchronous responses. Rather than relying on a successful call to a dependency which may fail, a service may complete its own work and return a successful or partial response to the client. The client would then have to receive the response in an alternate way, either by polling (‘pull’) until the result is ready or the response being ‘pushed’ from the server when it completes.&lt;/p&gt;

&lt;p&gt;From a resiliency perspective, this guarantees that the downstream errors do not affect the endpoint. Furthermore, the risk of the dependency causing latency or consuming resources goes away, and it can be retried in the background until it succeeds. The disadvantage is that this works against the ‘fail fast’ principle, since the call might be retried indefinitely without ever failing. It might not be clear to the client what to do in this case.&lt;/p&gt;

&lt;p&gt;Not all endpoints have to be made asynchronous, and the decision to be synchronous or not could be made by the endpoint dynamically, depending on the service health. Work that can be made asynchronous is known as &lt;em&gt;deferrable work&lt;/em&gt;, and utilizing this information can save resources and allow the more critical endpoints to complete. For example, a fraud system may decide whether or not a newly registered user should be allowed to use the application, but such decisions are often complex and costly. Rather than slow down the registration process for every user and create a poor first impression, the decision can be made asynchronously. When the fraud-decision system is available, it picks up the task and processes it. If the user is then found to be fraudulent, their account can be deactivated at that point.&lt;/p&gt;

&lt;h2 id=&quot;preventing-disaster-through-chaos-engineering&quot;&gt;Preventing disaster through chaos engineering&lt;/h2&gt;

&lt;p&gt;It is famously understood that disaster recovery is worthless unless it’s tested regularly. There are dozens of stories of employees diligently performing backups every day only to find that when they actually needed to restore from it, the backups were empty. The same thing applies to resiliency, albeit with less spectacular consequences.&lt;/p&gt;

&lt;p&gt;The emerging best practice for testing resiliency is &lt;em&gt;chaos engineering&lt;/em&gt;. This practice, made famous by Netflix’s &lt;a href=&quot;https://medium.com/netflix-techblog/the-netflix-simian-army-16e57fbab116&quot;&gt;Chaos Monkey&lt;/a&gt;, is the idea of deliberately causing parts of a system to fail in order to test (and subsequently improve) its resiliency. There are many different kinds of chaos engineering that vary in scope, from simulating an outage in an entire AWS region to injecting latency into a single endpoint. A chaos engineering strategy may include multiple types of failure, to build confidence in the ability of various parts of the system to withstand failure.&lt;/p&gt;

&lt;p&gt;Chaos engineering has evolved since its inception, ironically becoming less ‘chaotic’, despite the name. Shutting off parts of a system without a clear plan is unlikely to provide much value, but is practically guaranteed to frustrate your customers - and upper management! Since it is recommended to experiment on production, minimizing the &lt;em&gt;blast radius&lt;/em&gt; of chaos experiments, at least at the beginning, is crucial to avoid unnecessary impact to the system.&lt;/p&gt;

&lt;h3 id=&quot;chaos-experiment-process&quot;&gt;Chaos experiment process&lt;/h3&gt;

&lt;p&gt;The basic process for conducting a chaos experiment is as follows:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Define how to measure a ‘steady state’, in order to confirm that the system is currently working as expected.&lt;/li&gt;
  &lt;li&gt;Decide on a ‘control group’ (which does not change) and an ‘experiment group’ from the pool of backend servers.&lt;/li&gt;
  &lt;li&gt;Hypothesize that the steady state will not change during the experiment.&lt;/li&gt;
  &lt;li&gt;Introduce a failure in one component or aspect of the system in the control group, such as the network connection to the database.&lt;/li&gt;
  &lt;li&gt;Attempt to disprove the hypothesis by analyzing the difference in metrics between the control and experiment groups.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If the hypothesis is disproved, then the parts of the system which failed are candidates for improvement. After making changes, the experiments are run again, and gradually confidence in the system should improve.&lt;/p&gt;

&lt;p&gt;Chaos experiments should ideally mimic real-world scenarios that could actually happen, such as a server shutting down or a network connection being disconnected. These events do not necessarily have to be directly related to failure - ordinary events such as auto-scaling or a change in server hardware or VM type can be experimented with, as they could still potentially affect the steady state.&lt;/p&gt;

&lt;p&gt;Finally, it is important to automate as much of the chaos experiment process as possible. From setting up the control group to starting the experiment and measuring the results, to automatically disabling the experiment if the impact to production has exceeded the blast radius, the investment in automating them will save valuable engineering time and allow for experiments to eventually be run continuously.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Retries are a useful and important part of building resilient software systems. However, they only solve one part of the resiliency problem, namely recovery. Recovery via retries is only possible under certain conditions and could potentially exacerbate a system failure if other safeguards aren’t also in place. Some of these safeguards and other resiliency patterns have been discussed in this article.&lt;/p&gt;

&lt;p&gt;The excellent Hystrix library combines multiple resiliency techniques, such as circuit-breaking, timeouts and bulkheading, in a single place. But even Hystrix cannot claim to solve all resiliency issues, and it would not be wise to rely on a single library completely. However, just as it can’t be recommended to only use Hystrix, suddenly introducing all of the above patterns isn’t advisable either. There is a point of diminishing returns with adding more; more techniques means more complexity, and more possible things that could go wrong.&lt;/p&gt;

&lt;p&gt;Rather than implement all of the resiliency patterns described above, it is recommended to selectively apply patterns that complement each other and cover existing gaps that have previously been identified. For example, an existing retry strategy can be enhanced by gradually switching to idempotent endpoints, improving the coverage of API calls that can be retried.&lt;/p&gt;

&lt;p&gt;A microservice architecture is a good foundation for building a resilient system, but it requires careful planning and implementation to achieve. By identifying the possible ways in which a system can fail, then evaluating and applying the tried-and-tested patterns to withstand them, a reliable system can become one that is truly resilient.&lt;/p&gt;

&lt;p&gt;I hope you found this series useful. Comments are always welcome.&lt;/p&gt;
</description>
        <pubDate>Wed, 27 Mar 2019 17:17:35 +0000</pubDate>
        <link>https://engineering.grab.com/beyond-retries-part-3</link>
        <guid isPermaLink="true">https://engineering.grab.com/beyond-retries-part-3</guid>
        
        <category>Resiliency</category>
        
        <category>Microservice</category>
        
        <category>Chaos Engineering</category>
        
        
        <category>Engineering</category>
        
      </item>
    
  </channel>
</rss>
